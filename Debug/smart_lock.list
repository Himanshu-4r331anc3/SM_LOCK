
smart_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007000  08007000  00017000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ec  080073ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080073ec  080073ec  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080073ec  080073ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f0  080073f0  000173f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080073f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e4  080075d8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  080075d8  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000600b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000184e  00000000  00000000  0002625a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00027aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000537  00000000  00000000  000281b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002791  00000000  00000000  000286ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008633  00000000  00000000  0002ae80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005d57b  00000000  00000000  000334b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027ac  00000000  00000000  00090a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000931dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e4 	.word	0x200001e4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006fe4 	.word	0x08006fe4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e8 	.word	0x200001e8
 8000104:	08006fe4 	.word	0x08006fe4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff29 	bl	8001294 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe79 	bl	8001144 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff1b 	bl	8001294 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff11 	bl	8001294 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fea1 	bl	80011c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe97 	bl	80011c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0004      	movs	r4, r0
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	001f      	movs	r7, r3
 80004b6:	030b      	lsls	r3, r1, #12
 80004b8:	0010      	movs	r0, r2
 80004ba:	004e      	lsls	r6, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0fcd      	lsrs	r5, r1, #31
 80004c0:	0f61      	lsrs	r1, r4, #29
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	4319      	orrs	r1, r3
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	0fff      	lsrs	r7, r7, #31
 80004cc:	46bc      	mov	ip, r7
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	0f47      	lsrs	r7, r0, #29
 80004d2:	4327      	orrs	r7, r4
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d52      	lsrs	r2, r2, #21
 80004d8:	00c0      	lsls	r0, r0, #3
 80004da:	46b9      	mov	r9, r7
 80004dc:	4680      	mov	r8, r0
 80004de:	1ab7      	subs	r7, r6, r2
 80004e0:	4565      	cmp	r5, ip
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e09b      	b.n	800061e <__aeabi_dadd+0x176>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_dadd+0x44>
 80004ea:	e084      	b.n	80005f6 <__aeabi_dadd+0x14e>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e0be      	b.n	8000670 <__aeabi_dadd+0x1c8>
 80004f2:	4ac8      	ldr	r2, [pc, #800]	; (8000814 <__aeabi_dadd+0x36c>)
 80004f4:	4296      	cmp	r6, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e124      	b.n	8000744 <__aeabi_dadd+0x29c>
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	464c      	mov	r4, r9
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	4314      	orrs	r4, r2
 8000502:	46a1      	mov	r9, r4
 8000504:	2f38      	cmp	r7, #56	; 0x38
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0x62>
 8000508:	e167      	b.n	80007da <__aeabi_dadd+0x332>
 800050a:	2f1f      	cmp	r7, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e1d6      	b.n	80008be <__aeabi_dadd+0x416>
 8000510:	2220      	movs	r2, #32
 8000512:	464c      	mov	r4, r9
 8000514:	1bd2      	subs	r2, r2, r7
 8000516:	4094      	lsls	r4, r2
 8000518:	46a2      	mov	sl, r4
 800051a:	4644      	mov	r4, r8
 800051c:	40fc      	lsrs	r4, r7
 800051e:	0020      	movs	r0, r4
 8000520:	4654      	mov	r4, sl
 8000522:	4304      	orrs	r4, r0
 8000524:	4640      	mov	r0, r8
 8000526:	4090      	lsls	r0, r2
 8000528:	1e42      	subs	r2, r0, #1
 800052a:	4190      	sbcs	r0, r2
 800052c:	464a      	mov	r2, r9
 800052e:	40fa      	lsrs	r2, r7
 8000530:	4304      	orrs	r4, r0
 8000532:	1a89      	subs	r1, r1, r2
 8000534:	1b1c      	subs	r4, r3, r4
 8000536:	42a3      	cmp	r3, r4
 8000538:	4192      	sbcs	r2, r2
 800053a:	4252      	negs	r2, r2
 800053c:	1a8b      	subs	r3, r1, r2
 800053e:	469a      	mov	sl, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0xa0>
 8000546:	e0d4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000548:	4653      	mov	r3, sl
 800054a:	025a      	lsls	r2, r3, #9
 800054c:	0a53      	lsrs	r3, r2, #9
 800054e:	469a      	mov	sl, r3
 8000550:	4653      	mov	r3, sl
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0xb0>
 8000556:	e104      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000558:	4650      	mov	r0, sl
 800055a:	f001 fded 	bl	8002138 <__clzsi2>
 800055e:	0003      	movs	r3, r0
 8000560:	3b08      	subs	r3, #8
 8000562:	2220      	movs	r2, #32
 8000564:	0020      	movs	r0, r4
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4651      	mov	r1, sl
 800056a:	40d0      	lsrs	r0, r2
 800056c:	4099      	lsls	r1, r3
 800056e:	0002      	movs	r2, r0
 8000570:	409c      	lsls	r4, r3
 8000572:	430a      	orrs	r2, r1
 8000574:	42b3      	cmp	r3, r6
 8000576:	da00      	bge.n	800057a <__aeabi_dadd+0xd2>
 8000578:	e102      	b.n	8000780 <__aeabi_dadd+0x2d8>
 800057a:	1b9b      	subs	r3, r3, r6
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	291f      	cmp	r1, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xdc>
 8000582:	e0a7      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000584:	2320      	movs	r3, #32
 8000586:	0010      	movs	r0, r2
 8000588:	0026      	movs	r6, r4
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	409c      	lsls	r4, r3
 800058e:	4098      	lsls	r0, r3
 8000590:	40ce      	lsrs	r6, r1
 8000592:	40ca      	lsrs	r2, r1
 8000594:	1e63      	subs	r3, r4, #1
 8000596:	419c      	sbcs	r4, r3
 8000598:	4330      	orrs	r0, r6
 800059a:	4692      	mov	sl, r2
 800059c:	2600      	movs	r6, #0
 800059e:	4304      	orrs	r4, r0
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005ac:	1d23      	adds	r3, r4, #4
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41a4      	sbcs	r4, r4
 80005b2:	4264      	negs	r4, r4
 80005b4:	44a2      	add	sl, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_dadd+0x118>
 80005be:	e09b      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005c0:	4b94      	ldr	r3, [pc, #592]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c2:	3601      	adds	r6, #1
 80005c4:	429e      	cmp	r6, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x122>
 80005c8:	e0b8      	b.n	800073c <__aeabi_dadd+0x294>
 80005ca:	4653      	mov	r3, sl
 80005cc:	4992      	ldr	r1, [pc, #584]	; (8000818 <__aeabi_dadd+0x370>)
 80005ce:	08e4      	lsrs	r4, r4, #3
 80005d0:	400b      	ands	r3, r1
 80005d2:	0019      	movs	r1, r3
 80005d4:	075b      	lsls	r3, r3, #29
 80005d6:	4323      	orrs	r3, r4
 80005d8:	0572      	lsls	r2, r6, #21
 80005da:	024c      	lsls	r4, r1, #9
 80005dc:	0b24      	lsrs	r4, r4, #12
 80005de:	0d52      	lsrs	r2, r2, #21
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	07ed      	lsls	r5, r5, #31
 80005e4:	4322      	orrs	r2, r4
 80005e6:	432a      	orrs	r2, r5
 80005e8:	0018      	movs	r0, r3
 80005ea:	0011      	movs	r1, r2
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	d048      	beq.n	800068c <__aeabi_dadd+0x1e4>
 80005fa:	1b97      	subs	r7, r2, r6
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e10e      	b.n	8000820 <__aeabi_dadd+0x378>
 8000602:	000c      	movs	r4, r1
 8000604:	431c      	orrs	r4, r3
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e1b7      	b.n	800097a <__aeabi_dadd+0x4d2>
 800060a:	1e7c      	subs	r4, r7, #1
 800060c:	2f01      	cmp	r7, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e226      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000612:	4d80      	ldr	r5, [pc, #512]	; (8000814 <__aeabi_dadd+0x36c>)
 8000614:	42af      	cmp	r7, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e1d5      	b.n	80009c6 <__aeabi_dadd+0x51e>
 800061a:	0027      	movs	r7, r4
 800061c:	e107      	b.n	800082e <__aeabi_dadd+0x386>
 800061e:	2f00      	cmp	r7, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x17c>
 8000622:	e0b2      	b.n	800078a <__aeabi_dadd+0x2e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d047      	beq.n	80006b8 <__aeabi_dadd+0x210>
 8000628:	4a7a      	ldr	r2, [pc, #488]	; (8000814 <__aeabi_dadd+0x36c>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x188>
 800062e:	e089      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	464c      	mov	r4, r9
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a1      	mov	r9, r4
 800063a:	2f38      	cmp	r7, #56	; 0x38
 800063c:	dc6b      	bgt.n	8000716 <__aeabi_dadd+0x26e>
 800063e:	2f1f      	cmp	r7, #31
 8000640:	dc00      	bgt.n	8000644 <__aeabi_dadd+0x19c>
 8000642:	e16e      	b.n	8000922 <__aeabi_dadd+0x47a>
 8000644:	003a      	movs	r2, r7
 8000646:	4648      	mov	r0, r9
 8000648:	3a20      	subs	r2, #32
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4684      	mov	ip, r0
 800064e:	2f20      	cmp	r7, #32
 8000650:	d007      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	4648      	mov	r0, r9
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	4090      	lsls	r0, r2
 800065a:	0002      	movs	r2, r0
 800065c:	4640      	mov	r0, r8
 800065e:	4310      	orrs	r0, r2
 8000660:	4680      	mov	r8, r0
 8000662:	4640      	mov	r0, r8
 8000664:	1e42      	subs	r2, r0, #1
 8000666:	4190      	sbcs	r0, r2
 8000668:	4662      	mov	r2, ip
 800066a:	0004      	movs	r4, r0
 800066c:	4314      	orrs	r4, r2
 800066e:	e057      	b.n	8000720 <__aeabi_dadd+0x278>
 8000670:	464a      	mov	r2, r9
 8000672:	4302      	orrs	r2, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1d0>
 8000676:	e103      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000678:	1e7a      	subs	r2, r7, #1
 800067a:	2f01      	cmp	r7, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1d8>
 800067e:	e193      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000680:	4c64      	ldr	r4, [pc, #400]	; (8000814 <__aeabi_dadd+0x36c>)
 8000682:	42a7      	cmp	r7, r4
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e18a      	b.n	800099e <__aeabi_dadd+0x4f6>
 8000688:	0017      	movs	r7, r2
 800068a:	e73b      	b.n	8000504 <__aeabi_dadd+0x5c>
 800068c:	4c63      	ldr	r4, [pc, #396]	; (800081c <__aeabi_dadd+0x374>)
 800068e:	1c72      	adds	r2, r6, #1
 8000690:	4222      	tst	r2, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e0e0      	b.n	8000858 <__aeabi_dadd+0x3b0>
 8000696:	000a      	movs	r2, r1
 8000698:	431a      	orrs	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x1f8>
 800069e:	e174      	b.n	800098a <__aeabi_dadd+0x4e2>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1fe>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a0>
 80006a6:	464a      	mov	r2, r9
 80006a8:	4302      	orrs	r2, r0
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x206>
 80006ac:	e1e3      	b.n	8000a76 <__aeabi_dadd+0x5ce>
 80006ae:	074a      	lsls	r2, r1, #29
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	08c9      	lsrs	r1, r1, #3
 80006b6:	e029      	b.n	800070c <__aeabi_dadd+0x264>
 80006b8:	464a      	mov	r2, r9
 80006ba:	4302      	orrs	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e17d      	b.n	80009bc <__aeabi_dadd+0x514>
 80006c0:	1e7a      	subs	r2, r7, #1
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c52      	ldr	r4, [pc, #328]	; (8000814 <__aeabi_dadd+0x36c>)
 80006ca:	42a7      	cmp	r7, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e166      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006d0:	0017      	movs	r7, r2
 80006d2:	e7b2      	b.n	800063a <__aeabi_dadd+0x192>
 80006d4:	0010      	movs	r0, r2
 80006d6:	3b1f      	subs	r3, #31
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	2920      	cmp	r1, #32
 80006dc:	d003      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	409a      	lsls	r2, r3
 80006e4:	4314      	orrs	r4, r2
 80006e6:	1e63      	subs	r3, r4, #1
 80006e8:	419c      	sbcs	r4, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	2600      	movs	r6, #0
 80006ee:	469a      	mov	sl, r3
 80006f0:	4304      	orrs	r4, r0
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e755      	b.n	80005a4 <__aeabi_dadd+0xfc>
 80006f8:	4652      	mov	r2, sl
 80006fa:	08e3      	lsrs	r3, r4, #3
 80006fc:	0752      	lsls	r2, r2, #29
 80006fe:	4313      	orrs	r3, r2
 8000700:	4652      	mov	r2, sl
 8000702:	0037      	movs	r7, r6
 8000704:	08d1      	lsrs	r1, r2, #3
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <__aeabi_dadd+0x36c>)
 8000708:	4297      	cmp	r7, r2
 800070a:	d01f      	beq.n	800074c <__aeabi_dadd+0x2a4>
 800070c:	0309      	lsls	r1, r1, #12
 800070e:	057a      	lsls	r2, r7, #21
 8000710:	0b0c      	lsrs	r4, r1, #12
 8000712:	0d52      	lsrs	r2, r2, #21
 8000714:	e764      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000716:	4642      	mov	r2, r8
 8000718:	464c      	mov	r4, r9
 800071a:	4314      	orrs	r4, r2
 800071c:	1e62      	subs	r2, r4, #1
 800071e:	4194      	sbcs	r4, r2
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	429c      	cmp	r4, r3
 8000724:	4192      	sbcs	r2, r2
 8000726:	4252      	negs	r2, r2
 8000728:	4692      	mov	sl, r2
 800072a:	448a      	add	sl, r1
 800072c:	4653      	mov	r3, sl
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	d5df      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <__aeabi_dadd+0x36c>)
 8000734:	3601      	adds	r6, #1
 8000736:	429e      	cmp	r6, r3
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x294>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dadd+0x3fc>
 800073c:	0032      	movs	r2, r6
 800073e:	2400      	movs	r4, #0
 8000740:	2300      	movs	r3, #0
 8000742:	e74d      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000744:	074a      	lsls	r2, r1, #29
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	4313      	orrs	r3, r2
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	001a      	movs	r2, r3
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000752:	e200      	b.n	8000b56 <__aeabi_dadd+0x6ae>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	0324      	lsls	r4, r4, #12
 8000758:	430c      	orrs	r4, r1
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <__aeabi_dadd+0x36c>)
 800075e:	0b24      	lsrs	r4, r4, #12
 8000760:	e73e      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000762:	0020      	movs	r0, r4
 8000764:	f001 fce8 	bl	8002138 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3318      	adds	r3, #24
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e6f7      	b.n	8000562 <__aeabi_dadd+0xba>
 8000772:	0022      	movs	r2, r4
 8000774:	3808      	subs	r0, #8
 8000776:	4082      	lsls	r2, r0
 8000778:	2400      	movs	r4, #0
 800077a:	42b3      	cmp	r3, r6
 800077c:	db00      	blt.n	8000780 <__aeabi_dadd+0x2d8>
 800077e:	e6fc      	b.n	800057a <__aeabi_dadd+0xd2>
 8000780:	1af6      	subs	r6, r6, r3
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <__aeabi_dadd+0x370>)
 8000784:	401a      	ands	r2, r3
 8000786:	4692      	mov	sl, r2
 8000788:	e70a      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d02b      	beq.n	80007e6 <__aeabi_dadd+0x33e>
 800078e:	1b97      	subs	r7, r2, r6
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x460>
 8000796:	4c1f      	ldr	r4, [pc, #124]	; (8000814 <__aeabi_dadd+0x36c>)
 8000798:	42a2      	cmp	r2, r4
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2f6>
 800079c:	e11c      	b.n	80009d8 <__aeabi_dadd+0x530>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	4321      	orrs	r1, r4
 80007a4:	2f38      	cmp	r7, #56	; 0x38
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x302>
 80007a8:	e11e      	b.n	80009e8 <__aeabi_dadd+0x540>
 80007aa:	2f1f      	cmp	r7, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x308>
 80007ae:	e19e      	b.n	8000aee <__aeabi_dadd+0x646>
 80007b0:	2620      	movs	r6, #32
 80007b2:	000c      	movs	r4, r1
 80007b4:	1bf6      	subs	r6, r6, r7
 80007b6:	0018      	movs	r0, r3
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	40b4      	lsls	r4, r6
 80007bc:	40f8      	lsrs	r0, r7
 80007be:	1e5e      	subs	r6, r3, #1
 80007c0:	41b3      	sbcs	r3, r6
 80007c2:	40f9      	lsrs	r1, r7
 80007c4:	4304      	orrs	r4, r0
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4489      	add	r9, r1
 80007ca:	4444      	add	r4, r8
 80007cc:	4544      	cmp	r4, r8
 80007ce:	419b      	sbcs	r3, r3
 80007d0:	425b      	negs	r3, r3
 80007d2:	444b      	add	r3, r9
 80007d4:	469a      	mov	sl, r3
 80007d6:	0016      	movs	r6, r2
 80007d8:	e7a8      	b.n	800072c <__aeabi_dadd+0x284>
 80007da:	4642      	mov	r2, r8
 80007dc:	464c      	mov	r4, r9
 80007de:	4314      	orrs	r4, r2
 80007e0:	1e62      	subs	r2, r4, #1
 80007e2:	4194      	sbcs	r4, r2
 80007e4:	e6a6      	b.n	8000534 <__aeabi_dadd+0x8c>
 80007e6:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__aeabi_dadd+0x374>)
 80007e8:	1c72      	adds	r2, r6, #1
 80007ea:	4222      	tst	r2, r4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x348>
 80007ee:	e0a8      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007f0:	000a      	movs	r2, r1
 80007f2:	431a      	orrs	r2, r3
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x352>
 80007f8:	e10a      	b.n	8000a10 <__aeabi_dadd+0x568>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x358>
 80007fe:	e15e      	b.n	8000abe <__aeabi_dadd+0x616>
 8000800:	464a      	mov	r2, r9
 8000802:	4302      	orrs	r2, r0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x360>
 8000806:	e161      	b.n	8000acc <__aeabi_dadd+0x624>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e77c      	b.n	800070c <__aeabi_dadd+0x264>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	4ccf      	ldr	r4, [pc, #828]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000822:	42a2      	cmp	r2, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x380>
 8000826:	e0ce      	b.n	80009c6 <__aeabi_dadd+0x51e>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	0424      	lsls	r4, r4, #16
 800082c:	4321      	orrs	r1, r4
 800082e:	2f38      	cmp	r7, #56	; 0x38
 8000830:	dc5b      	bgt.n	80008ea <__aeabi_dadd+0x442>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x390>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x54a>
 8000838:	2520      	movs	r5, #32
 800083a:	000c      	movs	r4, r1
 800083c:	1bed      	subs	r5, r5, r7
 800083e:	001e      	movs	r6, r3
 8000840:	40ab      	lsls	r3, r5
 8000842:	40ac      	lsls	r4, r5
 8000844:	40fe      	lsrs	r6, r7
 8000846:	1e5d      	subs	r5, r3, #1
 8000848:	41ab      	sbcs	r3, r5
 800084a:	4334      	orrs	r4, r6
 800084c:	40f9      	lsrs	r1, r7
 800084e:	431c      	orrs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	1a5b      	subs	r3, r3, r1
 8000854:	4699      	mov	r9, r3
 8000856:	e04c      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000858:	464a      	mov	r2, r9
 800085a:	1a1c      	subs	r4, r3, r0
 800085c:	1a88      	subs	r0, r1, r2
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4692      	mov	sl, r2
 8000866:	0002      	movs	r2, r0
 8000868:	4650      	mov	r0, sl
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	4692      	mov	sl, r2
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	d478      	bmi.n	8000964 <__aeabi_dadd+0x4bc>
 8000872:	4653      	mov	r3, sl
 8000874:	4323      	orrs	r3, r4
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x3d2>
 8000878:	e66a      	b.n	8000550 <__aeabi_dadd+0xa8>
 800087a:	2100      	movs	r1, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e745      	b.n	800070c <__aeabi_dadd+0x264>
 8000880:	074a      	lsls	r2, r1, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	e73d      	b.n	8000706 <__aeabi_dadd+0x25e>
 800088a:	181c      	adds	r4, r3, r0
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4449      	add	r1, r9
 8000892:	468a      	mov	sl, r1
 8000894:	425b      	negs	r3, r3
 8000896:	449a      	add	sl, r3
 8000898:	4653      	mov	r3, sl
 800089a:	2601      	movs	r6, #1
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x3fa>
 80008a0:	e727      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4652      	mov	r2, sl
 80008a6:	4baf      	ldr	r3, [pc, #700]	; (8000b64 <__aeabi_dadd+0x6bc>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	401a      	ands	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	4021      	ands	r1, r4
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	07dc      	lsls	r4, r3, #31
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	469a      	mov	sl, r3
 80008ba:	4314      	orrs	r4, r2
 80008bc:	e670      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80008be:	003a      	movs	r2, r7
 80008c0:	464c      	mov	r4, r9
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	46a4      	mov	ip, r4
 80008c8:	2f20      	cmp	r7, #32
 80008ca:	d007      	beq.n	80008dc <__aeabi_dadd+0x434>
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	4648      	mov	r0, r9
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4090      	lsls	r0, r2
 80008d4:	0002      	movs	r2, r0
 80008d6:	4640      	mov	r0, r8
 80008d8:	4310      	orrs	r0, r2
 80008da:	4680      	mov	r8, r0
 80008dc:	4640      	mov	r0, r8
 80008de:	1e42      	subs	r2, r0, #1
 80008e0:	4190      	sbcs	r0, r2
 80008e2:	4662      	mov	r2, ip
 80008e4:	0004      	movs	r4, r0
 80008e6:	4314      	orrs	r4, r2
 80008e8:	e624      	b.n	8000534 <__aeabi_dadd+0x8c>
 80008ea:	4319      	orrs	r1, r3
 80008ec:	000c      	movs	r4, r1
 80008ee:	1e63      	subs	r3, r4, #1
 80008f0:	419c      	sbcs	r4, r3
 80008f2:	4643      	mov	r3, r8
 80008f4:	1b1c      	subs	r4, r3, r4
 80008f6:	45a0      	cmp	r8, r4
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	4649      	mov	r1, r9
 80008fc:	425b      	negs	r3, r3
 80008fe:	1acb      	subs	r3, r1, r3
 8000900:	469a      	mov	sl, r3
 8000902:	4665      	mov	r5, ip
 8000904:	0016      	movs	r6, r2
 8000906:	e61b      	b.n	8000540 <__aeabi_dadd+0x98>
 8000908:	000c      	movs	r4, r1
 800090a:	431c      	orrs	r4, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0c7      	b.n	8000aa0 <__aeabi_dadd+0x5f8>
 8000910:	1e7c      	subs	r4, r7, #1
 8000912:	2f01      	cmp	r7, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0f9      	b.n	8000b0c <__aeabi_dadd+0x664>
 8000918:	4e91      	ldr	r6, [pc, #580]	; (8000b60 <__aeabi_dadd+0x6b8>)
 800091a:	42b7      	cmp	r7, r6
 800091c:	d05c      	beq.n	80009d8 <__aeabi_dadd+0x530>
 800091e:	0027      	movs	r7, r4
 8000920:	e740      	b.n	80007a4 <__aeabi_dadd+0x2fc>
 8000922:	2220      	movs	r2, #32
 8000924:	464c      	mov	r4, r9
 8000926:	4640      	mov	r0, r8
 8000928:	1bd2      	subs	r2, r2, r7
 800092a:	4094      	lsls	r4, r2
 800092c:	40f8      	lsrs	r0, r7
 800092e:	4304      	orrs	r4, r0
 8000930:	4640      	mov	r0, r8
 8000932:	4090      	lsls	r0, r2
 8000934:	1e42      	subs	r2, r0, #1
 8000936:	4190      	sbcs	r0, r2
 8000938:	464a      	mov	r2, r9
 800093a:	40fa      	lsrs	r2, r7
 800093c:	4304      	orrs	r4, r0
 800093e:	1889      	adds	r1, r1, r2
 8000940:	e6ee      	b.n	8000720 <__aeabi_dadd+0x278>
 8000942:	4c87      	ldr	r4, [pc, #540]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000944:	42a2      	cmp	r2, r4
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x4a2>
 8000948:	e6f9      	b.n	800073e <__aeabi_dadd+0x296>
 800094a:	1818      	adds	r0, r3, r0
 800094c:	4298      	cmp	r0, r3
 800094e:	419b      	sbcs	r3, r3
 8000950:	4449      	add	r1, r9
 8000952:	425b      	negs	r3, r3
 8000954:	18cb      	adds	r3, r1, r3
 8000956:	07dc      	lsls	r4, r3, #31
 8000958:	0840      	lsrs	r0, r0, #1
 800095a:	085b      	lsrs	r3, r3, #1
 800095c:	469a      	mov	sl, r3
 800095e:	0016      	movs	r6, r2
 8000960:	4304      	orrs	r4, r0
 8000962:	e6c6      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000964:	4642      	mov	r2, r8
 8000966:	1ad4      	subs	r4, r2, r3
 8000968:	45a0      	cmp	r8, r4
 800096a:	4180      	sbcs	r0, r0
 800096c:	464b      	mov	r3, r9
 800096e:	4240      	negs	r0, r0
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	1a0b      	subs	r3, r1, r0
 8000974:	469a      	mov	sl, r3
 8000976:	4665      	mov	r5, ip
 8000978:	e5ea      	b.n	8000550 <__aeabi_dadd+0xa8>
 800097a:	464b      	mov	r3, r9
 800097c:	464a      	mov	r2, r9
 800097e:	08c0      	lsrs	r0, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	4665      	mov	r5, ip
 8000984:	4303      	orrs	r3, r0
 8000986:	08d1      	lsrs	r1, r2, #3
 8000988:	e6bd      	b.n	8000706 <__aeabi_dadd+0x25e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_dadd+0x4e8>
 800098e:	e08e      	b.n	8000aae <__aeabi_dadd+0x606>
 8000990:	464b      	mov	r3, r9
 8000992:	4303      	orrs	r3, r0
 8000994:	d117      	bne.n	80009c6 <__aeabi_dadd+0x51e>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2500      	movs	r5, #0
 800099a:	0309      	lsls	r1, r1, #12
 800099c:	e6da      	b.n	8000754 <__aeabi_dadd+0x2ac>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	e6d1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009a8:	1a1c      	subs	r4, r3, r0
 80009aa:	464a      	mov	r2, r9
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	419b      	sbcs	r3, r3
 80009b0:	1a89      	subs	r1, r1, r2
 80009b2:	425b      	negs	r3, r3
 80009b4:	1acb      	subs	r3, r1, r3
 80009b6:	469a      	mov	sl, r3
 80009b8:	2601      	movs	r6, #1
 80009ba:	e5c1      	b.n	8000540 <__aeabi_dadd+0x98>
 80009bc:	074a      	lsls	r2, r1, #29
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	e69f      	b.n	8000706 <__aeabi_dadd+0x25e>
 80009c6:	4643      	mov	r3, r8
 80009c8:	08d8      	lsrs	r0, r3, #3
 80009ca:	464b      	mov	r3, r9
 80009cc:	464a      	mov	r2, r9
 80009ce:	075b      	lsls	r3, r3, #29
 80009d0:	4665      	mov	r5, ip
 80009d2:	4303      	orrs	r3, r0
 80009d4:	08d1      	lsrs	r1, r2, #3
 80009d6:	e6b9      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009d8:	4643      	mov	r3, r8
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	464b      	mov	r3, r9
 80009de:	464a      	mov	r2, r9
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e6b1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009e8:	4319      	orrs	r1, r3
 80009ea:	000c      	movs	r4, r1
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	e6eb      	b.n	80007ca <__aeabi_dadd+0x322>
 80009f2:	003c      	movs	r4, r7
 80009f4:	000d      	movs	r5, r1
 80009f6:	3c20      	subs	r4, #32
 80009f8:	40e5      	lsrs	r5, r4
 80009fa:	2f20      	cmp	r7, #32
 80009fc:	d003      	beq.n	8000a06 <__aeabi_dadd+0x55e>
 80009fe:	2440      	movs	r4, #64	; 0x40
 8000a00:	1be4      	subs	r4, r4, r7
 8000a02:	40a1      	lsls	r1, r4
 8000a04:	430b      	orrs	r3, r1
 8000a06:	001c      	movs	r4, r3
 8000a08:	1e63      	subs	r3, r4, #1
 8000a0a:	419c      	sbcs	r4, r3
 8000a0c:	432c      	orrs	r4, r5
 8000a0e:	e770      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d0e1      	beq.n	80009d8 <__aeabi_dadd+0x530>
 8000a14:	464a      	mov	r2, r9
 8000a16:	4302      	orrs	r2, r0
 8000a18:	d0c1      	beq.n	800099e <__aeabi_dadd+0x4f6>
 8000a1a:	074a      	lsls	r2, r1, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	0312      	lsls	r2, r2, #12
 8000a26:	4211      	tst	r1, r2
 8000a28:	d008      	beq.n	8000a3c <__aeabi_dadd+0x594>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	08c4      	lsrs	r4, r0, #3
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d104      	bne.n	8000a3c <__aeabi_dadd+0x594>
 8000a32:	4643      	mov	r3, r8
 8000a34:	0021      	movs	r1, r4
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	0f5a      	lsrs	r2, r3, #29
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	e681      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x5a8>
 8000a4e:	e714      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000a50:	464b      	mov	r3, r9
 8000a52:	464a      	mov	r2, r9
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	075b      	lsls	r3, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	08d1      	lsrs	r1, r2, #3
 8000a5e:	e655      	b.n	800070c <__aeabi_dadd+0x264>
 8000a60:	1ac4      	subs	r4, r0, r3
 8000a62:	45a0      	cmp	r8, r4
 8000a64:	4180      	sbcs	r0, r0
 8000a66:	464b      	mov	r3, r9
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1a59      	subs	r1, r3, r1
 8000a6c:	1a0b      	subs	r3, r1, r0
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4665      	mov	r5, ip
 8000a72:	2601      	movs	r6, #1
 8000a74:	e564      	b.n	8000540 <__aeabi_dadd+0x98>
 8000a76:	1a1c      	subs	r4, r3, r0
 8000a78:	464a      	mov	r2, r9
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	1a8a      	subs	r2, r1, r2
 8000a80:	4240      	negs	r0, r0
 8000a82:	1a12      	subs	r2, r2, r0
 8000a84:	4692      	mov	sl, r2
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	d549      	bpl.n	8000b1e <__aeabi_dadd+0x676>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	1ad4      	subs	r4, r2, r3
 8000a8e:	45a0      	cmp	r8, r4
 8000a90:	4180      	sbcs	r0, r0
 8000a92:	464b      	mov	r3, r9
 8000a94:	4240      	negs	r0, r0
 8000a96:	1a59      	subs	r1, r3, r1
 8000a98:	1a0b      	subs	r3, r1, r0
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	e57f      	b.n	80005a0 <__aeabi_dadd+0xf8>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	08c0      	lsrs	r0, r0, #3
 8000aa6:	075b      	lsls	r3, r3, #29
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	08d1      	lsrs	r1, r2, #3
 8000aac:	e62b      	b.n	8000706 <__aeabi_dadd+0x25e>
 8000aae:	464a      	mov	r2, r9
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	d138      	bne.n	8000b28 <__aeabi_dadd+0x680>
 8000ab6:	074a      	lsls	r2, r1, #29
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	e646      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4303      	orrs	r3, r0
 8000ac8:	08d1      	lsrs	r1, r2, #3
 8000aca:	e61f      	b.n	800070c <__aeabi_dadd+0x264>
 8000acc:	181c      	adds	r4, r3, r0
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	419b      	sbcs	r3, r3
 8000ad2:	4449      	add	r1, r9
 8000ad4:	468a      	mov	sl, r1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	449a      	add	sl, r3
 8000ada:	4653      	mov	r3, sl
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e607      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <__aeabi_dadd+0x6bc>)
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	e601      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aee:	003c      	movs	r4, r7
 8000af0:	000e      	movs	r6, r1
 8000af2:	3c20      	subs	r4, #32
 8000af4:	40e6      	lsrs	r6, r4
 8000af6:	2f20      	cmp	r7, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x65a>
 8000afa:	2440      	movs	r4, #64	; 0x40
 8000afc:	1be4      	subs	r4, r4, r7
 8000afe:	40a1      	lsls	r1, r4
 8000b00:	430b      	orrs	r3, r1
 8000b02:	001c      	movs	r4, r3
 8000b04:	1e63      	subs	r3, r4, #1
 8000b06:	419c      	sbcs	r4, r3
 8000b08:	4334      	orrs	r4, r6
 8000b0a:	e65e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000b0c:	4443      	add	r3, r8
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	4449      	add	r1, r9
 8000b14:	468a      	mov	sl, r1
 8000b16:	4240      	negs	r0, r0
 8000b18:	001c      	movs	r4, r3
 8000b1a:	4482      	add	sl, r0
 8000b1c:	e6bc      	b.n	8000898 <__aeabi_dadd+0x3f0>
 8000b1e:	4653      	mov	r3, sl
 8000b20:	4323      	orrs	r3, r4
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x67e>
 8000b24:	e6a9      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000b26:	e5e4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000b28:	074a      	lsls	r2, r1, #29
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	0312      	lsls	r2, r2, #12
 8000b32:	4211      	tst	r1, r2
 8000b34:	d009      	beq.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b36:	4648      	mov	r0, r9
 8000b38:	08c4      	lsrs	r4, r0, #3
 8000b3a:	4214      	tst	r4, r2
 8000b3c:	d105      	bne.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	4665      	mov	r5, ip
 8000b42:	0021      	movs	r1, r4
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	0742      	lsls	r2, r0, #29
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	0f5a      	lsrs	r2, r3, #29
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	4313      	orrs	r3, r2
 8000b54:	e5fa      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a01      	ldr	r2, [pc, #4]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	e540      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	4657      	mov	r7, sl
 8000b6c:	464e      	mov	r6, r9
 8000b6e:	4645      	mov	r5, r8
 8000b70:	46de      	mov	lr, fp
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	001f      	movs	r7, r3
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	4681      	mov	r9, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0005      	movs	r5, r0
 8000b80:	b085      	sub	sp, #20
 8000b82:	0b24      	lsrs	r4, r4, #12
 8000b84:	0d5b      	lsrs	r3, r3, #21
 8000b86:	0fce      	lsrs	r6, r1, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x26>
 8000b8c:	e152      	b.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000b8e:	4ad2      	ldr	r2, [pc, #840]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <__aeabi_ddiv+0x2e>
 8000b94:	e16e      	b.n	8000e74 <__aeabi_ddiv+0x30c>
 8000b96:	0f42      	lsrs	r2, r0, #29
 8000b98:	00e4      	lsls	r4, r4, #3
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	0412      	lsls	r2, r2, #16
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	4acd      	ldr	r2, [pc, #820]	; (8000edc <__aeabi_ddiv+0x374>)
 8000ba6:	00c5      	lsls	r5, r0, #3
 8000ba8:	4693      	mov	fp, r2
 8000baa:	449b      	add	fp, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	033c      	lsls	r4, r7, #12
 8000bb4:	007b      	lsls	r3, r7, #1
 8000bb6:	4650      	mov	r0, sl
 8000bb8:	0b24      	lsrs	r4, r4, #12
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	0fff      	lsrs	r7, r7, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x5c>
 8000bc2:	e11a      	b.n	8000dfa <__aeabi_ddiv+0x292>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x64>
 8000bca:	e15e      	b.n	8000e8a <__aeabi_ddiv+0x322>
 8000bcc:	0f42      	lsrs	r2, r0, #29
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	4322      	orrs	r2, r4
 8000bd2:	2480      	movs	r4, #128	; 0x80
 8000bd4:	0424      	lsls	r4, r4, #16
 8000bd6:	4314      	orrs	r4, r2
 8000bd8:	4ac0      	ldr	r2, [pc, #768]	; (8000edc <__aeabi_ddiv+0x374>)
 8000bda:	00c1      	lsls	r1, r0, #3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	465a      	mov	r2, fp
 8000be0:	4463      	add	r3, ip
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	469b      	mov	fp, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	0033      	movs	r3, r6
 8000bea:	407b      	eors	r3, r7
 8000bec:	469a      	mov	sl, r3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d827      	bhi.n	8000c44 <__aeabi_ddiv+0xdc>
 8000bf4:	4aba      	ldr	r2, [pc, #744]	; (8000ee0 <__aeabi_ddiv+0x378>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	469f      	mov	pc, r3
 8000bfc:	46b2      	mov	sl, r6
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d016      	beq.n	8000c32 <__aeabi_ddiv+0xca>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0xa2>
 8000c08:	e287      	b.n	800111a <__aeabi_ddiv+0x5b2>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c0e:	e0d5      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	2500      	movs	r5, #0
 8000c16:	051b      	lsls	r3, r3, #20
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	0028      	movs	r0, r5
 8000c22:	0019      	movs	r1, r3
 8000c24:	b005      	add	sp, #20
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	46bb      	mov	fp, r7
 8000c2a:	46b2      	mov	sl, r6
 8000c2c:	46a9      	mov	r9, r5
 8000c2e:	46a0      	mov	r8, r4
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c32:	2200      	movs	r2, #0
 8000c34:	2500      	movs	r5, #0
 8000c36:	4ba8      	ldr	r3, [pc, #672]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000c38:	e7ed      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	000d      	movs	r5, r1
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	e7dc      	b.n	8000bfe <__aeabi_ddiv+0x96>
 8000c44:	4544      	cmp	r4, r8
 8000c46:	d200      	bcs.n	8000c4a <__aeabi_ddiv+0xe2>
 8000c48:	e1c4      	b.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xe6>
 8000c4c:	e1bf      	b.n	8000fce <__aeabi_ddiv+0x466>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	469c      	mov	ip, r3
 8000c54:	002e      	movs	r6, r5
 8000c56:	4640      	mov	r0, r8
 8000c58:	2500      	movs	r5, #0
 8000c5a:	44e3      	add	fp, ip
 8000c5c:	0223      	lsls	r3, r4, #8
 8000c5e:	0e0c      	lsrs	r4, r1, #24
 8000c60:	431c      	orrs	r4, r3
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	4699      	mov	r9, r3
 8000c66:	0423      	lsls	r3, r4, #16
 8000c68:	020a      	lsls	r2, r1, #8
 8000c6a:	0c1f      	lsrs	r7, r3, #16
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9701      	str	r7, [sp, #4]
 8000c72:	f7ff faeb 	bl	800024c <__aeabi_uidivmod>
 8000c76:	0002      	movs	r2, r0
 8000c78:	437a      	muls	r2, r7
 8000c7a:	040b      	lsls	r3, r1, #16
 8000c7c:	0c31      	lsrs	r1, r6, #16
 8000c7e:	4680      	mov	r8, r0
 8000c80:	4319      	orrs	r1, r3
 8000c82:	428a      	cmp	r2, r1
 8000c84:	d907      	bls.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	1909      	adds	r1, r1, r4
 8000c8e:	44e0      	add	r8, ip
 8000c90:	428c      	cmp	r4, r1
 8000c92:	d800      	bhi.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c94:	e201      	b.n	800109a <__aeabi_ddiv+0x532>
 8000c96:	1a88      	subs	r0, r1, r2
 8000c98:	4649      	mov	r1, r9
 8000c9a:	f7ff fad7 	bl	800024c <__aeabi_uidivmod>
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	0003      	movs	r3, r0
 8000caa:	430e      	orrs	r6, r1
 8000cac:	42b2      	cmp	r2, r6
 8000cae:	d904      	bls.n	8000cba <__aeabi_ddiv+0x152>
 8000cb0:	1936      	adds	r6, r6, r4
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d800      	bhi.n	8000cba <__aeabi_ddiv+0x152>
 8000cb8:	e1e9      	b.n	800108e <__aeabi_ddiv+0x526>
 8000cba:	1ab0      	subs	r0, r6, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	9e00      	ldr	r6, [sp, #0]
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	0c33      	lsrs	r3, r6, #16
 8000cc6:	001f      	movs	r7, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	4690      	mov	r8, r2
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	0413      	lsls	r3, r2, #16
 8000cd0:	0432      	lsls	r2, r6, #16
 8000cd2:	0c16      	lsrs	r6, r2, #16
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	435a      	muls	r2, r3
 8000cda:	9603      	str	r6, [sp, #12]
 8000cdc:	437b      	muls	r3, r7
 8000cde:	434e      	muls	r6, r1
 8000ce0:	4379      	muls	r1, r7
 8000ce2:	0c17      	lsrs	r7, r2, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	4463      	add	r3, ip
 8000cea:	429e      	cmp	r6, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x18e>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0276      	lsls	r6, r6, #9
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	4461      	add	r1, ip
 8000cf6:	0c1e      	lsrs	r6, r3, #16
 8000cf8:	1871      	adds	r1, r6, r1
 8000cfa:	0416      	lsls	r6, r2, #16
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	199e      	adds	r6, r3, r6
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1a4>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c0>
 8000d26:	e19e      	b.n	8001066 <__aeabi_ddiv+0x4fe>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1c4>
 8000d2a:	e199      	b.n	8001060 <__aeabi_ddiv+0x4f8>
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a40      	subs	r0, r0, r1
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1d8>
 8000d3e:	e1d2      	b.n	80010e6 <__aeabi_ddiv+0x57e>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa83 	bl	800024c <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f0>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4ca>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa76 	bl	800024c <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x20c>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4b4>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x23a>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1840      	adds	r0, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	4286      	cmp	r6, r0
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x24c>
 8000db2:	e100      	b.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x250>
 8000db6:	e0fb      	b.n	8000fb0 <__aeabi_ddiv+0x448>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x37c>)
 8000dbe:	445b      	add	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000dc6:	076a      	lsls	r2, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x264>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e0>
 8000dcc:	08e9      	lsrs	r1, r5, #3
 8000dce:	4642      	mov	r2, r8
 8000dd0:	01d2      	lsls	r2, r2, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x27a>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	4690      	mov	r8, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	445b      	add	r3, fp
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <__aeabi_ddiv+0x384>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e723      	b.n	8000c32 <__aeabi_ddiv+0xca>
 8000dea:	4642      	mov	r2, r8
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	0755      	lsls	r5, r2, #29
 8000df0:	0252      	lsls	r2, r2, #9
 8000df2:	430d      	orrs	r5, r1
 8000df4:	0b12      	lsrs	r2, r2, #12
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	e70d      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000dfa:	4651      	mov	r1, sl
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x29a>
 8000e00:	e07c      	b.n	8000efc <__aeabi_ddiv+0x394>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2a0>
 8000e06:	e0fb      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f001 f995 	bl	8002138 <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	3a0b      	subs	r2, #11
 8000e12:	231d      	movs	r3, #29
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4652      	mov	r2, sl
 8000e18:	0001      	movs	r1, r0
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	4653      	mov	r3, sl
 8000e1e:	3908      	subs	r1, #8
 8000e20:	408b      	lsls	r3, r1
 8000e22:	408c      	lsls	r4, r1
 8000e24:	0019      	movs	r1, r3
 8000e26:	4314      	orrs	r4, r2
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x388>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d9      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000e34:	0003      	movs	r3, r0
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x35e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2da>
 8000e40:	e0cf      	b.n	8000fe2 <__aeabi_ddiv+0x47a>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f978 	bl	8002138 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x38c>)
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69e      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e74:	0002      	movs	r2, r0
 8000e76:	4322      	orrs	r2, r4
 8000e78:	4690      	mov	r8, r2
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x350>
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2302      	movs	r3, #2
 8000e82:	2500      	movs	r5, #0
 8000e84:	4691      	mov	r9, r2
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e693      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	4321      	orrs	r1, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x33c>
 8000e90:	2302      	movs	r3, #2
 8000e92:	464a      	mov	r2, r9
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000e98:	4691      	mov	r9, r2
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e6a1      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4651      	mov	r1, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e697      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000eb8:	220c      	movs	r2, #12
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e675      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e66d      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	0800700c 	.word	0x0800700c
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4691      	mov	r9, r2
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66e      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b88      	ldr	r3, [pc, #544]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f14:	0312      	lsls	r2, r2, #12
 8000f16:	e67e      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	2a38      	cmp	r2, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3be>
 8000f24:	e674      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000f26:	2a1f      	cmp	r2, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3c4>
 8000f2a:	e0bd      	b.n	80010a8 <__aeabi_ddiv+0x540>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1acb      	subs	r3, r1, r3
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	000b      	movs	r3, r1
 8000f38:	2a20      	cmp	r2, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3de>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <__aeabi_ddiv+0x5d0>)
 8000f40:	445a      	add	r2, fp
 8000f42:	4091      	lsls	r1, r2
 8000f44:	430d      	orrs	r5, r1
 8000f46:	0029      	movs	r1, r5
 8000f48:	1e4a      	subs	r2, r1, #1
 8000f4a:	4191      	sbcs	r1, r2
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	2307      	movs	r3, #7
 8000f50:	001d      	movs	r5, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	400d      	ands	r5, r1
 8000f56:	420b      	tst	r3, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x3f4>
 8000f5a:	e0d0      	b.n	80010fe <__aeabi_ddiv+0x596>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	2300      	movs	r3, #0
 8000f60:	400a      	ands	r2, r1
 8000f62:	2a04      	cmp	r2, #4
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x400>
 8000f66:	e0c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f68:	1d0a      	adds	r2, r1, #4
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4189      	sbcs	r1, r1
 8000f6e:	4249      	negs	r1, r1
 8000f70:	185b      	adds	r3, r3, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	021a      	lsls	r2, r3, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_ddiv+0x412>
 8000f78:	e0be      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	e649      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	4643      	mov	r3, r8
 8000f86:	0312      	lsls	r2, r2, #12
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d008      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f8c:	4214      	tst	r4, r2
 8000f8e:	d106      	bne.n	8000f9e <__aeabi_ddiv+0x436>
 8000f90:	4322      	orrs	r2, r4
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	46ba      	mov	sl, r7
 8000f96:	000d      	movs	r5, r1
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f9a:	0b12      	lsrs	r2, r2, #12
 8000f9c:	e63b      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	46b2      	mov	sl, r6
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000fac:	0b12      	lsrs	r2, r2, #12
 8000fae:	e632      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000fb4:	e702      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000fb6:	19a6      	adds	r6, r4, r6
 8000fb8:	1e6a      	subs	r2, r5, #1
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x458>
 8000fbe:	e089      	b.n	80010d4 <__aeabi_ddiv+0x56c>
 8000fc0:	4286      	cmp	r6, r0
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fc4:	e09f      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x462>
 8000fc8:	e0af      	b.n	800112a <__aeabi_ddiv+0x5c2>
 8000fca:	0015      	movs	r5, r2
 8000fcc:	e6f4      	b.n	8000db8 <__aeabi_ddiv+0x250>
 8000fce:	42a9      	cmp	r1, r5
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000fd2:	e63c      	b.n	8000c4e <__aeabi_ddiv+0xe6>
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	07de      	lsls	r6, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	086b      	lsrs	r3, r5, #1
 8000fdc:	431e      	orrs	r6, r3
 8000fde:	07ed      	lsls	r5, r5, #31
 8000fe0:	e63c      	b.n	8000c5c <__aeabi_ddiv+0xf4>
 8000fe2:	f001 f8a9 	bl	8002138 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x48c>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2e6>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8001000:	f001 f89a 	bl	8002138 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4aa>
 8001010:	e6ff      	b.n	8000e12 <__aeabi_ddiv+0x2aa>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2100      	movs	r1, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c0>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4be>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4c4>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4d4>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4da>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001048:	220f      	movs	r2, #15
 800104a:	402a      	ands	r2, r5
 800104c:	2a04      	cmp	r2, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4ea>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x264>
 8001052:	1d29      	adds	r1, r5, #4
 8001054:	42a9      	cmp	r1, r5
 8001056:	41ad      	sbcs	r5, r5
 8001058:	426d      	negs	r5, r5
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	44a8      	add	r8, r5
 800105e:	e6b6      	b.n	8000dce <__aeabi_ddiv+0x266>
 8001060:	42af      	cmp	r7, r5
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x4fe>
 8001064:	e662      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001066:	4281      	cmp	r1, r0
 8001068:	d804      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x506>
 800106c:	e65e      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 800106e:	42ae      	cmp	r6, r5
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 8001072:	e65b      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	44e0      	add	r8, ip
 800107e:	469c      	mov	ip, r3
 8001080:	4465      	add	r5, ip
 8001082:	429d      	cmp	r5, r3
 8001084:	419b      	sbcs	r3, r3
 8001086:	425b      	negs	r3, r3
 8001088:	191b      	adds	r3, r3, r4
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	e64f      	b.n	8000d2e <__aeabi_ddiv+0x1c6>
 800108e:	42b2      	cmp	r2, r6
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x52c>
 8001092:	e612      	b.n	8000cba <__aeabi_ddiv+0x152>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1936      	adds	r6, r6, r4
 8001098:	e60f      	b.n	8000cba <__aeabi_ddiv+0x152>
 800109a:	428a      	cmp	r2, r1
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x538>
 800109e:	e5fa      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	4698      	mov	r8, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e5f6      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <__aeabi_ddiv+0x5d4>)
 80010aa:	0028      	movs	r0, r5
 80010ac:	445b      	add	r3, fp
 80010ae:	4641      	mov	r1, r8
 80010b0:	409d      	lsls	r5, r3
 80010b2:	4099      	lsls	r1, r3
 80010b4:	40d0      	lsrs	r0, r2
 80010b6:	1e6b      	subs	r3, r5, #1
 80010b8:	419d      	sbcs	r5, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	4301      	orrs	r1, r0
 80010be:	4329      	orrs	r1, r5
 80010c0:	40d3      	lsrs	r3, r2
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x560>
 80010c6:	e755      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010c8:	220f      	movs	r2, #15
 80010ca:	400a      	ands	r2, r1
 80010cc:	2a04      	cmp	r2, #4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x56a>
 80010d0:	e74a      	b.n	8000f68 <__aeabi_ddiv+0x400>
 80010d2:	e74f      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010d4:	0015      	movs	r5, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x574>
 80010da:	e66d      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0x57c>
 80010e2:	e669      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010e4:	e66a      	b.n	8000dbc <__aeabi_ddiv+0x254>
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <__aeabi_ddiv+0x5d8>)
 80010e8:	445b      	add	r3, fp
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x588>
 80010ee:	e713      	b.n	8000f18 <__aeabi_ddiv+0x3b0>
 80010f0:	2501      	movs	r5, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	44a8      	add	r8, r5
 80010f6:	e66a      	b.n	8000dce <__aeabi_ddiv+0x266>
 80010f8:	075d      	lsls	r5, r3, #29
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	0b1a      	lsrs	r2, r3, #12
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	2300      	movs	r3, #0
 8001102:	430d      	orrs	r5, r1
 8001104:	e587      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8001106:	9900      	ldr	r1, [sp, #0]
 8001108:	3d02      	subs	r5, #2
 800110a:	004a      	lsls	r2, r1, #1
 800110c:	428a      	cmp	r2, r1
 800110e:	41bf      	sbcs	r7, r7
 8001110:	427f      	negs	r7, r7
 8001112:	193f      	adds	r7, r7, r4
 8001114:	19f6      	adds	r6, r6, r7
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	e7dd      	b.n	80010d6 <__aeabi_ddiv+0x56e>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	4643      	mov	r3, r8
 800111e:	0312      	lsls	r2, r2, #12
 8001120:	431a      	orrs	r2, r3
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8001126:	0b12      	lsrs	r2, r2, #12
 8001128:	e575      	b.n	8000c16 <__aeabi_ddiv+0xae>
 800112a:	9900      	ldr	r1, [sp, #0]
 800112c:	4299      	cmp	r1, r3
 800112e:	d3ea      	bcc.n	8001106 <__aeabi_ddiv+0x59e>
 8001130:	0015      	movs	r5, r2
 8001132:	e7d3      	b.n	80010dc <__aeabi_ddiv+0x574>
 8001134:	000007ff 	.word	0x000007ff
 8001138:	0000043e 	.word	0x0000043e
 800113c:	0000041e 	.word	0x0000041e
 8001140:	000003ff 	.word	0x000003ff

08001144 <__eqdf2>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	46de      	mov	lr, fp
 800114c:	4657      	mov	r7, sl
 800114e:	4690      	mov	r8, r2
 8001150:	b5e0      	push	{r5, r6, r7, lr}
 8001152:	0017      	movs	r7, r2
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	0b12      	lsrs	r2, r2, #12
 8001158:	0005      	movs	r5, r0
 800115a:	4684      	mov	ip, r0
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <__eqdf2+0x80>)
 800115e:	030e      	lsls	r6, r1, #12
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	4691      	mov	r9, r2
 8001164:	005a      	lsls	r2, r3, #1
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	469b      	mov	fp, r3
 800116a:	0b36      	lsrs	r6, r6, #12
 800116c:	0d64      	lsrs	r4, r4, #21
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	0d52      	lsrs	r2, r2, #21
 8001172:	4284      	cmp	r4, r0
 8001174:	d019      	beq.n	80011aa <__eqdf2+0x66>
 8001176:	4282      	cmp	r2, r0
 8001178:	d010      	beq.n	800119c <__eqdf2+0x58>
 800117a:	2001      	movs	r0, #1
 800117c:	4294      	cmp	r4, r2
 800117e:	d10e      	bne.n	800119e <__eqdf2+0x5a>
 8001180:	454e      	cmp	r6, r9
 8001182:	d10c      	bne.n	800119e <__eqdf2+0x5a>
 8001184:	2001      	movs	r0, #1
 8001186:	45c4      	cmp	ip, r8
 8001188:	d109      	bne.n	800119e <__eqdf2+0x5a>
 800118a:	4559      	cmp	r1, fp
 800118c:	d017      	beq.n	80011be <__eqdf2+0x7a>
 800118e:	2c00      	cmp	r4, #0
 8001190:	d105      	bne.n	800119e <__eqdf2+0x5a>
 8001192:	0030      	movs	r0, r6
 8001194:	4328      	orrs	r0, r5
 8001196:	1e43      	subs	r3, r0, #1
 8001198:	4198      	sbcs	r0, r3
 800119a:	e000      	b.n	800119e <__eqdf2+0x5a>
 800119c:	2001      	movs	r0, #1
 800119e:	bcf0      	pop	{r4, r5, r6, r7}
 80011a0:	46bb      	mov	fp, r7
 80011a2:	46b2      	mov	sl, r6
 80011a4:	46a9      	mov	r9, r5
 80011a6:	46a0      	mov	r8, r4
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	0033      	movs	r3, r6
 80011ac:	2001      	movs	r0, #1
 80011ae:	432b      	orrs	r3, r5
 80011b0:	d1f5      	bne.n	800119e <__eqdf2+0x5a>
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d1f3      	bne.n	800119e <__eqdf2+0x5a>
 80011b6:	464b      	mov	r3, r9
 80011b8:	433b      	orrs	r3, r7
 80011ba:	d1f0      	bne.n	800119e <__eqdf2+0x5a>
 80011bc:	e7e2      	b.n	8001184 <__eqdf2+0x40>
 80011be:	2000      	movs	r0, #0
 80011c0:	e7ed      	b.n	800119e <__eqdf2+0x5a>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	0016      	movs	r6, r2
 80011d4:	031b      	lsls	r3, r3, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	4d2d      	ldr	r5, [pc, #180]	; (8001290 <__gedf2+0xc8>)
 80011da:	004a      	lsls	r2, r1, #1
 80011dc:	4699      	mov	r9, r3
 80011de:	b580      	push	{r7, lr}
 80011e0:	0043      	lsls	r3, r0, #1
 80011e2:	030f      	lsls	r7, r1, #12
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d021      	beq.n	800123a <__gedf2+0x72>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d013      	beq.n	8001222 <__gedf2+0x5a>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d122      	bne.n	8001244 <__gedf2+0x7c>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <__gedf2+0x42>
 8001204:	464d      	mov	r5, r9
 8001206:	432e      	orrs	r6, r5
 8001208:	d022      	beq.n	8001250 <__gedf2+0x88>
 800120a:	2c00      	cmp	r4, #0
 800120c:	d010      	beq.n	8001230 <__gedf2+0x68>
 800120e:	4281      	cmp	r1, r0
 8001210:	d022      	beq.n	8001258 <__gedf2+0x90>
 8001212:	2002      	movs	r0, #2
 8001214:	3901      	subs	r1, #1
 8001216:	4008      	ands	r0, r1
 8001218:	3801      	subs	r0, #1
 800121a:	bcc0      	pop	{r6, r7}
 800121c:	46b9      	mov	r9, r7
 800121e:	46b0      	mov	r8, r6
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	464d      	mov	r5, r9
 8001224:	432e      	orrs	r6, r5
 8001226:	d129      	bne.n	800127c <__gedf2+0xb4>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d1f0      	bne.n	800120e <__gedf2+0x46>
 800122c:	433c      	orrs	r4, r7
 800122e:	d1ee      	bne.n	800120e <__gedf2+0x46>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f2      	bne.n	800121a <__gedf2+0x52>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7ef      	b.n	800121a <__gedf2+0x52>
 800123a:	003d      	movs	r5, r7
 800123c:	4325      	orrs	r5, r4
 800123e:	d11d      	bne.n	800127c <__gedf2+0xb4>
 8001240:	4293      	cmp	r3, r2
 8001242:	d0ee      	beq.n	8001222 <__gedf2+0x5a>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e2      	bne.n	800120e <__gedf2+0x46>
 8001248:	464c      	mov	r4, r9
 800124a:	4326      	orrs	r6, r4
 800124c:	d1df      	bne.n	800120e <__gedf2+0x46>
 800124e:	e7e0      	b.n	8001212 <__gedf2+0x4a>
 8001250:	2000      	movs	r0, #0
 8001252:	2c00      	cmp	r4, #0
 8001254:	d0e1      	beq.n	800121a <__gedf2+0x52>
 8001256:	e7dc      	b.n	8001212 <__gedf2+0x4a>
 8001258:	429a      	cmp	r2, r3
 800125a:	dc0a      	bgt.n	8001272 <__gedf2+0xaa>
 800125c:	dbe8      	blt.n	8001230 <__gedf2+0x68>
 800125e:	454f      	cmp	r7, r9
 8001260:	d8d7      	bhi.n	8001212 <__gedf2+0x4a>
 8001262:	d00e      	beq.n	8001282 <__gedf2+0xba>
 8001264:	2000      	movs	r0, #0
 8001266:	454f      	cmp	r7, r9
 8001268:	d2d7      	bcs.n	800121a <__gedf2+0x52>
 800126a:	2900      	cmp	r1, #0
 800126c:	d0e2      	beq.n	8001234 <__gedf2+0x6c>
 800126e:	0008      	movs	r0, r1
 8001270:	e7d3      	b.n	800121a <__gedf2+0x52>
 8001272:	4243      	negs	r3, r0
 8001274:	4158      	adcs	r0, r3
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	3801      	subs	r0, #1
 800127a:	e7ce      	b.n	800121a <__gedf2+0x52>
 800127c:	2002      	movs	r0, #2
 800127e:	4240      	negs	r0, r0
 8001280:	e7cb      	b.n	800121a <__gedf2+0x52>
 8001282:	45c4      	cmp	ip, r8
 8001284:	d8c5      	bhi.n	8001212 <__gedf2+0x4a>
 8001286:	2000      	movs	r0, #0
 8001288:	45c4      	cmp	ip, r8
 800128a:	d2c6      	bcs.n	800121a <__gedf2+0x52>
 800128c:	e7ed      	b.n	800126a <__gedf2+0xa2>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff

08001294 <__ledf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4647      	mov	r7, r8
 8001298:	46ce      	mov	lr, r9
 800129a:	0004      	movs	r4, r0
 800129c:	0018      	movs	r0, r3
 800129e:	0016      	movs	r6, r2
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	4d2c      	ldr	r5, [pc, #176]	; (8001358 <__ledf2+0xc4>)
 80012a6:	004a      	lsls	r2, r1, #1
 80012a8:	4699      	mov	r9, r3
 80012aa:	b580      	push	{r7, lr}
 80012ac:	0043      	lsls	r3, r0, #1
 80012ae:	030f      	lsls	r7, r1, #12
 80012b0:	46a4      	mov	ip, r4
 80012b2:	46b0      	mov	r8, r6
 80012b4:	0b3f      	lsrs	r7, r7, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0fc9      	lsrs	r1, r1, #31
 80012ba:	0d5b      	lsrs	r3, r3, #21
 80012bc:	0fc0      	lsrs	r0, r0, #31
 80012be:	42aa      	cmp	r2, r5
 80012c0:	d00d      	beq.n	80012de <__ledf2+0x4a>
 80012c2:	42ab      	cmp	r3, r5
 80012c4:	d010      	beq.n	80012e8 <__ledf2+0x54>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d127      	bne.n	800131a <__ledf2+0x86>
 80012ca:	433c      	orrs	r4, r7
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <__ledf2+0x60>
 80012d0:	464d      	mov	r5, r9
 80012d2:	432e      	orrs	r6, r5
 80012d4:	d10e      	bne.n	80012f4 <__ledf2+0x60>
 80012d6:	2000      	movs	r0, #0
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d015      	beq.n	8001308 <__ledf2+0x74>
 80012dc:	e00e      	b.n	80012fc <__ledf2+0x68>
 80012de:	003d      	movs	r5, r7
 80012e0:	4325      	orrs	r5, r4
 80012e2:	d110      	bne.n	8001306 <__ledf2+0x72>
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <__ledf2+0x86>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d10b      	bne.n	8001306 <__ledf2+0x72>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d102      	bne.n	80012f8 <__ledf2+0x64>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d00b      	beq.n	8001310 <__ledf2+0x7c>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d014      	beq.n	8001326 <__ledf2+0x92>
 80012fc:	2002      	movs	r0, #2
 80012fe:	3901      	subs	r1, #1
 8001300:	4008      	ands	r0, r1
 8001302:	3801      	subs	r0, #1
 8001304:	e000      	b.n	8001308 <__ledf2+0x74>
 8001306:	2002      	movs	r0, #2
 8001308:	bcc0      	pop	{r6, r7}
 800130a:	46b9      	mov	r9, r7
 800130c:	46b0      	mov	r8, r6
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f9      	bne.n	8001308 <__ledf2+0x74>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7f6      	b.n	8001308 <__ledf2+0x74>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ec      	bne.n	80012f8 <__ledf2+0x64>
 800131e:	464c      	mov	r4, r9
 8001320:	4326      	orrs	r6, r4
 8001322:	d1e9      	bne.n	80012f8 <__ledf2+0x64>
 8001324:	e7ea      	b.n	80012fc <__ledf2+0x68>
 8001326:	429a      	cmp	r2, r3
 8001328:	dd04      	ble.n	8001334 <__ledf2+0xa0>
 800132a:	4243      	negs	r3, r0
 800132c:	4158      	adcs	r0, r3
 800132e:	0040      	lsls	r0, r0, #1
 8001330:	3801      	subs	r0, #1
 8001332:	e7e9      	b.n	8001308 <__ledf2+0x74>
 8001334:	429a      	cmp	r2, r3
 8001336:	dbeb      	blt.n	8001310 <__ledf2+0x7c>
 8001338:	454f      	cmp	r7, r9
 800133a:	d8df      	bhi.n	80012fc <__ledf2+0x68>
 800133c:	d006      	beq.n	800134c <__ledf2+0xb8>
 800133e:	2000      	movs	r0, #0
 8001340:	454f      	cmp	r7, r9
 8001342:	d2e1      	bcs.n	8001308 <__ledf2+0x74>
 8001344:	2900      	cmp	r1, #0
 8001346:	d0e5      	beq.n	8001314 <__ledf2+0x80>
 8001348:	0008      	movs	r0, r1
 800134a:	e7dd      	b.n	8001308 <__ledf2+0x74>
 800134c:	45c4      	cmp	ip, r8
 800134e:	d8d5      	bhi.n	80012fc <__ledf2+0x68>
 8001350:	2000      	movs	r0, #0
 8001352:	45c4      	cmp	ip, r8
 8001354:	d2d8      	bcs.n	8001308 <__ledf2+0x74>
 8001356:	e7f5      	b.n	8001344 <__ledf2+0xb0>
 8001358:	000007ff 	.word	0x000007ff

0800135c <__aeabi_dmul>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	4645      	mov	r5, r8
 8001360:	46de      	mov	lr, fp
 8001362:	4657      	mov	r7, sl
 8001364:	464e      	mov	r6, r9
 8001366:	b5e0      	push	{r5, r6, r7, lr}
 8001368:	001f      	movs	r7, r3
 800136a:	030b      	lsls	r3, r1, #12
 800136c:	0b1b      	lsrs	r3, r3, #12
 800136e:	469b      	mov	fp, r3
 8001370:	004d      	lsls	r5, r1, #1
 8001372:	0fcb      	lsrs	r3, r1, #31
 8001374:	0004      	movs	r4, r0
 8001376:	4691      	mov	r9, r2
 8001378:	4698      	mov	r8, r3
 800137a:	b087      	sub	sp, #28
 800137c:	0d6d      	lsrs	r5, r5, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x26>
 8001380:	e1cd      	b.n	800171e <__aeabi_dmul+0x3c2>
 8001382:	4bce      	ldr	r3, [pc, #824]	; (80016bc <__aeabi_dmul+0x360>)
 8001384:	429d      	cmp	r5, r3
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x2e>
 8001388:	e1e9      	b.n	800175e <__aeabi_dmul+0x402>
 800138a:	465a      	mov	r2, fp
 800138c:	0f43      	lsrs	r3, r0, #29
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0412      	lsls	r2, r2, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	00c3      	lsls	r3, r0, #3
 800139a:	469a      	mov	sl, r3
 800139c:	4bc8      	ldr	r3, [pc, #800]	; (80016c0 <__aeabi_dmul+0x364>)
 800139e:	4693      	mov	fp, r2
 80013a0:	469c      	mov	ip, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	2600      	movs	r6, #0
 80013a6:	4465      	add	r5, ip
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	033c      	lsls	r4, r7, #12
 80013ac:	007b      	lsls	r3, r7, #1
 80013ae:	4648      	mov	r0, r9
 80013b0:	0b24      	lsrs	r4, r4, #12
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fff      	lsrs	r7, r7, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x60>
 80013ba:	e189      	b.n	80016d0 <__aeabi_dmul+0x374>
 80013bc:	4abf      	ldr	r2, [pc, #764]	; (80016bc <__aeabi_dmul+0x360>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <__aeabi_dmul+0x9a>
 80013c2:	0f42      	lsrs	r2, r0, #29
 80013c4:	00e4      	lsls	r4, r4, #3
 80013c6:	4322      	orrs	r2, r4
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	0424      	lsls	r4, r4, #16
 80013cc:	4314      	orrs	r4, r2
 80013ce:	4abc      	ldr	r2, [pc, #752]	; (80016c0 <__aeabi_dmul+0x364>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4694      	mov	ip, r2
 80013d4:	4642      	mov	r2, r8
 80013d6:	4463      	add	r3, ip
 80013d8:	195b      	adds	r3, r3, r5
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	407a      	eors	r2, r7
 80013e0:	3301      	adds	r3, #1
 80013e2:	00c0      	lsls	r0, r0, #3
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2e0a      	cmp	r6, #10
 80013ea:	dd1c      	ble.n	8001426 <__aeabi_dmul+0xca>
 80013ec:	003a      	movs	r2, r7
 80013ee:	2e0b      	cmp	r6, #11
 80013f0:	d05e      	beq.n	80014b0 <__aeabi_dmul+0x154>
 80013f2:	4647      	mov	r7, r8
 80013f4:	e056      	b.n	80014a4 <__aeabi_dmul+0x148>
 80013f6:	4649      	mov	r1, r9
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <__aeabi_dmul+0x360>)
 80013fa:	4321      	orrs	r1, r4
 80013fc:	18eb      	adds	r3, r5, r3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2900      	cmp	r1, #0
 8001402:	d12a      	bne.n	800145a <__aeabi_dmul+0xfe>
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	2202      	movs	r2, #2
 8001408:	0100      	lsls	r0, r0, #4
 800140a:	002b      	movs	r3, r5
 800140c:	4684      	mov	ip, r0
 800140e:	4316      	orrs	r6, r2
 8001410:	4642      	mov	r2, r8
 8001412:	4463      	add	r3, ip
 8001414:	407a      	eors	r2, r7
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2e0a      	cmp	r6, #10
 800141c:	dd00      	ble.n	8001420 <__aeabi_dmul+0xc4>
 800141e:	e231      	b.n	8001884 <__aeabi_dmul+0x528>
 8001420:	2000      	movs	r0, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2102      	movs	r1, #2
 8001426:	2e02      	cmp	r6, #2
 8001428:	dc26      	bgt.n	8001478 <__aeabi_dmul+0x11c>
 800142a:	3e01      	subs	r6, #1
 800142c:	2e01      	cmp	r6, #1
 800142e:	d852      	bhi.n	80014d6 <__aeabi_dmul+0x17a>
 8001430:	2902      	cmp	r1, #2
 8001432:	d04c      	beq.n	80014ce <__aeabi_dmul+0x172>
 8001434:	2901      	cmp	r1, #1
 8001436:	d000      	beq.n	800143a <__aeabi_dmul+0xde>
 8001438:	e118      	b.n	800166c <__aeabi_dmul+0x310>
 800143a:	2300      	movs	r3, #0
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	051b      	lsls	r3, r3, #20
 8001442:	4323      	orrs	r3, r4
 8001444:	07d2      	lsls	r2, r2, #31
 8001446:	4313      	orrs	r3, r2
 8001448:	0028      	movs	r0, r5
 800144a:	0019      	movs	r1, r3
 800144c:	b007      	add	sp, #28
 800144e:	bcf0      	pop	{r4, r5, r6, r7}
 8001450:	46bb      	mov	fp, r7
 8001452:	46b2      	mov	sl, r6
 8001454:	46a9      	mov	r9, r5
 8001456:	46a0      	mov	r8, r4
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	2203      	movs	r2, #3
 800145e:	0109      	lsls	r1, r1, #4
 8001460:	002b      	movs	r3, r5
 8001462:	468c      	mov	ip, r1
 8001464:	4316      	orrs	r6, r2
 8001466:	4642      	mov	r2, r8
 8001468:	4463      	add	r3, ip
 800146a:	407a      	eors	r2, r7
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2e0a      	cmp	r6, #10
 8001472:	dd00      	ble.n	8001476 <__aeabi_dmul+0x11a>
 8001474:	e228      	b.n	80018c8 <__aeabi_dmul+0x56c>
 8001476:	2103      	movs	r1, #3
 8001478:	2501      	movs	r5, #1
 800147a:	40b5      	lsls	r5, r6
 800147c:	46ac      	mov	ip, r5
 800147e:	26a6      	movs	r6, #166	; 0xa6
 8001480:	4663      	mov	r3, ip
 8001482:	00f6      	lsls	r6, r6, #3
 8001484:	4035      	ands	r5, r6
 8001486:	4233      	tst	r3, r6
 8001488:	d10b      	bne.n	80014a2 <__aeabi_dmul+0x146>
 800148a:	2690      	movs	r6, #144	; 0x90
 800148c:	00b6      	lsls	r6, r6, #2
 800148e:	4233      	tst	r3, r6
 8001490:	d118      	bne.n	80014c4 <__aeabi_dmul+0x168>
 8001492:	3eb9      	subs	r6, #185	; 0xb9
 8001494:	3eff      	subs	r6, #255	; 0xff
 8001496:	421e      	tst	r6, r3
 8001498:	d01d      	beq.n	80014d6 <__aeabi_dmul+0x17a>
 800149a:	46a3      	mov	fp, r4
 800149c:	4682      	mov	sl, r0
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	e000      	b.n	80014a4 <__aeabi_dmul+0x148>
 80014a2:	0017      	movs	r7, r2
 80014a4:	9900      	ldr	r1, [sp, #0]
 80014a6:	003a      	movs	r2, r7
 80014a8:	2902      	cmp	r1, #2
 80014aa:	d010      	beq.n	80014ce <__aeabi_dmul+0x172>
 80014ac:	465c      	mov	r4, fp
 80014ae:	4650      	mov	r0, sl
 80014b0:	2903      	cmp	r1, #3
 80014b2:	d1bf      	bne.n	8001434 <__aeabi_dmul+0xd8>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	031b      	lsls	r3, r3, #12
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0324      	lsls	r4, r4, #12
 80014bc:	0005      	movs	r5, r0
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <__aeabi_dmul+0x360>)
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	e7bd      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014c4:	2480      	movs	r4, #128	; 0x80
 80014c6:	2200      	movs	r2, #0
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <__aeabi_dmul+0x360>)
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	e7b8      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <__aeabi_dmul+0x360>)
 80014d4:	e7b4      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014d6:	4653      	mov	r3, sl
 80014d8:	041e      	lsls	r6, r3, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0c1f      	lsrs	r7, r3, #16
 80014de:	0033      	movs	r3, r6
 80014e0:	0c01      	lsrs	r1, r0, #16
 80014e2:	0400      	lsls	r0, r0, #16
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4343      	muls	r3, r0
 80014e8:	4698      	mov	r8, r3
 80014ea:	0003      	movs	r3, r0
 80014ec:	437b      	muls	r3, r7
 80014ee:	4699      	mov	r9, r3
 80014f0:	0033      	movs	r3, r6
 80014f2:	434b      	muls	r3, r1
 80014f4:	469c      	mov	ip, r3
 80014f6:	4643      	mov	r3, r8
 80014f8:	000d      	movs	r5, r1
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	469a      	mov	sl, r3
 80014fe:	437d      	muls	r5, r7
 8001500:	44cc      	add	ip, r9
 8001502:	44d4      	add	ip, sl
 8001504:	9500      	str	r5, [sp, #0]
 8001506:	45e1      	cmp	r9, ip
 8001508:	d904      	bls.n	8001514 <__aeabi_dmul+0x1b8>
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4699      	mov	r9, r3
 8001510:	444d      	add	r5, r9
 8001512:	9500      	str	r5, [sp, #0]
 8001514:	4663      	mov	r3, ip
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	001d      	movs	r5, r3
 800151a:	4663      	mov	r3, ip
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	469c      	mov	ip, r3
 8001520:	4643      	mov	r3, r8
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	4698      	mov	r8, r3
 8001528:	4663      	mov	r3, ip
 800152a:	4443      	add	r3, r8
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	0c23      	lsrs	r3, r4, #16
 8001530:	4698      	mov	r8, r3
 8001532:	0033      	movs	r3, r6
 8001534:	0424      	lsls	r4, r4, #16
 8001536:	0c24      	lsrs	r4, r4, #16
 8001538:	4363      	muls	r3, r4
 800153a:	469c      	mov	ip, r3
 800153c:	0023      	movs	r3, r4
 800153e:	437b      	muls	r3, r7
 8001540:	4699      	mov	r9, r3
 8001542:	4643      	mov	r3, r8
 8001544:	435e      	muls	r6, r3
 8001546:	435f      	muls	r7, r3
 8001548:	444e      	add	r6, r9
 800154a:	4663      	mov	r3, ip
 800154c:	46b2      	mov	sl, r6
 800154e:	0c1e      	lsrs	r6, r3, #16
 8001550:	4456      	add	r6, sl
 8001552:	45b1      	cmp	r9, r6
 8001554:	d903      	bls.n	800155e <__aeabi_dmul+0x202>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4699      	mov	r9, r3
 800155c:	444f      	add	r7, r9
 800155e:	0c33      	lsrs	r3, r6, #16
 8001560:	4699      	mov	r9, r3
 8001562:	003b      	movs	r3, r7
 8001564:	444b      	add	r3, r9
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	4663      	mov	r3, ip
 800156a:	46ac      	mov	ip, r5
 800156c:	041f      	lsls	r7, r3, #16
 800156e:	0c3f      	lsrs	r7, r7, #16
 8001570:	0436      	lsls	r6, r6, #16
 8001572:	19f6      	adds	r6, r6, r7
 8001574:	44b4      	add	ip, r6
 8001576:	4663      	mov	r3, ip
 8001578:	9304      	str	r3, [sp, #16]
 800157a:	465b      	mov	r3, fp
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	469c      	mov	ip, r3
 8001580:	465b      	mov	r3, fp
 8001582:	041f      	lsls	r7, r3, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	003b      	movs	r3, r7
 8001588:	4343      	muls	r3, r0
 800158a:	4699      	mov	r9, r3
 800158c:	4663      	mov	r3, ip
 800158e:	4343      	muls	r3, r0
 8001590:	469a      	mov	sl, r3
 8001592:	464b      	mov	r3, r9
 8001594:	4660      	mov	r0, ip
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	469b      	mov	fp, r3
 800159a:	4348      	muls	r0, r1
 800159c:	4379      	muls	r1, r7
 800159e:	4451      	add	r1, sl
 80015a0:	4459      	add	r1, fp
 80015a2:	458a      	cmp	sl, r1
 80015a4:	d903      	bls.n	80015ae <__aeabi_dmul+0x252>
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	469a      	mov	sl, r3
 80015ac:	4450      	add	r0, sl
 80015ae:	0c0b      	lsrs	r3, r1, #16
 80015b0:	469a      	mov	sl, r3
 80015b2:	464b      	mov	r3, r9
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	4699      	mov	r9, r3
 80015ba:	003b      	movs	r3, r7
 80015bc:	4363      	muls	r3, r4
 80015be:	0409      	lsls	r1, r1, #16
 80015c0:	4645      	mov	r5, r8
 80015c2:	4449      	add	r1, r9
 80015c4:	4699      	mov	r9, r3
 80015c6:	4663      	mov	r3, ip
 80015c8:	435c      	muls	r4, r3
 80015ca:	436b      	muls	r3, r5
 80015cc:	469c      	mov	ip, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	4698      	mov	r8, r3
 80015d4:	436f      	muls	r7, r5
 80015d6:	193f      	adds	r7, r7, r4
 80015d8:	4447      	add	r7, r8
 80015da:	4450      	add	r0, sl
 80015dc:	42bc      	cmp	r4, r7
 80015de:	d903      	bls.n	80015e8 <__aeabi_dmul+0x28c>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4698      	mov	r8, r3
 80015e6:	44c4      	add	ip, r8
 80015e8:	9b04      	ldr	r3, [sp, #16]
 80015ea:	9d00      	ldr	r5, [sp, #0]
 80015ec:	4698      	mov	r8, r3
 80015ee:	4445      	add	r5, r8
 80015f0:	42b5      	cmp	r5, r6
 80015f2:	41b6      	sbcs	r6, r6
 80015f4:	4273      	negs	r3, r6
 80015f6:	4698      	mov	r8, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	041e      	lsls	r6, r3, #16
 80015fc:	9b05      	ldr	r3, [sp, #20]
 80015fe:	043c      	lsls	r4, r7, #16
 8001600:	4699      	mov	r9, r3
 8001602:	0c36      	lsrs	r6, r6, #16
 8001604:	19a4      	adds	r4, r4, r6
 8001606:	444c      	add	r4, r9
 8001608:	46a1      	mov	r9, r4
 800160a:	4683      	mov	fp, r0
 800160c:	186e      	adds	r6, r5, r1
 800160e:	44c1      	add	r9, r8
 8001610:	428e      	cmp	r6, r1
 8001612:	4189      	sbcs	r1, r1
 8001614:	44cb      	add	fp, r9
 8001616:	465d      	mov	r5, fp
 8001618:	4249      	negs	r1, r1
 800161a:	186d      	adds	r5, r5, r1
 800161c:	429c      	cmp	r4, r3
 800161e:	41a4      	sbcs	r4, r4
 8001620:	45c1      	cmp	r9, r8
 8001622:	419b      	sbcs	r3, r3
 8001624:	4583      	cmp	fp, r0
 8001626:	4180      	sbcs	r0, r0
 8001628:	428d      	cmp	r5, r1
 800162a:	4189      	sbcs	r1, r1
 800162c:	425b      	negs	r3, r3
 800162e:	4264      	negs	r4, r4
 8001630:	431c      	orrs	r4, r3
 8001632:	4240      	negs	r0, r0
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	4249      	negs	r1, r1
 8001638:	4301      	orrs	r1, r0
 800163a:	0270      	lsls	r0, r6, #9
 800163c:	0c3f      	lsrs	r7, r7, #16
 800163e:	4318      	orrs	r0, r3
 8001640:	19e4      	adds	r4, r4, r7
 8001642:	1e47      	subs	r7, r0, #1
 8001644:	41b8      	sbcs	r0, r7
 8001646:	1864      	adds	r4, r4, r1
 8001648:	4464      	add	r4, ip
 800164a:	0df6      	lsrs	r6, r6, #23
 800164c:	0261      	lsls	r1, r4, #9
 800164e:	4330      	orrs	r0, r6
 8001650:	0dec      	lsrs	r4, r5, #23
 8001652:	026e      	lsls	r6, r5, #9
 8001654:	430c      	orrs	r4, r1
 8001656:	4330      	orrs	r0, r6
 8001658:	01c9      	lsls	r1, r1, #7
 800165a:	d400      	bmi.n	800165e <__aeabi_dmul+0x302>
 800165c:	e0f1      	b.n	8001842 <__aeabi_dmul+0x4e6>
 800165e:	2101      	movs	r1, #1
 8001660:	0843      	lsrs	r3, r0, #1
 8001662:	4001      	ands	r1, r0
 8001664:	430b      	orrs	r3, r1
 8001666:	07e0      	lsls	r0, r4, #31
 8001668:	4318      	orrs	r0, r3
 800166a:	0864      	lsrs	r4, r4, #1
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <__aeabi_dmul+0x368>)
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	468c      	mov	ip, r1
 8001672:	4463      	add	r3, ip
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x31e>
 8001678:	e097      	b.n	80017aa <__aeabi_dmul+0x44e>
 800167a:	0741      	lsls	r1, r0, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x336>
 800167e:	210f      	movs	r1, #15
 8001680:	4001      	ands	r1, r0
 8001682:	2904      	cmp	r1, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x336>
 8001686:	1d01      	adds	r1, r0, #4
 8001688:	4281      	cmp	r1, r0
 800168a:	4180      	sbcs	r0, r0
 800168c:	4240      	negs	r0, r0
 800168e:	1824      	adds	r4, r4, r0
 8001690:	0008      	movs	r0, r1
 8001692:	01e1      	lsls	r1, r4, #7
 8001694:	d506      	bpl.n	80016a4 <__aeabi_dmul+0x348>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	468c      	mov	ip, r1
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <__aeabi_dmul+0x36c>)
 800169e:	401c      	ands	r4, r3
 80016a0:	9b02      	ldr	r3, [sp, #8]
 80016a2:	4463      	add	r3, ip
 80016a4:	4909      	ldr	r1, [pc, #36]	; (80016cc <__aeabi_dmul+0x370>)
 80016a6:	428b      	cmp	r3, r1
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x350>
 80016aa:	e710      	b.n	80014ce <__aeabi_dmul+0x172>
 80016ac:	0761      	lsls	r1, r4, #29
 80016ae:	08c5      	lsrs	r5, r0, #3
 80016b0:	0264      	lsls	r4, r4, #9
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	430d      	orrs	r5, r1
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d5b      	lsrs	r3, r3, #21
 80016ba:	e6c1      	b.n	8001440 <__aeabi_dmul+0xe4>
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	000007fe 	.word	0x000007fe
 80016d0:	464b      	mov	r3, r9
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d059      	beq.n	800178a <__aeabi_dmul+0x42e>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_dmul+0x380>
 80016da:	e0a3      	b.n	8001824 <__aeabi_dmul+0x4c8>
 80016dc:	0020      	movs	r0, r4
 80016de:	f000 fd2b 	bl	8002138 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0003      	movs	r3, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	221d      	movs	r2, #29
 80016ea:	1a52      	subs	r2, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0018      	movs	r0, r3
 80016f0:	40d1      	lsrs	r1, r2
 80016f2:	464a      	mov	r2, r9
 80016f4:	3808      	subs	r0, #8
 80016f6:	4082      	lsls	r2, r0
 80016f8:	4084      	lsls	r4, r0
 80016fa:	0010      	movs	r0, r2
 80016fc:	430c      	orrs	r4, r1
 80016fe:	4a74      	ldr	r2, [pc, #464]	; (80018d0 <__aeabi_dmul+0x574>)
 8001700:	1aeb      	subs	r3, r5, r3
 8001702:	4694      	mov	ip, r2
 8001704:	4642      	mov	r2, r8
 8001706:	4463      	add	r3, ip
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	407a      	eors	r2, r7
 800170e:	3301      	adds	r3, #1
 8001710:	2100      	movs	r1, #0
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2e0a      	cmp	r6, #10
 8001718:	dd00      	ble.n	800171c <__aeabi_dmul+0x3c0>
 800171a:	e667      	b.n	80013ec <__aeabi_dmul+0x90>
 800171c:	e683      	b.n	8001426 <__aeabi_dmul+0xca>
 800171e:	465b      	mov	r3, fp
 8001720:	4303      	orrs	r3, r0
 8001722:	469a      	mov	sl, r3
 8001724:	d02a      	beq.n	800177c <__aeabi_dmul+0x420>
 8001726:	465b      	mov	r3, fp
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06d      	beq.n	8001808 <__aeabi_dmul+0x4ac>
 800172c:	4658      	mov	r0, fp
 800172e:	f000 fd03 	bl	8002138 <__clzsi2>
 8001732:	0001      	movs	r1, r0
 8001734:	0003      	movs	r3, r0
 8001736:	390b      	subs	r1, #11
 8001738:	221d      	movs	r2, #29
 800173a:	1a52      	subs	r2, r2, r1
 800173c:	0021      	movs	r1, r4
 800173e:	0018      	movs	r0, r3
 8001740:	465d      	mov	r5, fp
 8001742:	40d1      	lsrs	r1, r2
 8001744:	3808      	subs	r0, #8
 8001746:	4085      	lsls	r5, r0
 8001748:	000a      	movs	r2, r1
 800174a:	4084      	lsls	r4, r0
 800174c:	432a      	orrs	r2, r5
 800174e:	4693      	mov	fp, r2
 8001750:	46a2      	mov	sl, r4
 8001752:	4d5f      	ldr	r5, [pc, #380]	; (80018d0 <__aeabi_dmul+0x574>)
 8001754:	2600      	movs	r6, #0
 8001756:	1aed      	subs	r5, r5, r3
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	e625      	b.n	80013aa <__aeabi_dmul+0x4e>
 800175e:	465b      	mov	r3, fp
 8001760:	4303      	orrs	r3, r0
 8001762:	469a      	mov	sl, r3
 8001764:	d105      	bne.n	8001772 <__aeabi_dmul+0x416>
 8001766:	2300      	movs	r3, #0
 8001768:	469b      	mov	fp, r3
 800176a:	3302      	adds	r3, #2
 800176c:	2608      	movs	r6, #8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	e61b      	b.n	80013aa <__aeabi_dmul+0x4e>
 8001772:	2303      	movs	r3, #3
 8001774:	4682      	mov	sl, r0
 8001776:	260c      	movs	r6, #12
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	e616      	b.n	80013aa <__aeabi_dmul+0x4e>
 800177c:	2300      	movs	r3, #0
 800177e:	469b      	mov	fp, r3
 8001780:	3301      	adds	r3, #1
 8001782:	2604      	movs	r6, #4
 8001784:	2500      	movs	r5, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	e60f      	b.n	80013aa <__aeabi_dmul+0x4e>
 800178a:	4642      	mov	r2, r8
 800178c:	3301      	adds	r3, #1
 800178e:	9501      	str	r5, [sp, #4]
 8001790:	431e      	orrs	r6, r3
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	407a      	eors	r2, r7
 8001796:	3301      	adds	r3, #1
 8001798:	2400      	movs	r4, #0
 800179a:	2000      	movs	r0, #0
 800179c:	2101      	movs	r1, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2e0a      	cmp	r6, #10
 80017a4:	dd00      	ble.n	80017a8 <__aeabi_dmul+0x44c>
 80017a6:	e621      	b.n	80013ec <__aeabi_dmul+0x90>
 80017a8:	e63d      	b.n	8001426 <__aeabi_dmul+0xca>
 80017aa:	2101      	movs	r1, #1
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	2938      	cmp	r1, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dmul+0x458>
 80017b2:	e642      	b.n	800143a <__aeabi_dmul+0xde>
 80017b4:	291f      	cmp	r1, #31
 80017b6:	dd47      	ble.n	8001848 <__aeabi_dmul+0x4ec>
 80017b8:	261f      	movs	r6, #31
 80017ba:	0025      	movs	r5, r4
 80017bc:	4276      	negs	r6, r6
 80017be:	1af3      	subs	r3, r6, r3
 80017c0:	40dd      	lsrs	r5, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	2920      	cmp	r1, #32
 80017c6:	d005      	beq.n	80017d4 <__aeabi_dmul+0x478>
 80017c8:	4942      	ldr	r1, [pc, #264]	; (80018d4 <__aeabi_dmul+0x578>)
 80017ca:	9d02      	ldr	r5, [sp, #8]
 80017cc:	468c      	mov	ip, r1
 80017ce:	4465      	add	r5, ip
 80017d0:	40ac      	lsls	r4, r5
 80017d2:	4320      	orrs	r0, r4
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4318      	orrs	r0, r3
 80017da:	2307      	movs	r3, #7
 80017dc:	001d      	movs	r5, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	4005      	ands	r5, r0
 80017e2:	4203      	tst	r3, r0
 80017e4:	d04a      	beq.n	800187c <__aeabi_dmul+0x520>
 80017e6:	230f      	movs	r3, #15
 80017e8:	2400      	movs	r4, #0
 80017ea:	4003      	ands	r3, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d042      	beq.n	8001876 <__aeabi_dmul+0x51a>
 80017f0:	1d03      	adds	r3, r0, #4
 80017f2:	4283      	cmp	r3, r0
 80017f4:	4180      	sbcs	r0, r0
 80017f6:	4240      	negs	r0, r0
 80017f8:	1824      	adds	r4, r4, r0
 80017fa:	0018      	movs	r0, r3
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d53a      	bpl.n	8001876 <__aeabi_dmul+0x51a>
 8001800:	2301      	movs	r3, #1
 8001802:	2400      	movs	r4, #0
 8001804:	2500      	movs	r5, #0
 8001806:	e61b      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001808:	f000 fc96 	bl	8002138 <__clzsi2>
 800180c:	0001      	movs	r1, r0
 800180e:	0003      	movs	r3, r0
 8001810:	3115      	adds	r1, #21
 8001812:	3320      	adds	r3, #32
 8001814:	291c      	cmp	r1, #28
 8001816:	dd8f      	ble.n	8001738 <__aeabi_dmul+0x3dc>
 8001818:	3808      	subs	r0, #8
 800181a:	2200      	movs	r2, #0
 800181c:	4084      	lsls	r4, r0
 800181e:	4692      	mov	sl, r2
 8001820:	46a3      	mov	fp, r4
 8001822:	e796      	b.n	8001752 <__aeabi_dmul+0x3f6>
 8001824:	f000 fc88 	bl	8002138 <__clzsi2>
 8001828:	0001      	movs	r1, r0
 800182a:	0003      	movs	r3, r0
 800182c:	3115      	adds	r1, #21
 800182e:	3320      	adds	r3, #32
 8001830:	291c      	cmp	r1, #28
 8001832:	dc00      	bgt.n	8001836 <__aeabi_dmul+0x4da>
 8001834:	e758      	b.n	80016e8 <__aeabi_dmul+0x38c>
 8001836:	0002      	movs	r2, r0
 8001838:	464c      	mov	r4, r9
 800183a:	3a08      	subs	r2, #8
 800183c:	2000      	movs	r0, #0
 800183e:	4094      	lsls	r4, r2
 8001840:	e75d      	b.n	80016fe <__aeabi_dmul+0x3a2>
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_dmul+0x310>
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <__aeabi_dmul+0x57c>)
 800184a:	0026      	movs	r6, r4
 800184c:	469c      	mov	ip, r3
 800184e:	0003      	movs	r3, r0
 8001850:	9d02      	ldr	r5, [sp, #8]
 8001852:	40cb      	lsrs	r3, r1
 8001854:	4465      	add	r5, ip
 8001856:	40ae      	lsls	r6, r5
 8001858:	431e      	orrs	r6, r3
 800185a:	0003      	movs	r3, r0
 800185c:	40ab      	lsls	r3, r5
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	4183      	sbcs	r3, r0
 8001862:	0030      	movs	r0, r6
 8001864:	4318      	orrs	r0, r3
 8001866:	40cc      	lsrs	r4, r1
 8001868:	0743      	lsls	r3, r0, #29
 800186a:	d0c7      	beq.n	80017fc <__aeabi_dmul+0x4a0>
 800186c:	230f      	movs	r3, #15
 800186e:	4003      	ands	r3, r0
 8001870:	2b04      	cmp	r3, #4
 8001872:	d1bd      	bne.n	80017f0 <__aeabi_dmul+0x494>
 8001874:	e7c2      	b.n	80017fc <__aeabi_dmul+0x4a0>
 8001876:	0765      	lsls	r5, r4, #29
 8001878:	0264      	lsls	r4, r4, #9
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	08c0      	lsrs	r0, r0, #3
 800187e:	2300      	movs	r3, #0
 8001880:	4305      	orrs	r5, r0
 8001882:	e5dd      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001884:	2500      	movs	r5, #0
 8001886:	2302      	movs	r3, #2
 8001888:	2e0f      	cmp	r6, #15
 800188a:	d10c      	bne.n	80018a6 <__aeabi_dmul+0x54a>
 800188c:	2480      	movs	r4, #128	; 0x80
 800188e:	465b      	mov	r3, fp
 8001890:	0324      	lsls	r4, r4, #12
 8001892:	4223      	tst	r3, r4
 8001894:	d00e      	beq.n	80018b4 <__aeabi_dmul+0x558>
 8001896:	4221      	tst	r1, r4
 8001898:	d10c      	bne.n	80018b4 <__aeabi_dmul+0x558>
 800189a:	430c      	orrs	r4, r1
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	003a      	movs	r2, r7
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <__aeabi_dmul+0x580>)
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e5cc      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018a6:	2e0b      	cmp	r6, #11
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x550>
 80018aa:	e5a2      	b.n	80013f2 <__aeabi_dmul+0x96>
 80018ac:	468b      	mov	fp, r1
 80018ae:	46aa      	mov	sl, r5
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	e5f7      	b.n	80014a4 <__aeabi_dmul+0x148>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	465b      	mov	r3, fp
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4642      	mov	r2, r8
 80018c0:	4655      	mov	r5, sl
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <__aeabi_dmul+0x580>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e5bb      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018c8:	464d      	mov	r5, r9
 80018ca:	0021      	movs	r1, r4
 80018cc:	2303      	movs	r3, #3
 80018ce:	e7db      	b.n	8001888 <__aeabi_dmul+0x52c>
 80018d0:	fffffc0d 	.word	0xfffffc0d
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e
 80018dc:	000007ff 	.word	0x000007ff

080018e0 <__aeabi_dsub>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	000d      	movs	r5, r1
 80018ee:	0004      	movs	r4, r0
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	032b      	lsls	r3, r5, #12
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	0f62      	lsrs	r2, r4, #29
 80018fa:	431a      	orrs	r2, r3
 80018fc:	00e3      	lsls	r3, r4, #3
 80018fe:	030c      	lsls	r4, r1, #12
 8001900:	0a64      	lsrs	r4, r4, #9
 8001902:	0f47      	lsrs	r7, r0, #29
 8001904:	4327      	orrs	r7, r4
 8001906:	4cd0      	ldr	r4, [pc, #832]	; (8001c48 <__aeabi_dsub+0x368>)
 8001908:	006e      	lsls	r6, r5, #1
 800190a:	4691      	mov	r9, r2
 800190c:	b083      	sub	sp, #12
 800190e:	004a      	lsls	r2, r1, #1
 8001910:	00c0      	lsls	r0, r0, #3
 8001912:	4698      	mov	r8, r3
 8001914:	46a2      	mov	sl, r4
 8001916:	0d76      	lsrs	r6, r6, #21
 8001918:	0fed      	lsrs	r5, r5, #31
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	42a2      	cmp	r2, r4
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x46>
 8001924:	e0b9      	b.n	8001a9a <__aeabi_dsub+0x1ba>
 8001926:	2401      	movs	r4, #1
 8001928:	4061      	eors	r1, r4
 800192a:	468b      	mov	fp, r1
 800192c:	428d      	cmp	r5, r1
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x52>
 8001930:	e08d      	b.n	8001a4e <__aeabi_dsub+0x16e>
 8001932:	1ab4      	subs	r4, r6, r2
 8001934:	46a4      	mov	ip, r4
 8001936:	2c00      	cmp	r4, #0
 8001938:	dc00      	bgt.n	800193c <__aeabi_dsub+0x5c>
 800193a:	e0b7      	b.n	8001aac <__aeabi_dsub+0x1cc>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x62>
 8001940:	e0cb      	b.n	8001ada <__aeabi_dsub+0x1fa>
 8001942:	4ac1      	ldr	r2, [pc, #772]	; (8001c48 <__aeabi_dsub+0x368>)
 8001944:	4296      	cmp	r6, r2
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x6a>
 8001948:	e186      	b.n	8001c58 <__aeabi_dsub+0x378>
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	4317      	orrs	r7, r2
 8001950:	4662      	mov	r2, ip
 8001952:	2a38      	cmp	r2, #56	; 0x38
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0x78>
 8001956:	e1a4      	b.n	8001ca2 <__aeabi_dsub+0x3c2>
 8001958:	2a1f      	cmp	r2, #31
 800195a:	dd00      	ble.n	800195e <__aeabi_dsub+0x7e>
 800195c:	e21d      	b.n	8001d9a <__aeabi_dsub+0x4ba>
 800195e:	4661      	mov	r1, ip
 8001960:	2220      	movs	r2, #32
 8001962:	003c      	movs	r4, r7
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	0001      	movs	r1, r0
 8001968:	4090      	lsls	r0, r2
 800196a:	4094      	lsls	r4, r2
 800196c:	1e42      	subs	r2, r0, #1
 800196e:	4190      	sbcs	r0, r2
 8001970:	4662      	mov	r2, ip
 8001972:	46a0      	mov	r8, r4
 8001974:	4664      	mov	r4, ip
 8001976:	40d7      	lsrs	r7, r2
 8001978:	464a      	mov	r2, r9
 800197a:	40e1      	lsrs	r1, r4
 800197c:	4644      	mov	r4, r8
 800197e:	1bd2      	subs	r2, r2, r7
 8001980:	4691      	mov	r9, r2
 8001982:	430c      	orrs	r4, r1
 8001984:	4304      	orrs	r4, r0
 8001986:	1b1c      	subs	r4, r3, r4
 8001988:	42a3      	cmp	r3, r4
 800198a:	4192      	sbcs	r2, r2
 800198c:	464b      	mov	r3, r9
 800198e:	4252      	negs	r2, r2
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469a      	mov	sl, r3
 8001994:	4653      	mov	r3, sl
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	d400      	bmi.n	800199c <__aeabi_dsub+0xbc>
 800199a:	e12b      	b.n	8001bf4 <__aeabi_dsub+0x314>
 800199c:	4653      	mov	r3, sl
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	0a53      	lsrs	r3, r2, #9
 80019a2:	469a      	mov	sl, r3
 80019a4:	4653      	mov	r3, sl
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0xcc>
 80019aa:	e166      	b.n	8001c7a <__aeabi_dsub+0x39a>
 80019ac:	4650      	mov	r0, sl
 80019ae:	f000 fbc3 	bl	8002138 <__clzsi2>
 80019b2:	0003      	movs	r3, r0
 80019b4:	3b08      	subs	r3, #8
 80019b6:	2220      	movs	r2, #32
 80019b8:	0020      	movs	r0, r4
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	4651      	mov	r1, sl
 80019be:	40d0      	lsrs	r0, r2
 80019c0:	4099      	lsls	r1, r3
 80019c2:	0002      	movs	r2, r0
 80019c4:	409c      	lsls	r4, r3
 80019c6:	430a      	orrs	r2, r1
 80019c8:	429e      	cmp	r6, r3
 80019ca:	dd00      	ble.n	80019ce <__aeabi_dsub+0xee>
 80019cc:	e164      	b.n	8001c98 <__aeabi_dsub+0x3b8>
 80019ce:	1b9b      	subs	r3, r3, r6
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	291f      	cmp	r1, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dsub+0xf8>
 80019d6:	e0fe      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 80019d8:	2320      	movs	r3, #32
 80019da:	0010      	movs	r0, r2
 80019dc:	0026      	movs	r6, r4
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	409c      	lsls	r4, r3
 80019e2:	4098      	lsls	r0, r3
 80019e4:	40ce      	lsrs	r6, r1
 80019e6:	40ca      	lsrs	r2, r1
 80019e8:	1e63      	subs	r3, r4, #1
 80019ea:	419c      	sbcs	r4, r3
 80019ec:	4330      	orrs	r0, r6
 80019ee:	4692      	mov	sl, r2
 80019f0:	2600      	movs	r6, #0
 80019f2:	4304      	orrs	r4, r0
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a2      	add	sl, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x134>
 8001a12:	e0f2      	b.n	8001bfa <__aeabi_dsub+0x31a>
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x368>)
 8001a16:	3601      	adds	r6, #1
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x13e>
 8001a1c:	e10f      	b.n	8001c3e <__aeabi_dsub+0x35e>
 8001a1e:	4653      	mov	r3, sl
 8001a20:	498a      	ldr	r1, [pc, #552]	; (8001c4c <__aeabi_dsub+0x36c>)
 8001a22:	08e4      	lsrs	r4, r4, #3
 8001a24:	400b      	ands	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	075b      	lsls	r3, r3, #29
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	0572      	lsls	r2, r6, #21
 8001a2e:	024c      	lsls	r4, r1, #9
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0512      	lsls	r2, r2, #20
 8001a36:	4322      	orrs	r2, r4
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	432a      	orrs	r2, r5
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	0011      	movs	r1, r2
 8001a40:	b003      	add	sp, #12
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	1ab4      	subs	r4, r6, r2
 8001a50:	46a4      	mov	ip, r4
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	dd59      	ble.n	8001b0a <__aeabi_dsub+0x22a>
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x17c>
 8001a5a:	e0b0      	b.n	8001bbe <__aeabi_dsub+0x2de>
 8001a5c:	4556      	cmp	r6, sl
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x182>
 8001a60:	e0fa      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	4317      	orrs	r7, r2
 8001a68:	4662      	mov	r2, ip
 8001a6a:	2a38      	cmp	r2, #56	; 0x38
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0x190>
 8001a6e:	e0d4      	b.n	8001c1a <__aeabi_dsub+0x33a>
 8001a70:	2a1f      	cmp	r2, #31
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dsub+0x196>
 8001a74:	e1c0      	b.n	8001df8 <__aeabi_dsub+0x518>
 8001a76:	0039      	movs	r1, r7
 8001a78:	3a20      	subs	r2, #32
 8001a7a:	40d1      	lsrs	r1, r2
 8001a7c:	4662      	mov	r2, ip
 8001a7e:	2a20      	cmp	r2, #32
 8001a80:	d006      	beq.n	8001a90 <__aeabi_dsub+0x1b0>
 8001a82:	4664      	mov	r4, ip
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	1b12      	subs	r2, r2, r4
 8001a88:	003c      	movs	r4, r7
 8001a8a:	4094      	lsls	r4, r2
 8001a8c:	4304      	orrs	r4, r0
 8001a8e:	9401      	str	r4, [sp, #4]
 8001a90:	9c01      	ldr	r4, [sp, #4]
 8001a92:	1e62      	subs	r2, r4, #1
 8001a94:	4194      	sbcs	r4, r2
 8001a96:	430c      	orrs	r4, r1
 8001a98:	e0c3      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001a9a:	003c      	movs	r4, r7
 8001a9c:	4304      	orrs	r4, r0
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x218>
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	428d      	cmp	r5, r1
 8001aa4:	d02e      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001aa6:	4c6a      	ldr	r4, [pc, #424]	; (8001c50 <__aeabi_dsub+0x370>)
 8001aa8:	46a4      	mov	ip, r4
 8001aaa:	44b4      	add	ip, r6
 8001aac:	4664      	mov	r4, ip
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d05f      	beq.n	8001b72 <__aeabi_dsub+0x292>
 8001ab2:	1b94      	subs	r4, r2, r6
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2e00      	cmp	r6, #0
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x1dc>
 8001aba:	e120      	b.n	8001cfe <__aeabi_dsub+0x41e>
 8001abc:	464c      	mov	r4, r9
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e4>
 8001ac2:	e1c7      	b.n	8001e54 <__aeabi_dsub+0x574>
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	1e4c      	subs	r4, r1, #1
 8001ac8:	2901      	cmp	r1, #1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x1ee>
 8001acc:	e223      	b.n	8001f16 <__aeabi_dsub+0x636>
 8001ace:	4d5e      	ldr	r5, [pc, #376]	; (8001c48 <__aeabi_dsub+0x368>)
 8001ad0:	45ac      	cmp	ip, r5
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x1f6>
 8001ad4:	e1d8      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	e11a      	b.n	8001d10 <__aeabi_dsub+0x430>
 8001ada:	003a      	movs	r2, r7
 8001adc:	4302      	orrs	r2, r0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x202>
 8001ae0:	e0e4      	b.n	8001cac <__aeabi_dsub+0x3cc>
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	2c01      	cmp	r4, #1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x20c>
 8001aea:	e1c3      	b.n	8001e74 <__aeabi_dsub+0x594>
 8001aec:	4956      	ldr	r1, [pc, #344]	; (8001c48 <__aeabi_dsub+0x368>)
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x214>
 8001af2:	e0b1      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001af4:	4694      	mov	ip, r2
 8001af6:	e72b      	b.n	8001950 <__aeabi_dsub+0x70>
 8001af8:	2401      	movs	r4, #1
 8001afa:	4061      	eors	r1, r4
 8001afc:	468b      	mov	fp, r1
 8001afe:	428d      	cmp	r5, r1
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001b02:	e716      	b.n	8001932 <__aeabi_dsub+0x52>
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <__aeabi_dsub+0x370>)
 8001b06:	468c      	mov	ip, r1
 8001b08:	44b4      	add	ip, r6
 8001b0a:	4664      	mov	r4, ip
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x232>
 8001b10:	e0d3      	b.n	8001cba <__aeabi_dsub+0x3da>
 8001b12:	1b91      	subs	r1, r2, r6
 8001b14:	468c      	mov	ip, r1
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x23c>
 8001b1a:	e15e      	b.n	8001dda <__aeabi_dsub+0x4fa>
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <__aeabi_dsub+0x368>)
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x244>
 8001b22:	e1be      	b.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	464c      	mov	r4, r9
 8001b28:	0409      	lsls	r1, r1, #16
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	46a1      	mov	r9, r4
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2938      	cmp	r1, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x256>
 8001b34:	e1ba      	b.n	8001eac <__aeabi_dsub+0x5cc>
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x25c>
 8001b3a:	e227      	b.n	8001f8c <__aeabi_dsub+0x6ac>
 8001b3c:	2420      	movs	r4, #32
 8001b3e:	1a64      	subs	r4, r4, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	40a1      	lsls	r1, r4
 8001b44:	001e      	movs	r6, r3
 8001b46:	4688      	mov	r8, r1
 8001b48:	4661      	mov	r1, ip
 8001b4a:	40a3      	lsls	r3, r4
 8001b4c:	40ce      	lsrs	r6, r1
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1e5c      	subs	r4, r3, #1
 8001b52:	41a3      	sbcs	r3, r4
 8001b54:	4331      	orrs	r1, r6
 8001b56:	4319      	orrs	r1, r3
 8001b58:	000c      	movs	r4, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	40d9      	lsrs	r1, r3
 8001b60:	187f      	adds	r7, r7, r1
 8001b62:	1824      	adds	r4, r4, r0
 8001b64:	4284      	cmp	r4, r0
 8001b66:	419b      	sbcs	r3, r3
 8001b68:	425b      	negs	r3, r3
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	0016      	movs	r6, r2
 8001b6e:	44ba      	add	sl, r7
 8001b70:	e05d      	b.n	8001c2e <__aeabi_dsub+0x34e>
 8001b72:	4c38      	ldr	r4, [pc, #224]	; (8001c54 <__aeabi_dsub+0x374>)
 8001b74:	1c72      	adds	r2, r6, #1
 8001b76:	4222      	tst	r2, r4
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x29c>
 8001b7a:	e0df      	b.n	8001d3c <__aeabi_dsub+0x45c>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x2a6>
 8001b84:	e15c      	b.n	8001e40 <__aeabi_dsub+0x560>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x2ac>
 8001b8a:	e1cf      	b.n	8001f2c <__aeabi_dsub+0x64c>
 8001b8c:	003a      	movs	r2, r7
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x2b4>
 8001b92:	e17f      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001b94:	1a1c      	subs	r4, r3, r0
 8001b96:	464a      	mov	r2, r9
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	4189      	sbcs	r1, r1
 8001b9c:	1bd2      	subs	r2, r2, r7
 8001b9e:	4249      	negs	r1, r1
 8001ba0:	1a52      	subs	r2, r2, r1
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	d400      	bmi.n	8001baa <__aeabi_dsub+0x2ca>
 8001ba8:	e20a      	b.n	8001fc0 <__aeabi_dsub+0x6e0>
 8001baa:	1ac4      	subs	r4, r0, r3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	4180      	sbcs	r0, r0
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	1aff      	subs	r7, r7, r3
 8001bb6:	1a3b      	subs	r3, r7, r0
 8001bb8:	469a      	mov	sl, r3
 8001bba:	465d      	mov	r5, fp
 8001bbc:	e71a      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001bbe:	003a      	movs	r2, r7
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	d073      	beq.n	8001cac <__aeabi_dsub+0x3cc>
 8001bc4:	0022      	movs	r2, r4
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	2c01      	cmp	r4, #1
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x2ee>
 8001bcc:	e0cb      	b.n	8001d66 <__aeabi_dsub+0x486>
 8001bce:	4554      	cmp	r4, sl
 8001bd0:	d042      	beq.n	8001c58 <__aeabi_dsub+0x378>
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	e748      	b.n	8001a68 <__aeabi_dsub+0x188>
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	3b1f      	subs	r3, #31
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	2920      	cmp	r1, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dsub+0x308>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	4314      	orrs	r4, r2
 8001be8:	1e63      	subs	r3, r4, #1
 8001bea:	419c      	sbcs	r4, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	2600      	movs	r6, #0
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	4304      	orrs	r4, r0
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x31a>
 8001bf8:	e6fe      	b.n	80019f8 <__aeabi_dsub+0x118>
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	08e3      	lsrs	r3, r4, #3
 8001bfe:	0752      	lsls	r2, r2, #29
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4652      	mov	r2, sl
 8001c04:	46b4      	mov	ip, r6
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	490f      	ldr	r1, [pc, #60]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c0a:	458c      	cmp	ip, r1
 8001c0c:	d02a      	beq.n	8001c64 <__aeabi_dsub+0x384>
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	0b14      	lsrs	r4, r2, #12
 8001c12:	4662      	mov	r2, ip
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	e70c      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c1a:	003c      	movs	r4, r7
 8001c1c:	4304      	orrs	r4, r0
 8001c1e:	1e62      	subs	r2, r4, #1
 8001c20:	4194      	sbcs	r4, r2
 8001c22:	18e4      	adds	r4, r4, r3
 8001c24:	429c      	cmp	r4, r3
 8001c26:	4192      	sbcs	r2, r2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	444a      	add	r2, r9
 8001c2c:	4692      	mov	sl, r2
 8001c2e:	4653      	mov	r3, sl
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	d5df      	bpl.n	8001bf4 <__aeabi_dsub+0x314>
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c36:	3601      	adds	r6, #1
 8001c38:	429e      	cmp	r6, r3
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x35e>
 8001c3c:	e0a0      	b.n	8001d80 <__aeabi_dsub+0x4a0>
 8001c3e:	0032      	movs	r2, r6
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	e6f6      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	0752      	lsls	r2, r2, #29
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	464a      	mov	r2, r9
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	0019      	movs	r1, r3
 8001c66:	4311      	orrs	r1, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x38c>
 8001c6a:	e1b5      	b.n	8001fd8 <__aeabi_dsub+0x6f8>
 8001c6c:	2480      	movs	r4, #128	; 0x80
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4ad5      	ldr	r2, [pc, #852]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e6dc      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f000 fa5c 	bl	8002138 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3318      	adds	r3, #24
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dsub+0x3aa>
 8001c88:	e695      	b.n	80019b6 <__aeabi_dsub+0xd6>
 8001c8a:	0022      	movs	r2, r4
 8001c8c:	3808      	subs	r0, #8
 8001c8e:	4082      	lsls	r2, r0
 8001c90:	2400      	movs	r4, #0
 8001c92:	429e      	cmp	r6, r3
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dsub+0x3b8>
 8001c96:	e69a      	b.n	80019ce <__aeabi_dsub+0xee>
 8001c98:	1af6      	subs	r6, r6, r3
 8001c9a:	4bcd      	ldr	r3, [pc, #820]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4692      	mov	sl, r2
 8001ca0:	e6a8      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001ca2:	003c      	movs	r4, r7
 8001ca4:	4304      	orrs	r4, r0
 8001ca6:	1e62      	subs	r2, r4, #1
 8001ca8:	4194      	sbcs	r4, r2
 8001caa:	e66c      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001cac:	464a      	mov	r2, r9
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0752      	lsls	r2, r2, #29
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	e7a6      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001cba:	4cc6      	ldr	r4, [pc, #792]	; (8001fd4 <__aeabi_dsub+0x6f4>)
 8001cbc:	1c72      	adds	r2, r6, #1
 8001cbe:	4222      	tst	r2, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x3e4>
 8001cc2:	e0ac      	b.n	8001e1e <__aeabi_dsub+0x53e>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	2e00      	cmp	r6, #0
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x3ee>
 8001ccc:	e105      	b.n	8001eda <__aeabi_dsub+0x5fa>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x3f4>
 8001cd2:	e156      	b.n	8001f82 <__aeabi_dsub+0x6a2>
 8001cd4:	003a      	movs	r2, r7
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x3fc>
 8001cda:	e0db      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001cdc:	181c      	adds	r4, r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	419b      	sbcs	r3, r3
 8001ce2:	444f      	add	r7, r9
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	449a      	add	sl, r3
 8001cea:	4653      	mov	r3, sl
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	d400      	bmi.n	8001cf2 <__aeabi_dsub+0x412>
 8001cf0:	e780      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	4bb6      	ldr	r3, [pc, #728]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4692      	mov	sl, r2
 8001cfc:	e77a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cfe:	4cb3      	ldr	r4, [pc, #716]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001d00:	42a2      	cmp	r2, r4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x426>
 8001d04:	e0c0      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001d06:	2480      	movs	r4, #128	; 0x80
 8001d08:	464d      	mov	r5, r9
 8001d0a:	0424      	lsls	r4, r4, #16
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	46a9      	mov	r9, r5
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c38      	cmp	r4, #56	; 0x38
 8001d14:	dc53      	bgt.n	8001dbe <__aeabi_dsub+0x4de>
 8001d16:	4661      	mov	r1, ip
 8001d18:	2c1f      	cmp	r4, #31
 8001d1a:	dd00      	ble.n	8001d1e <__aeabi_dsub+0x43e>
 8001d1c:	e0cd      	b.n	8001eba <__aeabi_dsub+0x5da>
 8001d1e:	2520      	movs	r5, #32
 8001d20:	001e      	movs	r6, r3
 8001d22:	1b2d      	subs	r5, r5, r4
 8001d24:	464c      	mov	r4, r9
 8001d26:	40ab      	lsls	r3, r5
 8001d28:	40ac      	lsls	r4, r5
 8001d2a:	40ce      	lsrs	r6, r1
 8001d2c:	1e5d      	subs	r5, r3, #1
 8001d2e:	41ab      	sbcs	r3, r5
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4323      	orrs	r3, r4
 8001d34:	464c      	mov	r4, r9
 8001d36:	40cc      	lsrs	r4, r1
 8001d38:	1b3f      	subs	r7, r7, r4
 8001d3a:	e045      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	1a1c      	subs	r4, r3, r0
 8001d40:	1bd1      	subs	r1, r2, r7
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	4252      	negs	r2, r2
 8001d48:	4692      	mov	sl, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	1a52      	subs	r2, r2, r1
 8001d50:	4692      	mov	sl, r2
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	d500      	bpl.n	8001d58 <__aeabi_dsub+0x478>
 8001d56:	e083      	b.n	8001e60 <__aeabi_dsub+0x580>
 8001d58:	4653      	mov	r3, sl
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x480>
 8001d5e:	e621      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001d60:	2200      	movs	r2, #0
 8001d62:	2500      	movs	r5, #0
 8001d64:	e753      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001d66:	181c      	adds	r4, r3, r0
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	419b      	sbcs	r3, r3
 8001d6c:	444f      	add	r7, r9
 8001d6e:	46ba      	mov	sl, r7
 8001d70:	425b      	negs	r3, r3
 8001d72:	449a      	add	sl, r3
 8001d74:	4653      	mov	r3, sl
 8001d76:	2601      	movs	r6, #1
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x49e>
 8001d7c:	e73a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001d7e:	2602      	movs	r6, #2
 8001d80:	4652      	mov	r2, sl
 8001d82:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	401a      	ands	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	4021      	ands	r1, r4
 8001d8c:	0862      	lsrs	r2, r4, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	07dc      	lsls	r4, r3, #31
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	469a      	mov	sl, r3
 8001d96:	4314      	orrs	r4, r2
 8001d98:	e62c      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001d9a:	0039      	movs	r1, r7
 8001d9c:	3a20      	subs	r2, #32
 8001d9e:	40d1      	lsrs	r1, r2
 8001da0:	4662      	mov	r2, ip
 8001da2:	2a20      	cmp	r2, #32
 8001da4:	d006      	beq.n	8001db4 <__aeabi_dsub+0x4d4>
 8001da6:	4664      	mov	r4, ip
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	1b12      	subs	r2, r2, r4
 8001dac:	003c      	movs	r4, r7
 8001dae:	4094      	lsls	r4, r2
 8001db0:	4304      	orrs	r4, r0
 8001db2:	9401      	str	r4, [sp, #4]
 8001db4:	9c01      	ldr	r4, [sp, #4]
 8001db6:	1e62      	subs	r2, r4, #1
 8001db8:	4194      	sbcs	r4, r2
 8001dba:	430c      	orrs	r4, r1
 8001dbc:	e5e3      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	1e5c      	subs	r4, r3, #1
 8001dc6:	41a3      	sbcs	r3, r4
 8001dc8:	1ac4      	subs	r4, r0, r3
 8001dca:	42a0      	cmp	r0, r4
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	425b      	negs	r3, r3
 8001dd0:	1afb      	subs	r3, r7, r3
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	465d      	mov	r5, fp
 8001dd6:	0016      	movs	r6, r2
 8001dd8:	e5dc      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x502>
 8001de0:	e0ae      	b.n	8001f40 <__aeabi_dsub+0x660>
 8001de2:	4661      	mov	r1, ip
 8001de4:	4664      	mov	r4, ip
 8001de6:	3901      	subs	r1, #1
 8001de8:	2c01      	cmp	r4, #1
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x50e>
 8001dec:	e0e0      	b.n	8001fb0 <__aeabi_dsub+0x6d0>
 8001dee:	4c77      	ldr	r4, [pc, #476]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001df0:	45a4      	cmp	ip, r4
 8001df2:	d056      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001df4:	468c      	mov	ip, r1
 8001df6:	e69a      	b.n	8001b2e <__aeabi_dsub+0x24e>
 8001df8:	4661      	mov	r1, ip
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	003c      	movs	r4, r7
 8001dfe:	1a52      	subs	r2, r2, r1
 8001e00:	4094      	lsls	r4, r2
 8001e02:	0001      	movs	r1, r0
 8001e04:	4090      	lsls	r0, r2
 8001e06:	46a0      	mov	r8, r4
 8001e08:	4664      	mov	r4, ip
 8001e0a:	1e42      	subs	r2, r0, #1
 8001e0c:	4190      	sbcs	r0, r2
 8001e0e:	4662      	mov	r2, ip
 8001e10:	40e1      	lsrs	r1, r4
 8001e12:	4644      	mov	r4, r8
 8001e14:	40d7      	lsrs	r7, r2
 8001e16:	430c      	orrs	r4, r1
 8001e18:	4304      	orrs	r4, r0
 8001e1a:	44b9      	add	r9, r7
 8001e1c:	e701      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001e1e:	496b      	ldr	r1, [pc, #428]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x546>
 8001e24:	e70c      	b.n	8001c40 <__aeabi_dsub+0x360>
 8001e26:	1818      	adds	r0, r3, r0
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	444f      	add	r7, r9
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	07dc      	lsls	r4, r3, #31
 8001e34:	0840      	lsrs	r0, r0, #1
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	469a      	mov	sl, r3
 8001e3a:	0016      	movs	r6, r2
 8001e3c:	4304      	orrs	r4, r0
 8001e3e:	e6d9      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d000      	beq.n	8001e46 <__aeabi_dsub+0x566>
 8001e44:	e081      	b.n	8001f4a <__aeabi_dsub+0x66a>
 8001e46:	003b      	movs	r3, r7
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_dsub+0x5a8>
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	2500      	movs	r5, #0
 8001e50:	0312      	lsls	r2, r2, #12
 8001e52:	e70b      	b.n	8001c6c <__aeabi_dsub+0x38c>
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	077b      	lsls	r3, r7, #29
 8001e58:	465d      	mov	r5, fp
 8001e5a:	4303      	orrs	r3, r0
 8001e5c:	08fa      	lsrs	r2, r7, #3
 8001e5e:	e6d3      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001e60:	1ac4      	subs	r4, r0, r3
 8001e62:	42a0      	cmp	r0, r4
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	464b      	mov	r3, r9
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1aff      	subs	r7, r7, r3
 8001e6c:	1a3b      	subs	r3, r7, r0
 8001e6e:	469a      	mov	sl, r3
 8001e70:	465d      	mov	r5, fp
 8001e72:	e597      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001e74:	1a1c      	subs	r4, r3, r0
 8001e76:	464a      	mov	r2, r9
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	1bd7      	subs	r7, r2, r7
 8001e7e:	425b      	negs	r3, r3
 8001e80:	1afb      	subs	r3, r7, r3
 8001e82:	469a      	mov	sl, r3
 8001e84:	2601      	movs	r6, #1
 8001e86:	e585      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001e88:	08c0      	lsrs	r0, r0, #3
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	465d      	mov	r5, fp
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	08fa      	lsrs	r2, r7, #3
 8001e92:	e6e7      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001e94:	464a      	mov	r2, r9
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	464a      	mov	r2, r9
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	e6b5      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001ea2:	08c0      	lsrs	r0, r0, #3
 8001ea4:	077b      	lsls	r3, r7, #29
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	08fa      	lsrs	r2, r7, #3
 8001eaa:	e6db      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001eac:	4649      	mov	r1, r9
 8001eae:	4319      	orrs	r1, r3
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	418b      	sbcs	r3, r1
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	e653      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001eba:	464d      	mov	r5, r9
 8001ebc:	3c20      	subs	r4, #32
 8001ebe:	40e5      	lsrs	r5, r4
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d005      	beq.n	8001ed0 <__aeabi_dsub+0x5f0>
 8001ec4:	2440      	movs	r4, #64	; 0x40
 8001ec6:	1a64      	subs	r4, r4, r1
 8001ec8:	4649      	mov	r1, r9
 8001eca:	40a1      	lsls	r1, r4
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	1e5c      	subs	r4, r3, #1
 8001ed4:	41a3      	sbcs	r3, r4
 8001ed6:	432b      	orrs	r3, r5
 8001ed8:	e776      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d0e1      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001ede:	003a      	movs	r2, r7
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x608>
 8001ee6:	e6b8      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001ee8:	464a      	mov	r2, r9
 8001eea:	0752      	lsls	r2, r2, #29
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0324      	lsls	r4, r4, #12
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	4222      	tst	r2, r4
 8001ef8:	d007      	beq.n	8001f0a <__aeabi_dsub+0x62a>
 8001efa:	08fe      	lsrs	r6, r7, #3
 8001efc:	4226      	tst	r6, r4
 8001efe:	d104      	bne.n	8001f0a <__aeabi_dsub+0x62a>
 8001f00:	465d      	mov	r5, fp
 8001f02:	0032      	movs	r2, r6
 8001f04:	08c3      	lsrs	r3, r0, #3
 8001f06:	077f      	lsls	r7, r7, #29
 8001f08:	433b      	orrs	r3, r7
 8001f0a:	0f59      	lsrs	r1, r3, #29
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	0749      	lsls	r1, r1, #29
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	e6a6      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f16:	1ac4      	subs	r4, r0, r3
 8001f18:	42a0      	cmp	r0, r4
 8001f1a:	4180      	sbcs	r0, r0
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4240      	negs	r0, r0
 8001f20:	1aff      	subs	r7, r7, r3
 8001f22:	1a3b      	subs	r3, r7, r0
 8001f24:	469a      	mov	sl, r3
 8001f26:	465d      	mov	r5, fp
 8001f28:	2601      	movs	r6, #1
 8001f2a:	e533      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x654>
 8001f32:	e715      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e666      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f40:	08c0      	lsrs	r0, r0, #3
 8001f42:	077b      	lsls	r3, r7, #29
 8001f44:	4303      	orrs	r3, r0
 8001f46:	08fa      	lsrs	r2, r7, #3
 8001f48:	e65e      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001f4a:	003a      	movs	r2, r7
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x674>
 8001f52:	e682      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001f54:	464a      	mov	r2, r9
 8001f56:	0752      	lsls	r2, r2, #29
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	4222      	tst	r2, r4
 8001f64:	d007      	beq.n	8001f76 <__aeabi_dsub+0x696>
 8001f66:	08fe      	lsrs	r6, r7, #3
 8001f68:	4226      	tst	r6, r4
 8001f6a:	d104      	bne.n	8001f76 <__aeabi_dsub+0x696>
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	0032      	movs	r2, r6
 8001f70:	08c3      	lsrs	r3, r0, #3
 8001f72:	077f      	lsls	r7, r7, #29
 8001f74:	433b      	orrs	r3, r7
 8001f76:	0f59      	lsrs	r1, r3, #29
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0749      	lsls	r1, r1, #29
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	e670      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e640      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	3920      	subs	r1, #32
 8001f90:	40cc      	lsrs	r4, r1
 8001f92:	4661      	mov	r1, ip
 8001f94:	2920      	cmp	r1, #32
 8001f96:	d006      	beq.n	8001fa6 <__aeabi_dsub+0x6c6>
 8001f98:	4666      	mov	r6, ip
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	1b89      	subs	r1, r1, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	408e      	lsls	r6, r1
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	418b      	sbcs	r3, r1
 8001fac:	431c      	orrs	r4, r3
 8001fae:	e5d8      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001fb0:	181c      	adds	r4, r3, r0
 8001fb2:	4284      	cmp	r4, r0
 8001fb4:	4180      	sbcs	r0, r0
 8001fb6:	444f      	add	r7, r9
 8001fb8:	46ba      	mov	sl, r7
 8001fba:	4240      	negs	r0, r0
 8001fbc:	4482      	add	sl, r0
 8001fbe:	e6d9      	b.n	8001d74 <__aeabi_dsub+0x494>
 8001fc0:	4653      	mov	r3, sl
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x6e8>
 8001fc6:	e6cb      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001fc8:	e614      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000007ff 	.word	0x000007ff
 8001fd0:	ff7fffff 	.word	0xff7fffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4a01      	ldr	r2, [pc, #4]	; (8001fe0 <__aeabi_dsub+0x700>)
 8001fdc:	001c      	movs	r4, r3
 8001fde:	e529      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001fe0:	000007ff 	.word	0x000007ff

08001fe4 <__aeabi_dcmpun>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <__aeabi_dcmpun+0x38>)
 8001fea:	031c      	lsls	r4, r3, #12
 8001fec:	0016      	movs	r6, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	030a      	lsls	r2, r1, #12
 8001ff2:	0049      	lsls	r1, r1, #1
 8001ff4:	0b12      	lsrs	r2, r2, #12
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	0d5b      	lsrs	r3, r3, #21
 8001ffc:	4281      	cmp	r1, r0
 8001ffe:	d008      	beq.n	8002012 <__aeabi_dcmpun+0x2e>
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <__aeabi_dcmpun+0x38>)
 8002002:	2000      	movs	r0, #0
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002008:	0020      	movs	r0, r4
 800200a:	4330      	orrs	r0, r6
 800200c:	1e43      	subs	r3, r0, #1
 800200e:	4198      	sbcs	r0, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	432a      	orrs	r2, r5
 8002016:	d1fb      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002018:	e7f2      	b.n	8002000 <__aeabi_dcmpun+0x1c>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__aeabi_d2iz>:
 8002020:	000a      	movs	r2, r1
 8002022:	b530      	push	{r4, r5, lr}
 8002024:	4c13      	ldr	r4, [pc, #76]	; (8002074 <__aeabi_d2iz+0x54>)
 8002026:	0053      	lsls	r3, r2, #1
 8002028:	0309      	lsls	r1, r1, #12
 800202a:	0005      	movs	r5, r0
 800202c:	0b09      	lsrs	r1, r1, #12
 800202e:	2000      	movs	r0, #0
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	0fd2      	lsrs	r2, r2, #31
 8002034:	42a3      	cmp	r3, r4
 8002036:	dd04      	ble.n	8002042 <__aeabi_d2iz+0x22>
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <__aeabi_d2iz+0x58>)
 800203a:	4283      	cmp	r3, r0
 800203c:	dd02      	ble.n	8002044 <__aeabi_d2iz+0x24>
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <__aeabi_d2iz+0x5c>)
 8002040:	18d0      	adds	r0, r2, r3
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	2080      	movs	r0, #128	; 0x80
 8002046:	0340      	lsls	r0, r0, #13
 8002048:	4301      	orrs	r1, r0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <__aeabi_d2iz+0x60>)
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	281f      	cmp	r0, #31
 8002050:	dd08      	ble.n	8002064 <__aeabi_d2iz+0x44>
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <__aeabi_d2iz+0x64>)
 8002054:	1ac3      	subs	r3, r0, r3
 8002056:	40d9      	lsrs	r1, r3
 8002058:	000b      	movs	r3, r1
 800205a:	4258      	negs	r0, r3
 800205c:	2a00      	cmp	r2, #0
 800205e:	d1f0      	bne.n	8002042 <__aeabi_d2iz+0x22>
 8002060:	0018      	movs	r0, r3
 8002062:	e7ee      	b.n	8002042 <__aeabi_d2iz+0x22>
 8002064:	4c08      	ldr	r4, [pc, #32]	; (8002088 <__aeabi_d2iz+0x68>)
 8002066:	40c5      	lsrs	r5, r0
 8002068:	46a4      	mov	ip, r4
 800206a:	4463      	add	r3, ip
 800206c:	4099      	lsls	r1, r3
 800206e:	000b      	movs	r3, r1
 8002070:	432b      	orrs	r3, r5
 8002072:	e7f2      	b.n	800205a <__aeabi_d2iz+0x3a>
 8002074:	000003fe 	.word	0x000003fe
 8002078:	0000041d 	.word	0x0000041d
 800207c:	7fffffff 	.word	0x7fffffff
 8002080:	00000433 	.word	0x00000433
 8002084:	00000413 	.word	0x00000413
 8002088:	fffffbed 	.word	0xfffffbed

0800208c <__aeabi_i2d>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2800      	cmp	r0, #0
 8002090:	d016      	beq.n	80020c0 <__aeabi_i2d+0x34>
 8002092:	17c3      	asrs	r3, r0, #31
 8002094:	18c5      	adds	r5, r0, r3
 8002096:	405d      	eors	r5, r3
 8002098:	0fc4      	lsrs	r4, r0, #31
 800209a:	0028      	movs	r0, r5
 800209c:	f000 f84c 	bl	8002138 <__clzsi2>
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <__aeabi_i2d+0x5c>)
 80020a2:	1a1b      	subs	r3, r3, r0
 80020a4:	280a      	cmp	r0, #10
 80020a6:	dc16      	bgt.n	80020d6 <__aeabi_i2d+0x4a>
 80020a8:	0002      	movs	r2, r0
 80020aa:	002e      	movs	r6, r5
 80020ac:	3215      	adds	r2, #21
 80020ae:	4096      	lsls	r6, r2
 80020b0:	220b      	movs	r2, #11
 80020b2:	1a12      	subs	r2, r2, r0
 80020b4:	40d5      	lsrs	r5, r2
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	0b2d      	lsrs	r5, r5, #12
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	e003      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020c0:	2400      	movs	r4, #0
 80020c2:	2300      	movs	r3, #0
 80020c4:	2500      	movs	r5, #0
 80020c6:	2600      	movs	r6, #0
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	432b      	orrs	r3, r5
 80020cc:	07e4      	lsls	r4, r4, #31
 80020ce:	4323      	orrs	r3, r4
 80020d0:	0030      	movs	r0, r6
 80020d2:	0019      	movs	r1, r3
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
 80020d6:	380b      	subs	r0, #11
 80020d8:	4085      	lsls	r5, r0
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	2600      	movs	r6, #0
 80020e0:	0b2d      	lsrs	r5, r5, #12
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	e7f0      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0000041e 	.word	0x0000041e

080020ec <__aeabi_ui2d>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	1e04      	subs	r4, r0, #0
 80020f0:	d010      	beq.n	8002114 <__aeabi_ui2d+0x28>
 80020f2:	f000 f821 	bl	8002138 <__clzsi2>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <__aeabi_ui2d+0x48>)
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	280a      	cmp	r0, #10
 80020fc:	dc11      	bgt.n	8002122 <__aeabi_ui2d+0x36>
 80020fe:	220b      	movs	r2, #11
 8002100:	0021      	movs	r1, r4
 8002102:	1a12      	subs	r2, r2, r0
 8002104:	40d1      	lsrs	r1, r2
 8002106:	3015      	adds	r0, #21
 8002108:	030a      	lsls	r2, r1, #12
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4084      	lsls	r4, r0
 800210e:	0b12      	lsrs	r2, r2, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	e001      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	4313      	orrs	r3, r2
 800211c:	0020      	movs	r0, r4
 800211e:	0019      	movs	r1, r3
 8002120:	bd10      	pop	{r4, pc}
 8002122:	0022      	movs	r2, r4
 8002124:	380b      	subs	r0, #11
 8002126:	4082      	lsls	r2, r0
 8002128:	055b      	lsls	r3, r3, #21
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	2400      	movs	r4, #0
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	e7f1      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002134:	0000041e 	.word	0x0000041e

08002138 <__clzsi2>:
 8002138:	211c      	movs	r1, #28
 800213a:	2301      	movs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4298      	cmp	r0, r3
 8002140:	d301      	bcc.n	8002146 <__clzsi2+0xe>
 8002142:	0c00      	lsrs	r0, r0, #16
 8002144:	3910      	subs	r1, #16
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	4298      	cmp	r0, r3
 800214a:	d301      	bcc.n	8002150 <__clzsi2+0x18>
 800214c:	0a00      	lsrs	r0, r0, #8
 800214e:	3908      	subs	r1, #8
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	4298      	cmp	r0, r3
 8002154:	d301      	bcc.n	800215a <__clzsi2+0x22>
 8002156:	0900      	lsrs	r0, r0, #4
 8002158:	3904      	subs	r1, #4
 800215a:	a202      	add	r2, pc, #8	; (adr r2, 8002164 <__clzsi2+0x2c>)
 800215c:	5c10      	ldrb	r0, [r2, r0]
 800215e:	1840      	adds	r0, r0, r1
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	02020304 	.word	0x02020304
 8002168:	01010101 	.word	0x01010101
	...

08002174 <Motor_forward>:
uint8_t Key_Card[5]  = {0x93, 0x59, 0x93, 0x6, 0x5f};
uint8_t Key_Card2[5] = {0xdc, 0x27, 0x87, 0x64, 0x18};


void Motor_forward(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_HIGH;
 8002178:	2390      	movs	r3, #144	; 0x90
 800217a:	05db      	lsls	r3, r3, #23
 800217c:	2201      	movs	r2, #1
 800217e:	2108      	movs	r1, #8
 8002180:	0018      	movs	r0, r3
 8002182:	f001 f926 	bl	80033d2 <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_LOW;
 8002186:	2390      	movs	r3, #144	; 0x90
 8002188:	05db      	lsls	r3, r3, #23
 800218a:	2200      	movs	r2, #0
 800218c:	2110      	movs	r1, #16
 800218e:	0018      	movs	r0, r3
 8002190:	f001 f91f 	bl	80033d2 <HAL_GPIO_WritePin>
}
 8002194:	46c0      	nop			; (mov r8, r8)
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <Motor_backward>:

void Motor_backward(void)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_LOW;
 800219e:	2390      	movs	r3, #144	; 0x90
 80021a0:	05db      	lsls	r3, r3, #23
 80021a2:	2200      	movs	r2, #0
 80021a4:	2108      	movs	r1, #8
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 f913 	bl	80033d2 <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_HIGH;
 80021ac:	2390      	movs	r3, #144	; 0x90
 80021ae:	05db      	lsls	r3, r3, #23
 80021b0:	2201      	movs	r2, #1
 80021b2:	2110      	movs	r1, #16
 80021b4:	0018      	movs	r0, r3
 80021b6:	f001 f90c 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <Motor_stop>:

void Motor_stop(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_HIGH;
 80021c4:	2390      	movs	r3, #144	; 0x90
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	2201      	movs	r2, #1
 80021ca:	2108      	movs	r1, #8
 80021cc:	0018      	movs	r0, r3
 80021ce:	f001 f900 	bl	80033d2 <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_HIGH;
 80021d2:	2390      	movs	r3, #144	; 0x90
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	2201      	movs	r2, #1
 80021d8:	2110      	movs	r1, #16
 80021da:	0018      	movs	r0, r3
 80021dc:	f001 f8f9 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <Flap_open>:

void Flap_open(void)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	af00      	add	r7, sp, #0
	Motor_forward();
 80021ea:	f7ff ffc3 	bl	8002174 <Motor_forward>
	while(GET_LIMIT_MAX)
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	2390      	movs	r3, #144	; 0x90
 80021f2:	05db      	lsls	r3, r3, #23
 80021f4:	2101      	movs	r1, #1
 80021f6:	0018      	movs	r0, r3
 80021f8:	f001 f8ce 	bl	8003398 <HAL_GPIO_ReadPin>
 80021fc:	1e03      	subs	r3, r0, #0
 80021fe:	d1f7      	bne.n	80021f0 <Flap_open+0xa>
	{

	}
	Motor_stop();
 8002200:	f7ff ffde 	bl	80021c0 <Motor_stop>
}
 8002204:	46c0      	nop			; (mov r8, r8)
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <Flap_close>:

void Flap_close(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
	Motor_backward();
 800220e:	f7ff ffc4 	bl	800219a <Motor_backward>
	while(GET_LIMIT_MIN)
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	2390      	movs	r3, #144	; 0x90
 8002216:	05db      	lsls	r3, r3, #23
 8002218:	2102      	movs	r1, #2
 800221a:	0018      	movs	r0, r3
 800221c:	f001 f8bc 	bl	8003398 <HAL_GPIO_ReadPin>
 8002220:	1e03      	subs	r3, r0, #0
 8002222:	d1f7      	bne.n	8002214 <Flap_close+0xa>
	{

	}
	Motor_stop();
 8002224:	f7ff ffcc 	bl	80021c0 <Motor_stop>
}
 8002228:	46c0      	nop			; (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <Flap_position>:

uint8_t Flap_position(void)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	af00      	add	r7, sp, #0
	if((GET_LIMIT_MIN == HIGH))
 8002232:	2390      	movs	r3, #144	; 0x90
 8002234:	05db      	lsls	r3, r3, #23
 8002236:	2102      	movs	r1, #2
 8002238:	0018      	movs	r0, r3
 800223a:	f001 f8ad 	bl	8003398 <HAL_GPIO_ReadPin>
 800223e:	0003      	movs	r3, r0
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <Flap_position+0x1a>
	{
		return OPEN;
 8002244:	2301      	movs	r3, #1
 8002246:	e01f      	b.n	8002288 <Flap_position+0x5a>
	}
	else if((GET_LIMIT_MAX == HIGH))
 8002248:	2390      	movs	r3, #144	; 0x90
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	2101      	movs	r1, #1
 800224e:	0018      	movs	r0, r3
 8002250:	f001 f8a2 	bl	8003398 <HAL_GPIO_ReadPin>
 8002254:	0003      	movs	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <Flap_position+0x30>
	{
		return CLOSE;
 800225a:	2300      	movs	r3, #0
 800225c:	e014      	b.n	8002288 <Flap_position+0x5a>
	}
	else if ((GET_LIMIT_MAX == HIGH) && (GET_LIMIT_MIN == HIGH))
 800225e:	2390      	movs	r3, #144	; 0x90
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	2101      	movs	r1, #1
 8002264:	0018      	movs	r0, r3
 8002266:	f001 f897 	bl	8003398 <HAL_GPIO_ReadPin>
 800226a:	0003      	movs	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10a      	bne.n	8002286 <Flap_position+0x58>
 8002270:	2390      	movs	r3, #144	; 0x90
 8002272:	05db      	lsls	r3, r3, #23
 8002274:	2102      	movs	r1, #2
 8002276:	0018      	movs	r0, r3
 8002278:	f001 f88e 	bl	8003398 <HAL_GPIO_ReadPin>
 800227c:	0003      	movs	r3, r0
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <Flap_position+0x58>
	{
		return OPEN;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <Flap_position+0x5a>
	}
	else
	{
		return OPEN;
 8002286:	2301      	movs	r3, #1
	}

}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <Card_detect>:

void Card_detect(void)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
	HAL_Delay(30*1000);
 8002296:	4b33      	ldr	r3, [pc, #204]	; (8002364 <Card_detect+0xd4>)
 8002298:	0018      	movs	r0, r3
 800229a:	f000 fe35 	bl	8002f08 <HAL_Delay>
	if(Flap_position() == OPEN)
 800229e:	f7ff ffc6 	bl	800222e <Flap_position>
 80022a2:	0003      	movs	r3, r0
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <Card_detect+0x1c>
	{
		Flap_close();
 80022a8:	f7ff ffaf 	bl	800220a <Flap_close>
	uint8_t str[16]; // Max_LEN = 16
	uint8_t status;

	while(1)
	{
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 80022ac:	2517      	movs	r5, #23
 80022ae:	197c      	adds	r4, r7, r5
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	0019      	movs	r1, r3
 80022b4:	2026      	movs	r0, #38	; 0x26
 80022b6:	f000 fc51 	bl	8002b5c <MFRC522_Request>
 80022ba:	0003      	movs	r3, r0
 80022bc:	7023      	strb	r3, [r4, #0]
		status = MFRC522_Anticoll(str);		//Take a collision, look up 5 bytes
 80022be:	197c      	adds	r4, r7, r5
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fc79 	bl	8002bba <MFRC522_Anticoll>
 80022c8:	0003      	movs	r3, r0
 80022ca:	7023      	strb	r3, [r4, #0]
		if(status == MI_OK)
 80022cc:	197b      	adds	r3, r7, r5
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d142      	bne.n	800235a <Card_detect+0xca>
		{
			if( ((str[0] == Key_Card[0]) &&
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	781a      	ldrb	r2, [r3, #0]
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <Card_detect+0xd8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d117      	bne.n	8002310 <Card_detect+0x80>
				(str[1] == Key_Card[1]) &&
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	785a      	ldrb	r2, [r3, #1]
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <Card_detect+0xd8>)
 80022e6:	785b      	ldrb	r3, [r3, #1]
			if( ((str[0] == Key_Card[0]) &&
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d111      	bne.n	8002310 <Card_detect+0x80>
				(str[2] == Key_Card[2]) &&
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	789a      	ldrb	r2, [r3, #2]
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <Card_detect+0xd8>)
 80022f2:	789b      	ldrb	r3, [r3, #2]
				(str[1] == Key_Card[1]) &&
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d10b      	bne.n	8002310 <Card_detect+0x80>
				(str[3] == Key_Card[3]) &&
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	78da      	ldrb	r2, [r3, #3]
 80022fc:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <Card_detect+0xd8>)
 80022fe:	78db      	ldrb	r3, [r3, #3]
				(str[2] == Key_Card[2]) &&
 8002300:	429a      	cmp	r2, r3
 8002302:	d105      	bne.n	8002310 <Card_detect+0x80>
				(str[4] == Key_Card[4])) ||
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	791a      	ldrb	r2, [r3, #4]
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <Card_detect+0xd8>)
 800230a:	791b      	ldrb	r3, [r3, #4]
				(str[3] == Key_Card[3]) &&
 800230c:	429a      	cmp	r2, r3
 800230e:	d01d      	beq.n	800234c <Card_detect+0xbc>

				((str[0] == Key_Card2[0]) &&
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b15      	ldr	r3, [pc, #84]	; (800236c <Card_detect+0xdc>)
 8002316:	781b      	ldrb	r3, [r3, #0]
				(str[4] == Key_Card[4])) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d11e      	bne.n	800235a <Card_detect+0xca>
				(str[1] == Key_Card2[1]) &&
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	785a      	ldrb	r2, [r3, #1]
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <Card_detect+0xdc>)
 8002322:	785b      	ldrb	r3, [r3, #1]
				((str[0] == Key_Card2[0]) &&
 8002324:	429a      	cmp	r2, r3
 8002326:	d118      	bne.n	800235a <Card_detect+0xca>
				(str[2] == Key_Card2[2]) &&
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	789a      	ldrb	r2, [r3, #2]
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <Card_detect+0xdc>)
 800232e:	789b      	ldrb	r3, [r3, #2]
				(str[1] == Key_Card2[1]) &&
 8002330:	429a      	cmp	r2, r3
 8002332:	d112      	bne.n	800235a <Card_detect+0xca>
				(str[3] == Key_Card2[3]) &&
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	78da      	ldrb	r2, [r3, #3]
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <Card_detect+0xdc>)
 800233a:	78db      	ldrb	r3, [r3, #3]
				(str[2] == Key_Card2[2]) &&
 800233c:	429a      	cmp	r2, r3
 800233e:	d10c      	bne.n	800235a <Card_detect+0xca>
				(str[4] == Key_Card2[4])))
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	791a      	ldrb	r2, [r3, #4]
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <Card_detect+0xdc>)
 8002346:	791b      	ldrb	r3, [r3, #4]
				(str[3] == Key_Card2[3]) &&
 8002348:	429a      	cmp	r2, r3
 800234a:	d106      	bne.n	800235a <Card_detect+0xca>
			{
				Flap_open();
 800234c:	f7ff ff4b 	bl	80021e6 <Flap_open>
				HAL_Delay(2*1000);
 8002350:	23fa      	movs	r3, #250	; 0xfa
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	0018      	movs	r0, r3
 8002356:	f000 fdd7 	bl	8002f08 <HAL_Delay>

			}

		}

		HAL_Delay(100);
 800235a:	2064      	movs	r0, #100	; 0x64
 800235c:	f000 fdd4 	bl	8002f08 <HAL_Delay>
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8002360:	e7a4      	b.n	80022ac <Card_detect+0x1c>
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	00007530 	.word	0x00007530
 8002368:	20000000 	.word	0x20000000
 800236c:	20000008 	.word	0x20000008

08002370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002374:	f000 fd64 	bl	8002e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002378:	f000 f842 	bl	8002400 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800237c:	f000 f8be 	bl	80024fc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002380:	f000 f87e 	bl	8002480 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8002384:	f000 fab0 	bl	80028e8 <MFRC522_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USER_LED_ON;
 8002388:	2390      	movs	r3, #144	; 0x90
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	2200      	movs	r2, #0
 800238e:	2120      	movs	r1, #32
 8002390:	0018      	movs	r0, r3
 8002392:	f001 f81e 	bl	80033d2 <HAL_GPIO_WritePin>
//  uint32_t Key_Card[5]  = {0x93, 0x59, 0x93, 0x6, 0x5f};
//  Flash_Write_Data(STORE_ADDRESS,Key_Card, 5);



  Card_detect();
 8002396:	f7ff ff7b 	bl	8002290 <Card_detect>

    /* USER CODE BEGIN 3 */



	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800239a:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <main+0x80>)
 800239c:	0019      	movs	r1, r3
 800239e:	2026      	movs	r0, #38	; 0x26
 80023a0:	f000 fbdc 	bl	8002b5c <MFRC522_Request>
 80023a4:	0003      	movs	r3, r0
 80023a6:	001a      	movs	r2, r3
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <main+0x84>)
 80023aa:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);		//Take a collision, look up 5 bytes
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <main+0x80>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f000 fc03 	bl	8002bba <MFRC522_Anticoll>
 80023b4:	0003      	movs	r3, r0
 80023b6:	001a      	movs	r2, r3
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <main+0x84>)
 80023ba:	701a      	strb	r2, [r3, #0]
	  if(status == MI_OK)
 80023bc:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <main+0x84>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d111      	bne.n	80023e8 <main+0x78>
	  {
		  static int i =0;
		  i++;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <main+0x88>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <main+0x88>)
 80023cc:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80023ce:	2390      	movs	r3, #144	; 0x90
 80023d0:	05db      	lsls	r3, r3, #23
 80023d2:	2120      	movs	r1, #32
 80023d4:	0018      	movs	r0, r3
 80023d6:	f001 f819 	bl	800340c <HAL_GPIO_TogglePin>
		  printf("index = %d\n",i);
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <main+0x88>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b07      	ldr	r3, [pc, #28]	; (80023fc <main+0x8c>)
 80023e0:	0011      	movs	r1, r2
 80023e2:	0018      	movs	r0, r3
 80023e4:	f002 fdbe 	bl	8004f64 <iprintf>

	  }

	  HAL_Delay(200);
 80023e8:	20c8      	movs	r0, #200	; 0xc8
 80023ea:	f000 fd8d 	bl	8002f08 <HAL_Delay>
	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 80023ee:	e7d4      	b.n	800239a <main+0x2a>
 80023f0:	20000268 	.word	0x20000268
 80023f4:	20000264 	.word	0x20000264
 80023f8:	20000278 	.word	0x20000278
 80023fc:	08007000 	.word	0x08007000

08002400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b091      	sub	sp, #68	; 0x44
 8002404:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002406:	2410      	movs	r4, #16
 8002408:	193b      	adds	r3, r7, r4
 800240a:	0018      	movs	r0, r3
 800240c:	2330      	movs	r3, #48	; 0x30
 800240e:	001a      	movs	r2, r3
 8002410:	2100      	movs	r1, #0
 8002412:	f002 fe03 	bl	800501c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002416:	003b      	movs	r3, r7
 8002418:	0018      	movs	r0, r3
 800241a:	2310      	movs	r3, #16
 800241c:	001a      	movs	r2, r3
 800241e:	2100      	movs	r1, #0
 8002420:	f002 fdfc 	bl	800501c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002424:	0021      	movs	r1, r4
 8002426:	187b      	adds	r3, r7, r1
 8002428:	2202      	movs	r2, #2
 800242a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800242c:	187b      	adds	r3, r7, r1
 800242e:	2201      	movs	r2, #1
 8002430:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002432:	187b      	adds	r3, r7, r1
 8002434:	2210      	movs	r2, #16
 8002436:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243e:	187b      	adds	r3, r7, r1
 8002440:	0018      	movs	r0, r3
 8002442:	f000 ffff 	bl	8003444 <HAL_RCC_OscConfig>
 8002446:	1e03      	subs	r3, r0, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800244a:	f000 f8bb 	bl	80025c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244e:	003b      	movs	r3, r7
 8002450:	2207      	movs	r2, #7
 8002452:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002454:	003b      	movs	r3, r7
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245a:	003b      	movs	r3, r7
 800245c:	2200      	movs	r2, #0
 800245e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002460:	003b      	movs	r3, r7
 8002462:	2200      	movs	r2, #0
 8002464:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002466:	003b      	movs	r3, r7
 8002468:	2100      	movs	r1, #0
 800246a:	0018      	movs	r0, r3
 800246c:	f001 fb04 	bl	8003a78 <HAL_RCC_ClockConfig>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d001      	beq.n	8002478 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002474:	f000 f8a6 	bl	80025c4 <Error_Handler>
  }
}
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	46bd      	mov	sp, r7
 800247c:	b011      	add	sp, #68	; 0x44
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <MX_SPI1_Init+0x74>)
 8002486:	4a1c      	ldr	r2, [pc, #112]	; (80024f8 <MX_SPI1_Init+0x78>)
 8002488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800248a:	4b1a      	ldr	r3, [pc, #104]	; (80024f4 <MX_SPI1_Init+0x74>)
 800248c:	2282      	movs	r2, #130	; 0x82
 800248e:	0052      	lsls	r2, r2, #1
 8002490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002492:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <MX_SPI1_Init+0x74>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002498:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <MX_SPI1_Init+0x74>)
 800249a:	22e0      	movs	r2, #224	; 0xe0
 800249c:	00d2      	lsls	r2, r2, #3
 800249e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024b6:	2210      	movs	r2, #16
 80024b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024ce:	2207      	movs	r2, #7
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024da:	2208      	movs	r2, #8
 80024dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <MX_SPI1_Init+0x74>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f001 fbed 	bl	8003cc0 <HAL_SPI_Init>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d001      	beq.n	80024ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80024ea:	f000 f86b 	bl	80025c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20000200 	.word	0x20000200
 80024f8:	40013000 	.word	0x40013000

080024fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b089      	sub	sp, #36	; 0x24
 8002500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002502:	240c      	movs	r4, #12
 8002504:	193b      	adds	r3, r7, r4
 8002506:	0018      	movs	r0, r3
 8002508:	2314      	movs	r3, #20
 800250a:	001a      	movs	r2, r3
 800250c:	2100      	movs	r1, #0
 800250e:	f002 fd85 	bl	800501c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <MX_GPIO_Init+0xc0>)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	4b29      	ldr	r3, [pc, #164]	; (80025bc <MX_GPIO_Init+0xc0>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0289      	lsls	r1, r1, #10
 800251c:	430a      	orrs	r2, r1
 800251e:	615a      	str	r2, [r3, #20]
 8002520:	4b26      	ldr	r3, [pc, #152]	; (80025bc <MX_GPIO_Init+0xc0>)
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	029b      	lsls	r3, r3, #10
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <MX_GPIO_Init+0xc0>)
 8002530:	695a      	ldr	r2, [r3, #20]
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <MX_GPIO_Init+0xc0>)
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	02c9      	lsls	r1, r1, #11
 8002538:	430a      	orrs	r2, r1
 800253a:	615a      	str	r2, [r3, #20]
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <MX_GPIO_Init+0xc0>)
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	02db      	lsls	r3, r3, #11
 8002544:	4013      	ands	r3, r2
 8002546:	607b      	str	r3, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W_led_Pin|M__Pin|M_A4_Pin|RST_Pin
 800254a:	23c7      	movs	r3, #199	; 0xc7
 800254c:	0099      	lsls	r1, r3, #2
 800254e:	2390      	movs	r3, #144	; 0x90
 8002550:	05db      	lsls	r3, r3, #23
 8002552:	2200      	movs	r2, #0
 8002554:	0018      	movs	r0, r3
 8002556:	f000 ff3c 	bl	80033d2 <HAL_GPIO_WritePin>
                          |CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 800255a:	2390      	movs	r3, #144	; 0x90
 800255c:	05db      	lsls	r3, r3, #23
 800255e:	2201      	movs	r2, #1
 8002560:	2120      	movs	r1, #32
 8002562:	0018      	movs	r0, r3
 8002564:	f000 ff35 	bl	80033d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : limit_max_Pin limit_min_Pin Read_mode_pb_Pin */
  GPIO_InitStruct.Pin = limit_max_Pin|limit_min_Pin|Read_mode_pb_Pin;
 8002568:	193b      	adds	r3, r7, r4
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <MX_GPIO_Init+0xc4>)
 800256c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002574:	193b      	adds	r3, r7, r4
 8002576:	2201      	movs	r2, #1
 8002578:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	193a      	adds	r2, r7, r4
 800257c:	2390      	movs	r3, #144	; 0x90
 800257e:	05db      	lsls	r3, r3, #23
 8002580:	0011      	movs	r1, r2
 8002582:	0018      	movs	r0, r3
 8002584:	f000 fd98 	bl	80030b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : W_led_Pin M__Pin M_A4_Pin USR_LED_Pin
                           RST_Pin CC_Pin */
  GPIO_InitStruct.Pin = W_led_Pin|M__Pin|M_A4_Pin|USR_LED_Pin
 8002588:	0021      	movs	r1, r4
 800258a:	187b      	adds	r3, r7, r1
 800258c:	22cf      	movs	r2, #207	; 0xcf
 800258e:	0092      	lsls	r2, r2, #2
 8002590:	601a      	str	r2, [r3, #0]
                          |RST_Pin|CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2201      	movs	r2, #1
 8002596:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	2200      	movs	r2, #0
 80025a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a4:	187a      	adds	r2, r7, r1
 80025a6:	2390      	movs	r3, #144	; 0x90
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 fd83 	bl	80030b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b009      	add	sp, #36	; 0x24
 80025b8:	bd90      	pop	{r4, r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	40021000 	.word	0x40021000
 80025c0:	00000403 	.word	0x00000403

080025c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025c8:	b672      	cpsid	i
}
 80025ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025cc:	e7fe      	b.n	80025cc <Error_Handler+0x8>
	...

080025d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d6:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <HAL_MspInit+0x44>)
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_MspInit+0x44>)
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	619a      	str	r2, [r3, #24]
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <HAL_MspInit+0x44>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	2201      	movs	r2, #1
 80025e8:	4013      	ands	r3, r2
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_MspInit+0x44>)
 80025f0:	69da      	ldr	r2, [r3, #28]
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <HAL_MspInit+0x44>)
 80025f4:	2180      	movs	r1, #128	; 0x80
 80025f6:	0549      	lsls	r1, r1, #21
 80025f8:	430a      	orrs	r2, r1
 80025fa:	61da      	str	r2, [r3, #28]
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_MspInit+0x44>)
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	055b      	lsls	r3, r3, #21
 8002604:	4013      	ands	r3, r2
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	46bd      	mov	sp, r7
 800260e:	b002      	add	sp, #8
 8002610:	bd80      	pop	{r7, pc}
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b08b      	sub	sp, #44	; 0x2c
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	2414      	movs	r4, #20
 8002622:	193b      	adds	r3, r7, r4
 8002624:	0018      	movs	r0, r3
 8002626:	2314      	movs	r3, #20
 8002628:	001a      	movs	r2, r3
 800262a:	2100      	movs	r1, #0
 800262c:	f002 fcf6 	bl	800501c <memset>
  if(hspi->Instance==SPI1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <HAL_SPI_MspInit+0xd8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d155      	bne.n	80026e6 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800263a:	4b2e      	ldr	r3, [pc, #184]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 800263c:	699a      	ldr	r2, [r3, #24]
 800263e:	4b2d      	ldr	r3, [pc, #180]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002640:	2180      	movs	r1, #128	; 0x80
 8002642:	0149      	lsls	r1, r1, #5
 8002644:	430a      	orrs	r2, r1
 8002646:	619a      	str	r2, [r3, #24]
 8002648:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	015b      	lsls	r3, r3, #5
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002656:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 800265c:	2180      	movs	r1, #128	; 0x80
 800265e:	0289      	lsls	r1, r1, #10
 8002660:	430a      	orrs	r2, r1
 8002662:	615a      	str	r2, [r3, #20]
 8002664:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002678:	2180      	movs	r1, #128	; 0x80
 800267a:	02c9      	lsls	r1, r1, #11
 800267c:	430a      	orrs	r2, r1
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_SPI_MspInit+0xdc>)
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	02db      	lsls	r3, r3, #11
 8002688:	4013      	ands	r3, r2
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800268e:	193b      	adds	r3, r7, r4
 8002690:	22c0      	movs	r2, #192	; 0xc0
 8002692:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002694:	193b      	adds	r3, r7, r4
 8002696:	2202      	movs	r2, #2
 8002698:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	193b      	adds	r3, r7, r4
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2203      	movs	r2, #3
 80026a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	193a      	adds	r2, r7, r4
 80026ae:	2390      	movs	r3, #144	; 0x90
 80026b0:	05db      	lsls	r3, r3, #23
 80026b2:	0011      	movs	r1, r2
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fcff 	bl	80030b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026ba:	0021      	movs	r1, r4
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2208      	movs	r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2202      	movs	r2, #2
 80026c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2203      	movs	r2, #3
 80026d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_SPI_MspInit+0xe0>)
 80026de:	0019      	movs	r1, r3
 80026e0:	0010      	movs	r0, r2
 80026e2:	f000 fce9 	bl	80030b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b00b      	add	sp, #44	; 0x2c
 80026ec:	bd90      	pop	{r4, r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	40013000 	.word	0x40013000
 80026f4:	40021000 	.word	0x40021000
 80026f8:	48000400 	.word	0x48000400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002720:	f000 fbd6 	bl	8002ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 800272c:	b5b0      	push	{r4, r5, r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af02      	add	r7, sp, #8
 8002732:	0002      	movs	r2, r0
 8002734:	1dfb      	adds	r3, r7, #7
 8002736:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	HAL_StatusTypeDef errorCode = 5U;
 8002738:	210f      	movs	r1, #15
 800273a:	187b      	adds	r3, r7, r1
 800273c:	2205      	movs	r2, #5
 800273e:	701a      	strb	r2, [r3, #0]

	errorCode = HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 8002740:	187c      	adds	r4, r7, r1
 8002742:	250e      	movs	r5, #14
 8002744:	197a      	adds	r2, r7, r5
 8002746:	1df9      	adds	r1, r7, #7
 8002748:	4806      	ldr	r0, [pc, #24]	; (8002764 <RC522_SPI_Transfer+0x38>)
 800274a:	2364      	movs	r3, #100	; 0x64
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2301      	movs	r3, #1
 8002750:	f001 fb6e 	bl	8003e30 <HAL_SPI_TransmitReceive>
 8002754:	0003      	movs	r3, r0
 8002756:	7023      	strb	r3, [r4, #0]
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 8002758:	197b      	adds	r3, r7, r5
 800275a:	781b      	ldrb	r3, [r3, #0]
}
 800275c:	0018      	movs	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	b004      	add	sp, #16
 8002762:	bdb0      	pop	{r4, r5, r7, pc}
 8002764:	20000200 	.word	0x20000200

08002768 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	0002      	movs	r2, r0
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	701a      	strb	r2, [r3, #0]
 8002774:	1dbb      	adds	r3, r7, #6
 8002776:	1c0a      	adds	r2, r1, #0
 8002778:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_RESET);
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	0099      	lsls	r1, r3, #2
 800277e:	2390      	movs	r3, #144	; 0x90
 8002780:	05db      	lsls	r3, r3, #23
 8002782:	2200      	movs	r2, #0
 8002784:	0018      	movs	r0, r3
 8002786:	f000 fe24 	bl	80033d2 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	227e      	movs	r2, #126	; 0x7e
 8002794:	4013      	ands	r3, r2
 8002796:	b2db      	uxtb	r3, r3
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff ffc7 	bl	800272c <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ffc2 	bl	800272c <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	2390      	movs	r3, #144	; 0x90
 80027ae:	05db      	lsls	r3, r3, #23
 80027b0:	2201      	movs	r2, #1
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fe0d 	bl	80033d2 <HAL_GPIO_WritePin>
}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80027c0:	b5b0      	push	{r4, r5, r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	701a      	strb	r2, [r3, #0]
	uint8_t val = 0x5;
 80027cc:	240f      	movs	r4, #15
 80027ce:	193b      	adds	r3, r7, r4
 80027d0:	2205      	movs	r2, #5
 80027d2:	701a      	strb	r2, [r3, #0]

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_RESET);
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	2390      	movs	r3, #144	; 0x90
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	2200      	movs	r2, #0
 80027de:	0018      	movs	r0, r3
 80027e0:	f000 fdf7 	bl	80033d2 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 80027e4:	1dfb      	adds	r3, r7, #7
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	b25b      	sxtb	r3, r3
 80027ec:	227e      	movs	r2, #126	; 0x7e
 80027ee:	4013      	ands	r3, r2
 80027f0:	b25b      	sxtb	r3, r3
 80027f2:	2280      	movs	r2, #128	; 0x80
 80027f4:	4252      	negs	r2, r2
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ff95 	bl	800272c <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8002802:	0025      	movs	r5, r4
 8002804:	193c      	adds	r4, r7, r4
 8002806:	2000      	movs	r0, #0
 8002808:	f7ff ff90 	bl	800272c <RC522_SPI_Transfer>
 800280c:	0003      	movs	r3, r0
 800280e:	7023      	strb	r3, [r4, #0]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	0099      	lsls	r1, r3, #2
 8002814:	2390      	movs	r3, #144	; 0x90
 8002816:	05db      	lsls	r3, r3, #23
 8002818:	2201      	movs	r2, #1
 800281a:	0018      	movs	r0, r3
 800281c:	f000 fdd9 	bl	80033d2 <HAL_GPIO_WritePin>
	return val;	
 8002820:	197b      	adds	r3, r7, r5
 8002822:	781b      	ldrb	r3, [r3, #0]
	
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bdb0      	pop	{r4, r5, r7, pc}

0800282c <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	0002      	movs	r2, r0
 8002834:	1dfb      	adds	r3, r7, #7
 8002836:	701a      	strb	r2, [r3, #0]
 8002838:	1dbb      	adds	r3, r7, #6
 800283a:	1c0a      	adds	r2, r1, #0
 800283c:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800283e:	250f      	movs	r5, #15
 8002840:	197c      	adds	r4, r7, r5
 8002842:	1dfb      	adds	r3, r7, #7
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	0018      	movs	r0, r3
 8002848:	f7ff ffba 	bl	80027c0 <Read_MFRC522>
 800284c:	0003      	movs	r3, r0
 800284e:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002850:	197a      	adds	r2, r7, r5
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4313      	orrs	r3, r2
 800285a:	b2da      	uxtb	r2, r3
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	0011      	movs	r1, r2
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff80 	bl	8002768 <Write_MFRC522>
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bdb0      	pop	{r4, r5, r7, pc}

08002870 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	0002      	movs	r2, r0
 8002878:	1dfb      	adds	r3, r7, #7
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	1dbb      	adds	r3, r7, #6
 800287e:	1c0a      	adds	r2, r1, #0
 8002880:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8002882:	250f      	movs	r5, #15
 8002884:	197c      	adds	r4, r7, r5
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff ff98 	bl	80027c0 <Read_MFRC522>
 8002890:	0003      	movs	r3, r0
 8002892:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002894:	1dbb      	adds	r3, r7, #6
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b25b      	sxtb	r3, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	b25b      	sxtb	r3, r3
 800289e:	197a      	adds	r2, r7, r5
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	b252      	sxtb	r2, r2
 80028a4:	4013      	ands	r3, r2
 80028a6:	b25b      	sxtb	r3, r3
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7ff ff59 	bl	8002768 <Write_MFRC522>
} 
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b004      	add	sp, #16
 80028bc:	bdb0      	pop	{r4, r5, r7, pc}

080028be <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 80028c2:	2014      	movs	r0, #20
 80028c4:	f7ff ff7c 	bl	80027c0 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 80028c8:	2103      	movs	r1, #3
 80028ca:	2014      	movs	r0, #20
 80028cc:	f7ff ffae 	bl	800282c <SetBitMask>
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80028da:	210f      	movs	r1, #15
 80028dc:	2001      	movs	r0, #1
 80028de:	f7ff ff43 	bl	8002768 <Write_MFRC522>
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);		//			A4
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	2390      	movs	r3, #144	; 0x90
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	2201      	movs	r2, #1
 80028f6:	0018      	movs	r0, r3
 80028f8:	f000 fd6b 	bl	80033d2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_PORT,RST_PIN,GPIO_PIN_SET);		// 			B0
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	0059      	lsls	r1, r3, #1
 8002900:	2390      	movs	r3, #144	; 0x90
 8002902:	05db      	lsls	r3, r3, #23
 8002904:	2201      	movs	r2, #1
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fd63 	bl	80033d2 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 800290c:	f7ff ffe3 	bl	80028d6 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8002910:	218d      	movs	r1, #141	; 0x8d
 8002912:	202a      	movs	r0, #42	; 0x2a
 8002914:	f7ff ff28 	bl	8002768 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002918:	213e      	movs	r1, #62	; 0x3e
 800291a:	202b      	movs	r0, #43	; 0x2b
 800291c:	f7ff ff24 	bl	8002768 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8002920:	211e      	movs	r1, #30
 8002922:	202d      	movs	r0, #45	; 0x2d
 8002924:	f7ff ff20 	bl	8002768 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002928:	2100      	movs	r1, #0
 800292a:	202c      	movs	r0, #44	; 0x2c
 800292c:	f7ff ff1c 	bl	8002768 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	2015      	movs	r0, #21
 8002934:	f7ff ff18 	bl	8002768 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8002938:	213d      	movs	r1, #61	; 0x3d
 800293a:	2011      	movs	r0, #17
 800293c:	f7ff ff14 	bl	8002768 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8002940:	f7ff ffbd 	bl	80028be <AntennaOn>
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 800294a:	b5b0      	push	{r4, r5, r7, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	0011      	movs	r1, r2
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	240f      	movs	r4, #15
 8002958:	193b      	adds	r3, r7, r4
 800295a:	1c02      	adds	r2, r0, #0
 800295c:	701a      	strb	r2, [r3, #0]
 800295e:	230e      	movs	r3, #14
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	1c0a      	adds	r2, r1, #0
 8002964:	701a      	strb	r2, [r3, #0]
    uint8_t status = MI_ERR;
 8002966:	231f      	movs	r3, #31
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2202      	movs	r2, #2
 800296c:	701a      	strb	r2, [r3, #0]
    uint8_t irqEn = 0x00;
 800296e:	211e      	movs	r1, #30
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
    uint8_t waitIRq = 0x00;
 8002976:	201d      	movs	r0, #29
 8002978:	183b      	adds	r3, r7, r0
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 800297e:	193b      	adds	r3, r7, r4
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b0c      	cmp	r3, #12
 8002984:	d008      	beq.n	8002998 <MFRC522_ToCard+0x4e>
 8002986:	2b0e      	cmp	r3, #14
 8002988:	d10f      	bne.n	80029aa <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 800298a:	187b      	adds	r3, r7, r1
 800298c:	2212      	movs	r2, #18
 800298e:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8002990:	183b      	adds	r3, r7, r0
 8002992:	2210      	movs	r2, #16
 8002994:	701a      	strb	r2, [r3, #0]
			break;
 8002996:	e009      	b.n	80029ac <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8002998:	231e      	movs	r3, #30
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2277      	movs	r2, #119	; 0x77
 800299e:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 80029a0:	231d      	movs	r3, #29
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	2230      	movs	r2, #48	; 0x30
 80029a6:	701a      	strb	r2, [r3, #0]
			break;
 80029a8:	e000      	b.n	80029ac <MFRC522_ToCard+0x62>
		}
		default:
			break;
 80029aa:	46c0      	nop			; (mov r8, r8)
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 80029ac:	231e      	movs	r3, #30
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	4252      	negs	r2, r2
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	0019      	movs	r1, r3
 80029bc:	2002      	movs	r0, #2
 80029be:	f7ff fed3 	bl	8002768 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 80029c2:	2180      	movs	r1, #128	; 0x80
 80029c4:	2004      	movs	r0, #4
 80029c6:	f7ff ff53 	bl	8002870 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	200a      	movs	r0, #10
 80029ce:	f7ff ff2d 	bl	800282c <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 80029d2:	2100      	movs	r1, #0
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff fec7 	bl	8002768 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e00a      	b.n	80029f6 <MFRC522_ToCard+0xac>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	18d3      	adds	r3, r2, r3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	0019      	movs	r1, r3
 80029ea:	2009      	movs	r0, #9
 80029ec:	f7ff febc 	bl	8002768 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	3301      	adds	r3, #1
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	230e      	movs	r3, #14
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d3ee      	bcc.n	80029e0 <MFRC522_ToCard+0x96>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8002a02:	240f      	movs	r4, #15
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	0019      	movs	r1, r3
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7ff feac 	bl	8002768 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8002a10:	193b      	adds	r3, r7, r4
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d103      	bne.n	8002a20 <MFRC522_ToCard+0xd6>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	200d      	movs	r0, #13
 8002a1c:	f7ff ff06 	bl	800282c <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8002a20:	23fa      	movs	r3, #250	; 0xfa
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002a26:	251c      	movs	r5, #28
 8002a28:	197c      	adds	r4, r7, r5
 8002a2a:	2004      	movs	r0, #4
 8002a2c:	f7ff fec8 	bl	80027c0 <Read_MFRC522>
 8002a30:	0003      	movs	r3, r0
 8002a32:	7023      	strb	r3, [r4, #0]
        i--;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <MFRC522_ToCard+0x112>
 8002a40:	197b      	adds	r3, r7, r5
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2201      	movs	r2, #1
 8002a46:	4013      	ands	r3, r2
 8002a48:	d108      	bne.n	8002a5c <MFRC522_ToCard+0x112>
 8002a4a:	197b      	adds	r3, r7, r5
 8002a4c:	221d      	movs	r2, #29
 8002a4e:	18ba      	adds	r2, r7, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0e4      	beq.n	8002a26 <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	200d      	movs	r0, #13
 8002a60:	f7ff ff06 	bl	8002870 <ClearBitMask>
	
    if (i != 0)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d100      	bne.n	8002a6c <MFRC522_ToCard+0x122>
 8002a6a:	e070      	b.n	8002b4e <MFRC522_ToCard+0x204>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8002a6c:	2006      	movs	r0, #6
 8002a6e:	f7ff fea7 	bl	80027c0 <Read_MFRC522>
 8002a72:	0003      	movs	r3, r0
 8002a74:	001a      	movs	r2, r3
 8002a76:	231b      	movs	r3, #27
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d164      	bne.n	8002b46 <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8002a7c:	211f      	movs	r1, #31
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8002a84:	231c      	movs	r3, #28
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	221e      	movs	r2, #30
 8002a8a:	18ba      	adds	r2, r7, r2
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	7812      	ldrb	r2, [r2, #0]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	001a      	movs	r2, r3
 8002a96:	2301      	movs	r3, #1
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d002      	beq.n	8002aa2 <MFRC522_ToCard+0x158>
            {   
				status = MI_NOTAGERR;			//??   
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b0c      	cmp	r3, #12
 8002aaa:	d150      	bne.n	8002b4e <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002aac:	251c      	movs	r5, #28
 8002aae:	197c      	adds	r4, r7, r5
 8002ab0:	200a      	movs	r0, #10
 8002ab2:	f7ff fe85 	bl	80027c0 <Read_MFRC522>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002aba:	200c      	movs	r0, #12
 8002abc:	f7ff fe80 	bl	80027c0 <Read_MFRC522>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	2017      	movs	r0, #23
 8002ac6:	183b      	adds	r3, r7, r0
 8002ac8:	2207      	movs	r2, #7
 8002aca:	400a      	ands	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8002ace:	0001      	movs	r1, r0
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <MFRC522_ToCard+0x1a4>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8002ad8:	197b      	adds	r3, r7, r5
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	00da      	lsls	r2, r3, #3
 8002ae0:	187b      	adds	r3, r7, r1
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	18d3      	adds	r3, r2, r3
 8002ae6:	001a      	movs	r2, r3
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e006      	b.n	8002afc <MFRC522_ToCard+0x1b2>
				}
                else
                {   
					*backLen = n*8;   
 8002aee:	231c      	movs	r3, #28
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	001a      	movs	r2, r3
 8002af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afa:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002afc:	221c      	movs	r2, #28
 8002afe:	18bb      	adds	r3, r7, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d102      	bne.n	8002b0c <MFRC522_ToCard+0x1c2>
                {   
					n = 1;    
 8002b06:	18bb      	adds	r3, r7, r2
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 8002b0c:	221c      	movs	r2, #28
 8002b0e:	18bb      	adds	r3, r7, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d902      	bls.n	8002b1c <MFRC522_ToCard+0x1d2>
                {   
					n = MAX_LEN;   
 8002b16:	18bb      	adds	r3, r7, r2
 8002b18:	2210      	movs	r2, #16
 8002b1a:	701a      	strb	r2, [r3, #0]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	e00a      	b.n	8002b38 <MFRC522_ToCard+0x1ee>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	18d4      	adds	r4, r2, r3
 8002b28:	2009      	movs	r0, #9
 8002b2a:	f7ff fe49 	bl	80027c0 <Read_MFRC522>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3301      	adds	r3, #1
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	231c      	movs	r3, #28
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d3ee      	bcc.n	8002b22 <MFRC522_ToCard+0x1d8>
 8002b44:	e003      	b.n	8002b4e <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8002b46:	231f      	movs	r3, #31
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8002b4e:	231f      	movs	r3, #31
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	781b      	ldrb	r3, [r3, #0]
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b008      	add	sp, #32
 8002b5a:	bdb0      	pop	{r4, r5, r7, pc}

08002b5c <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af02      	add	r7, sp, #8
 8002b62:	0002      	movs	r2, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	701a      	strb	r2, [r3, #0]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8002b6a:	2107      	movs	r1, #7
 8002b6c:	200d      	movs	r0, #13
 8002b6e:	f7ff fdfb 	bl	8002768 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	1dfa      	adds	r2, r7, #7
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002b7a:	250f      	movs	r5, #15
 8002b7c:	197c      	adds	r4, r7, r5
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	6839      	ldr	r1, [r7, #0]
 8002b82:	2308      	movs	r3, #8
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	0013      	movs	r3, r2
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	200c      	movs	r0, #12
 8002b8e:	f7ff fedc 	bl	800294a <MFRC522_ToCard>
 8002b92:	0003      	movs	r3, r0
 8002b94:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8002b96:	197b      	adds	r3, r7, r5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d102      	bne.n	8002ba4 <MFRC522_Request+0x48>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d003      	beq.n	8002bac <MFRC522_Request+0x50>
	{    
		status = MI_ERR;
 8002ba4:	230f      	movs	r3, #15
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2202      	movs	r2, #2
 8002baa:	701a      	strb	r2, [r3, #0]
	}
   
	return status;
 8002bac:	230f      	movs	r3, #15
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	781b      	ldrb	r3, [r3, #0]
}
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	b004      	add	sp, #16
 8002bb8:	bdb0      	pop	{r4, r5, r7, pc}

08002bba <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8002bba:	b5b0      	push	{r4, r5, r7, lr}
 8002bbc:	b086      	sub	sp, #24
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8002bc2:	230d      	movs	r3, #13
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	200d      	movs	r0, #13
 8002bce:	f7ff fdcb 	bl	8002768 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2293      	movs	r2, #147	; 0x93
 8002bd6:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	2220      	movs	r2, #32
 8002bde:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002be0:	250f      	movs	r5, #15
 8002be2:	197c      	adds	r4, r7, r5
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	2308      	movs	r3, #8
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	0013      	movs	r3, r2
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	200c      	movs	r0, #12
 8002bf4:	f7ff fea9 	bl	800294a <MFRC522_ToCard>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 8002bfc:	197b      	adds	r3, r7, r5
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d128      	bne.n	8002c56 <MFRC522_Anticoll+0x9c>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8002c04:	230e      	movs	r3, #14
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e010      	b.n	8002c30 <MFRC522_Anticoll+0x76>
		{   
		 	serNumCheck ^= serNum[i];
 8002c0e:	200e      	movs	r0, #14
 8002c10:	183b      	adds	r3, r7, r0
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	7819      	ldrb	r1, [r3, #0]
 8002c1a:	220d      	movs	r2, #13
 8002c1c:	18bb      	adds	r3, r7, r2
 8002c1e:	18ba      	adds	r2, r7, r2
 8002c20:	7812      	ldrb	r2, [r2, #0]
 8002c22:	404a      	eors	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 8002c26:	183b      	adds	r3, r7, r0
 8002c28:	781a      	ldrb	r2, [r3, #0]
 8002c2a:	183b      	adds	r3, r7, r0
 8002c2c:	3201      	adds	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
 8002c30:	220e      	movs	r2, #14
 8002c32:	18bb      	adds	r3, r7, r2
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d9e9      	bls.n	8002c0e <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 8002c3a:	18bb      	adds	r3, r7, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	18d3      	adds	r3, r2, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	220d      	movs	r2, #13
 8002c46:	18ba      	adds	r2, r7, r2
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d003      	beq.n	8002c56 <MFRC522_Anticoll+0x9c>
		{   
			status = MI_ERR;    
 8002c4e:	230f      	movs	r3, #15
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8002c56:	230f      	movs	r3, #15
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	781b      	ldrb	r3, [r3, #0]
} 
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b004      	add	sp, #16
 8002c62:	bdb0      	pop	{r4, r5, r7, pc}

08002c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  return 1;
 8002c68:	2301      	movs	r3, #1
}
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_kill>:

int _kill(int pid, int sig)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c7a:	f002 fa29 	bl	80050d0 <__errno>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	2216      	movs	r2, #22
 8002c82:	601a      	str	r2, [r3, #0]
  return -1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	425b      	negs	r3, r3
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_exit>:

void _exit (int status)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c98:	2301      	movs	r3, #1
 8002c9a:	425a      	negs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7ff ffe5 	bl	8002c70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ca6:	e7fe      	b.n	8002ca6 <_exit+0x16>

08002ca8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e00a      	b.n	8002cd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002cba:	e000      	b.n	8002cbe <_read+0x16>
 8002cbc:	bf00      	nop
 8002cbe:	0001      	movs	r1, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	60ba      	str	r2, [r7, #8]
 8002cc6:	b2ca      	uxtb	r2, r1
 8002cc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf0      	blt.n	8002cba <_read+0x12>
  }

  return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b006      	add	sp, #24
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	e009      	b.n	8002d08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	60ba      	str	r2, [r7, #8]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	e000      	b.n	8002d02 <_write+0x20>
 8002d00:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbf1      	blt.n	8002cf4 <_write+0x12>
  }
  return len;
 8002d10:	687b      	ldr	r3, [r7, #4]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b006      	add	sp, #24
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <_close>:

int _close(int file)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d22:	2301      	movs	r3, #1
 8002d24:	425b      	negs	r3, r3
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	0192      	lsls	r2, r2, #6
 8002d3e:	605a      	str	r2, [r3, #4]
  return 0;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <_isatty>:

int _isatty(int file)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b002      	add	sp, #8
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d7c:	4a14      	ldr	r2, [pc, #80]	; (8002dd0 <_sbrk+0x5c>)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <_sbrk+0x60>)
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <_sbrk+0x64>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_sbrk+0x64>)
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <_sbrk+0x68>)
 8002d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <_sbrk+0x64>)
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	18d3      	adds	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d207      	bcs.n	8002db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002da4:	f002 f994 	bl	80050d0 <__errno>
 8002da8:	0003      	movs	r3, r0
 8002daa:	220c      	movs	r2, #12
 8002dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	425b      	negs	r3, r3
 8002db2:	e009      	b.n	8002dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002db4:	4b08      	ldr	r3, [pc, #32]	; (8002dd8 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <_sbrk+0x64>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	18d2      	adds	r2, r2, r3
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <_sbrk+0x64>)
 8002dc4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b006      	add	sp, #24
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20002000 	.word	0x20002000
 8002dd4:	00000400 	.word	0x00000400
 8002dd8:	2000027c 	.word	0x2000027c
 8002ddc:	200003d0 	.word	0x200003d0

08002de0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dec:	480d      	ldr	r0, [pc, #52]	; (8002e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002df0:	f7ff fff6 	bl	8002de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df4:	480c      	ldr	r0, [pc, #48]	; (8002e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8002df6:	490d      	ldr	r1, [pc, #52]	; (8002e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df8:	4a0d      	ldr	r2, [pc, #52]	; (8002e30 <LoopForever+0xe>)
  movs r3, #0
 8002dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dfc:	e002      	b.n	8002e04 <LoopCopyDataInit>

08002dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e02:	3304      	adds	r3, #4

08002e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e08:	d3f9      	bcc.n	8002dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	; (8002e38 <LoopForever+0x16>)
  movs r3, #0
 8002e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e10:	e001      	b.n	8002e16 <LoopFillZerobss>

08002e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e14:	3204      	adds	r2, #4

08002e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e18:	d3fb      	bcc.n	8002e12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002e1a:	f002 f95f 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e1e:	f7ff faa7 	bl	8002370 <main>

08002e22 <LoopForever>:

LoopForever:
    b LoopForever
 8002e22:	e7fe      	b.n	8002e22 <LoopForever>
  ldr   r0, =_estack
 8002e24:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e2c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002e30:	080073f4 	.word	0x080073f4
  ldr r2, =_sbss
 8002e34:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002e38:	200003d0 	.word	0x200003d0

08002e3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e3c:	e7fe      	b.n	8002e3c <ADC1_IRQHandler>
	...

08002e40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_Init+0x24>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_Init+0x24>)
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002e50:	2003      	movs	r0, #3
 8002e52:	f000 f809 	bl	8002e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e56:	f7ff fbbb 	bl	80025d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_InitTick+0x5c>)
 8002e72:	681c      	ldr	r4, [r3, #0]
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_InitTick+0x60>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	0019      	movs	r1, r3
 8002e7a:	23fa      	movs	r3, #250	; 0xfa
 8002e7c:	0098      	lsls	r0, r3, #2
 8002e7e:	f7fd f95f 	bl	8000140 <__udivsi3>
 8002e82:	0003      	movs	r3, r0
 8002e84:	0019      	movs	r1, r3
 8002e86:	0020      	movs	r0, r4
 8002e88:	f7fd f95a 	bl	8000140 <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f905 	bl	800309e <HAL_SYSTICK_Config>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e00f      	b.n	8002ebc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d80b      	bhi.n	8002eba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 f8e2 	bl	8003074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_InitTick+0x64>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b003      	add	sp, #12
 8002ec2:	bd90      	pop	{r4, r7, pc}
 8002ec4:	20000010 	.word	0x20000010
 8002ec8:	20000018 	.word	0x20000018
 8002ecc:	20000014 	.word	0x20000014

08002ed0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_IncTick+0x1c>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	001a      	movs	r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_IncTick+0x20>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	18d2      	adds	r2, r2, r3
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <HAL_IncTick+0x20>)
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	20000018 	.word	0x20000018
 8002ef0:	20000280 	.word	0x20000280

08002ef4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ef8:	4b02      	ldr	r3, [pc, #8]	; (8002f04 <HAL_GetTick+0x10>)
 8002efa:	681b      	ldr	r3, [r3, #0]
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	20000280 	.word	0x20000280

08002f08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff fff0 	bl	8002ef4 <HAL_GetTick>
 8002f14:	0003      	movs	r3, r0
 8002f16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_Delay+0x44>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	001a      	movs	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	189b      	adds	r3, r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	f7ff ffe0 	bl	8002ef4 <HAL_GetTick>
 8002f34:	0002      	movs	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d8f7      	bhi.n	8002f30 <HAL_Delay+0x28>
  {
  }
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	20000018 	.word	0x20000018

08002f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	0002      	movs	r2, r0
 8002f58:	6039      	str	r1, [r7, #0]
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	1dfb      	adds	r3, r7, #7
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b7f      	cmp	r3, #127	; 0x7f
 8002f64:	d828      	bhi.n	8002fb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f66:	4a2f      	ldr	r2, [pc, #188]	; (8003024 <__NVIC_SetPriority+0xd4>)
 8002f68:	1dfb      	adds	r3, r7, #7
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b25b      	sxtb	r3, r3
 8002f6e:	089b      	lsrs	r3, r3, #2
 8002f70:	33c0      	adds	r3, #192	; 0xc0
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	589b      	ldr	r3, [r3, r2]
 8002f76:	1dfa      	adds	r2, r7, #7
 8002f78:	7812      	ldrb	r2, [r2, #0]
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	400a      	ands	r2, r1
 8002f80:	00d2      	lsls	r2, r2, #3
 8002f82:	21ff      	movs	r1, #255	; 0xff
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	43d2      	mvns	r2, r2
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	019b      	lsls	r3, r3, #6
 8002f92:	22ff      	movs	r2, #255	; 0xff
 8002f94:	401a      	ands	r2, r3
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	4003      	ands	r3, r0
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa4:	481f      	ldr	r0, [pc, #124]	; (8003024 <__NVIC_SetPriority+0xd4>)
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	33c0      	adds	r3, #192	; 0xc0
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fb6:	e031      	b.n	800301c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fb8:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <__NVIC_SetPriority+0xd8>)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	230f      	movs	r3, #15
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	3b08      	subs	r3, #8
 8002fc6:	089b      	lsrs	r3, r3, #2
 8002fc8:	3306      	adds	r3, #6
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	3304      	adds	r3, #4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1dfa      	adds	r2, r7, #7
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	2203      	movs	r2, #3
 8002fda:	400a      	ands	r2, r1
 8002fdc:	00d2      	lsls	r2, r2, #3
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	4091      	lsls	r1, r2
 8002fe2:	000a      	movs	r2, r1
 8002fe4:	43d2      	mvns	r2, r2
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	4003      	ands	r3, r0
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003000:	4809      	ldr	r0, [pc, #36]	; (8003028 <__NVIC_SetPriority+0xd8>)
 8003002:	1dfb      	adds	r3, r7, #7
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	001c      	movs	r4, r3
 8003008:	230f      	movs	r3, #15
 800300a:	4023      	ands	r3, r4
 800300c:	3b08      	subs	r3, #8
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	430a      	orrs	r2, r1
 8003012:	3306      	adds	r3, #6
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	18c3      	adds	r3, r0, r3
 8003018:	3304      	adds	r3, #4
 800301a:	601a      	str	r2, [r3, #0]
}
 800301c:	46c0      	nop			; (mov r8, r8)
 800301e:	46bd      	mov	sp, r7
 8003020:	b003      	add	sp, #12
 8003022:	bd90      	pop	{r4, r7, pc}
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	045b      	lsls	r3, r3, #17
 800303c:	429a      	cmp	r2, r3
 800303e:	d301      	bcc.n	8003044 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003040:	2301      	movs	r3, #1
 8003042:	e010      	b.n	8003066 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003044:	4b0a      	ldr	r3, [pc, #40]	; (8003070 <SysTick_Config+0x44>)
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	3a01      	subs	r2, #1
 800304a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304c:	2301      	movs	r3, #1
 800304e:	425b      	negs	r3, r3
 8003050:	2103      	movs	r1, #3
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff ff7c 	bl	8002f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003058:	4b05      	ldr	r3, [pc, #20]	; (8003070 <SysTick_Config+0x44>)
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <SysTick_Config+0x44>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	e000e010 	.word	0xe000e010

08003074 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	210f      	movs	r1, #15
 8003080:	187b      	adds	r3, r7, r1
 8003082:	1c02      	adds	r2, r0, #0
 8003084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	187b      	adds	r3, r7, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b25b      	sxtb	r3, r3
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f7ff ff5d 	bl	8002f50 <__NVIC_SetPriority>
}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	46bd      	mov	sp, r7
 800309a:	b004      	add	sp, #16
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7ff ffbf 	bl	800302c <SysTick_Config>
 80030ae:	0003      	movs	r3, r0
}
 80030b0:	0018      	movs	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	b002      	add	sp, #8
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030c6:	e14f      	b.n	8003368 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4091      	lsls	r1, r2
 80030d2:	000a      	movs	r2, r1
 80030d4:	4013      	ands	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d100      	bne.n	80030e0 <HAL_GPIO_Init+0x28>
 80030de:	e140      	b.n	8003362 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2203      	movs	r2, #3
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d005      	beq.n	80030f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2203      	movs	r2, #3
 80030f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d130      	bne.n	800315a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	409a      	lsls	r2, r3
 8003106:	0013      	movs	r3, r2
 8003108:	43da      	mvns	r2, r3
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	409a      	lsls	r2, r3
 800311a:	0013      	movs	r3, r2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800312e:	2201      	movs	r2, #1
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	409a      	lsls	r2, r3
 8003134:	0013      	movs	r3, r2
 8003136:	43da      	mvns	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4013      	ands	r3, r2
 800313c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	2201      	movs	r2, #1
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
 800314c:	0013      	movs	r3, r2
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2203      	movs	r2, #3
 8003160:	4013      	ands	r3, r2
 8003162:	2b03      	cmp	r3, #3
 8003164:	d017      	beq.n	8003196 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2203      	movs	r2, #3
 800319c:	4013      	ands	r3, r2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d123      	bne.n	80031ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	08da      	lsrs	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3208      	adds	r2, #8
 80031aa:	0092      	lsls	r2, r2, #2
 80031ac:	58d3      	ldr	r3, [r2, r3]
 80031ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2207      	movs	r2, #7
 80031b4:	4013      	ands	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	409a      	lsls	r2, r3
 80031bc:	0013      	movs	r3, r2
 80031be:	43da      	mvns	r2, r3
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4013      	ands	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	691a      	ldr	r2, [r3, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2107      	movs	r1, #7
 80031ce:	400b      	ands	r3, r1
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	409a      	lsls	r2, r3
 80031d4:	0013      	movs	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	6939      	ldr	r1, [r7, #16]
 80031e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	409a      	lsls	r2, r3
 80031f8:	0013      	movs	r3, r2
 80031fa:	43da      	mvns	r2, r3
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2203      	movs	r2, #3
 8003208:	401a      	ands	r2, r3
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	409a      	lsls	r2, r3
 8003210:	0013      	movs	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685a      	ldr	r2, [r3, #4]
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	029b      	lsls	r3, r3, #10
 8003226:	4013      	ands	r3, r2
 8003228:	d100      	bne.n	800322c <HAL_GPIO_Init+0x174>
 800322a:	e09a      	b.n	8003362 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322c:	4b54      	ldr	r3, [pc, #336]	; (8003380 <HAL_GPIO_Init+0x2c8>)
 800322e:	699a      	ldr	r2, [r3, #24]
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_GPIO_Init+0x2c8>)
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	619a      	str	r2, [r3, #24]
 8003238:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_GPIO_Init+0x2c8>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	2201      	movs	r2, #1
 800323e:	4013      	ands	r3, r2
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003244:	4a4f      	ldr	r2, [pc, #316]	; (8003384 <HAL_GPIO_Init+0x2cc>)
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	589b      	ldr	r3, [r3, r2]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2203      	movs	r2, #3
 8003256:	4013      	ands	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	220f      	movs	r2, #15
 800325c:	409a      	lsls	r2, r3
 800325e:	0013      	movs	r3, r2
 8003260:	43da      	mvns	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4013      	ands	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	2390      	movs	r3, #144	; 0x90
 800326c:	05db      	lsls	r3, r3, #23
 800326e:	429a      	cmp	r2, r3
 8003270:	d013      	beq.n	800329a <HAL_GPIO_Init+0x1e2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a44      	ldr	r2, [pc, #272]	; (8003388 <HAL_GPIO_Init+0x2d0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00d      	beq.n	8003296 <HAL_GPIO_Init+0x1de>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a43      	ldr	r2, [pc, #268]	; (800338c <HAL_GPIO_Init+0x2d4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d007      	beq.n	8003292 <HAL_GPIO_Init+0x1da>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a42      	ldr	r2, [pc, #264]	; (8003390 <HAL_GPIO_Init+0x2d8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d101      	bne.n	800328e <HAL_GPIO_Init+0x1d6>
 800328a:	2303      	movs	r3, #3
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x1e4>
 800328e:	2305      	movs	r3, #5
 8003290:	e004      	b.n	800329c <HAL_GPIO_Init+0x1e4>
 8003292:	2302      	movs	r3, #2
 8003294:	e002      	b.n	800329c <HAL_GPIO_Init+0x1e4>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_GPIO_Init+0x1e4>
 800329a:	2300      	movs	r3, #0
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	2103      	movs	r1, #3
 80032a0:	400a      	ands	r2, r1
 80032a2:	0092      	lsls	r2, r2, #2
 80032a4:	4093      	lsls	r3, r2
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ac:	4935      	ldr	r1, [pc, #212]	; (8003384 <HAL_GPIO_Init+0x2cc>)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	089b      	lsrs	r3, r3, #2
 80032b2:	3302      	adds	r3, #2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ba:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	43da      	mvns	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	035b      	lsls	r3, r3, #13
 80032d2:	4013      	ands	r3, r2
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032de:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032e4:	4b2b      	ldr	r3, [pc, #172]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	039b      	lsls	r3, r3, #14
 80032fc:	4013      	ands	r3, r2
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	43da      	mvns	r2, r3
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	029b      	lsls	r3, r3, #10
 8003326:	4013      	ands	r3, r2
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43da      	mvns	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4013      	ands	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	025b      	lsls	r3, r3, #9
 8003350:	4013      	ands	r3, r2
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800335c:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <HAL_GPIO_Init+0x2dc>)
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	40da      	lsrs	r2, r3
 8003370:	1e13      	subs	r3, r2, #0
 8003372:	d000      	beq.n	8003376 <HAL_GPIO_Init+0x2be>
 8003374:	e6a8      	b.n	80030c8 <HAL_GPIO_Init+0x10>
  } 
}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46c0      	nop			; (mov r8, r8)
 800337a:	46bd      	mov	sp, r7
 800337c:	b006      	add	sp, #24
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	40010000 	.word	0x40010000
 8003388:	48000400 	.word	0x48000400
 800338c:	48000800 	.word	0x48000800
 8003390:	48000c00 	.word	0x48000c00
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	000a      	movs	r2, r1
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	1cba      	adds	r2, r7, #2
 80033ac:	8812      	ldrh	r2, [r2, #0]
 80033ae:	4013      	ands	r3, r2
 80033b0:	d004      	beq.n	80033bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80033b2:	230f      	movs	r3, #15
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e003      	b.n	80033c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033bc:	230f      	movs	r3, #15
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80033c4:	230f      	movs	r3, #15
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
  }
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	0008      	movs	r0, r1
 80033dc:	0011      	movs	r1, r2
 80033de:	1cbb      	adds	r3, r7, #2
 80033e0:	1c02      	adds	r2, r0, #0
 80033e2:	801a      	strh	r2, [r3, #0]
 80033e4:	1c7b      	adds	r3, r7, #1
 80033e6:	1c0a      	adds	r2, r1, #0
 80033e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ea:	1c7b      	adds	r3, r7, #1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	1cbb      	adds	r3, r7, #2
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033fa:	e003      	b.n	8003404 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fc:	1cbb      	adds	r3, r7, #2
 80033fe:	881a      	ldrh	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	000a      	movs	r2, r1
 8003416:	1cbb      	adds	r3, r7, #2
 8003418:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003420:	1cbb      	adds	r3, r7, #2
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4013      	ands	r3, r2
 8003428:	041a      	lsls	r2, r3, #16
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	43db      	mvns	r3, r3
 800342e:	1cb9      	adds	r1, r7, #2
 8003430:	8809      	ldrh	r1, [r1, #0]
 8003432:	400b      	ands	r3, r1
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	619a      	str	r2, [r3, #24]
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b004      	add	sp, #16
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b088      	sub	sp, #32
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e301      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	4013      	ands	r3, r2
 800345e:	d100      	bne.n	8003462 <HAL_RCC_OscConfig+0x1e>
 8003460:	e08d      	b.n	800357e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003462:	4bc3      	ldr	r3, [pc, #780]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	220c      	movs	r2, #12
 8003468:	4013      	ands	r3, r2
 800346a:	2b04      	cmp	r3, #4
 800346c:	d00e      	beq.n	800348c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800346e:	4bc0      	ldr	r3, [pc, #768]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	220c      	movs	r2, #12
 8003474:	4013      	ands	r3, r2
 8003476:	2b08      	cmp	r3, #8
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x64>
 800347a:	4bbd      	ldr	r3, [pc, #756]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	2380      	movs	r3, #128	; 0x80
 8003480:	025b      	lsls	r3, r3, #9
 8003482:	401a      	ands	r2, r3
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	025b      	lsls	r3, r3, #9
 8003488:	429a      	cmp	r2, r3
 800348a:	d10d      	bne.n	80034a8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4bb8      	ldr	r3, [pc, #736]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	029b      	lsls	r3, r3, #10
 8003494:	4013      	ands	r3, r2
 8003496:	d100      	bne.n	800349a <HAL_RCC_OscConfig+0x56>
 8003498:	e070      	b.n	800357c <HAL_RCC_OscConfig+0x138>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d000      	beq.n	80034a4 <HAL_RCC_OscConfig+0x60>
 80034a2:	e06b      	b.n	800357c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e2d8      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_OscConfig+0x7c>
 80034b0:	4baf      	ldr	r3, [pc, #700]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4bae      	ldr	r3, [pc, #696]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	0249      	lsls	r1, r1, #9
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e02f      	b.n	8003520 <HAL_RCC_OscConfig+0xdc>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x9e>
 80034c8:	4ba9      	ldr	r3, [pc, #676]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4ba8      	ldr	r3, [pc, #672]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034ce:	49a9      	ldr	r1, [pc, #676]	; (8003774 <HAL_RCC_OscConfig+0x330>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	4ba6      	ldr	r3, [pc, #664]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4ba5      	ldr	r3, [pc, #660]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034da:	49a7      	ldr	r1, [pc, #668]	; (8003778 <HAL_RCC_OscConfig+0x334>)
 80034dc:	400a      	ands	r2, r1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e01e      	b.n	8003520 <HAL_RCC_OscConfig+0xdc>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b05      	cmp	r3, #5
 80034e8:	d10e      	bne.n	8003508 <HAL_RCC_OscConfig+0xc4>
 80034ea:	4ba1      	ldr	r3, [pc, #644]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	4ba0      	ldr	r3, [pc, #640]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	02c9      	lsls	r1, r1, #11
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	4b9d      	ldr	r3, [pc, #628]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b9c      	ldr	r3, [pc, #624]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	0249      	lsls	r1, r1, #9
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0xdc>
 8003508:	4b99      	ldr	r3, [pc, #612]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b98      	ldr	r3, [pc, #608]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800350e:	4999      	ldr	r1, [pc, #612]	; (8003774 <HAL_RCC_OscConfig+0x330>)
 8003510:	400a      	ands	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	4b96      	ldr	r3, [pc, #600]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b95      	ldr	r3, [pc, #596]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800351a:	4997      	ldr	r1, [pc, #604]	; (8003778 <HAL_RCC_OscConfig+0x334>)
 800351c:	400a      	ands	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d014      	beq.n	8003552 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7ff fce4 	bl	8002ef4 <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003532:	f7ff fcdf 	bl	8002ef4 <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b64      	cmp	r3, #100	; 0x64
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e28a      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003544:	4b8a      	ldr	r3, [pc, #552]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	029b      	lsls	r3, r3, #10
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0xee>
 8003550:	e015      	b.n	800357e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7ff fccf 	bl	8002ef4 <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7ff fcca 	bl	8002ef4 <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e275      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b80      	ldr	r3, [pc, #512]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	2380      	movs	r3, #128	; 0x80
 8003574:	029b      	lsls	r3, r3, #10
 8003576:	4013      	ands	r3, r2
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x118>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2202      	movs	r2, #2
 8003584:	4013      	ands	r3, r2
 8003586:	d100      	bne.n	800358a <HAL_RCC_OscConfig+0x146>
 8003588:	e069      	b.n	800365e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800358a:	4b79      	ldr	r3, [pc, #484]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	220c      	movs	r2, #12
 8003590:	4013      	ands	r3, r2
 8003592:	d00b      	beq.n	80035ac <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003594:	4b76      	ldr	r3, [pc, #472]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	220c      	movs	r2, #12
 800359a:	4013      	ands	r3, r2
 800359c:	2b08      	cmp	r3, #8
 800359e:	d11c      	bne.n	80035da <HAL_RCC_OscConfig+0x196>
 80035a0:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	025b      	lsls	r3, r3, #9
 80035a8:	4013      	ands	r3, r2
 80035aa:	d116      	bne.n	80035da <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d005      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d001      	beq.n	80035c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e24b      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c2:	4b6b      	ldr	r3, [pc, #428]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	22f8      	movs	r2, #248	; 0xf8
 80035c8:	4393      	bics	r3, r2
 80035ca:	0019      	movs	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00da      	lsls	r2, r3, #3
 80035d2:	4b67      	ldr	r3, [pc, #412]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035d8:	e041      	b.n	800365e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d024      	beq.n	800362c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e2:	4b63      	ldr	r3, [pc, #396]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b62      	ldr	r3, [pc, #392]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	430a      	orrs	r2, r1
 80035ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7ff fc81 	bl	8002ef4 <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f8:	f7ff fc7c 	bl	8002ef4 <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e227      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b59      	ldr	r3, [pc, #356]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2202      	movs	r2, #2
 8003610:	4013      	ands	r3, r2
 8003612:	d0f1      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b56      	ldr	r3, [pc, #344]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	22f8      	movs	r2, #248	; 0xf8
 800361a:	4393      	bics	r3, r2
 800361c:	0019      	movs	r1, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00da      	lsls	r2, r3, #3
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b4f      	ldr	r3, [pc, #316]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003632:	2101      	movs	r1, #1
 8003634:	438a      	bics	r2, r1
 8003636:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003638:	f7ff fc5c 	bl	8002ef4 <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003642:	f7ff fc57 	bl	8002ef4 <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e202      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2202      	movs	r2, #2
 800365a:	4013      	ands	r3, r2
 800365c:	d1f1      	bne.n	8003642 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2208      	movs	r2, #8
 8003664:	4013      	ands	r3, r2
 8003666:	d036      	beq.n	80036d6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d019      	beq.n	80036a4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003670:	4b3f      	ldr	r3, [pc, #252]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003676:	2101      	movs	r1, #1
 8003678:	430a      	orrs	r2, r1
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800367c:	f7ff fc3a 	bl	8002ef4 <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003686:	f7ff fc35 	bl	8002ef4 <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1e0      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003698:	4b35      	ldr	r3, [pc, #212]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	2202      	movs	r2, #2
 800369e:	4013      	ands	r3, r2
 80036a0:	d0f1      	beq.n	8003686 <HAL_RCC_OscConfig+0x242>
 80036a2:	e018      	b.n	80036d6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a4:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	438a      	bics	r2, r1
 80036ae:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7ff fc20 	bl	8002ef4 <HAL_GetTick>
 80036b4:	0003      	movs	r3, r0
 80036b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ba:	f7ff fc1b 	bl	8002ef4 <HAL_GetTick>
 80036be:	0002      	movs	r2, r0
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e1c6      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036cc:	4b28      	ldr	r3, [pc, #160]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d1f1      	bne.n	80036ba <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	4013      	ands	r3, r2
 80036de:	d100      	bne.n	80036e2 <HAL_RCC_OscConfig+0x29e>
 80036e0:	e0b4      	b.n	800384c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036e2:	201f      	movs	r0, #31
 80036e4:	183b      	adds	r3, r7, r0
 80036e6:	2200      	movs	r2, #0
 80036e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b21      	ldr	r3, [pc, #132]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	055b      	lsls	r3, r3, #21
 80036f2:	4013      	ands	r3, r2
 80036f4:	d110      	bne.n	8003718 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	4b1d      	ldr	r3, [pc, #116]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	0549      	lsls	r1, r1, #21
 8003700:	430a      	orrs	r2, r1
 8003702:	61da      	str	r2, [r3, #28]
 8003704:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003706:	69da      	ldr	r2, [r3, #28]
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	055b      	lsls	r3, r3, #21
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003712:	183b      	adds	r3, r7, r0
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_RCC_OscConfig+0x338>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4013      	ands	r3, r2
 8003722:	d11a      	bne.n	800375a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003724:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_OscConfig+0x338>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_OscConfig+0x338>)
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	0049      	lsls	r1, r1, #1
 800372e:	430a      	orrs	r2, r1
 8003730:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7ff fbdf 	bl	8002ef4 <HAL_GetTick>
 8003736:	0003      	movs	r3, r0
 8003738:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373c:	f7ff fbda 	bl	8002ef4 <HAL_GetTick>
 8003740:	0002      	movs	r2, r0
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	; 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e185      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800374e:	4b0b      	ldr	r3, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x338>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4013      	ands	r3, r2
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d10e      	bne.n	8003780 <HAL_RCC_OscConfig+0x33c>
 8003762:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003764:	6a1a      	ldr	r2, [r3, #32]
 8003766:	4b02      	ldr	r3, [pc, #8]	; (8003770 <HAL_RCC_OscConfig+0x32c>)
 8003768:	2101      	movs	r1, #1
 800376a:	430a      	orrs	r2, r1
 800376c:	621a      	str	r2, [r3, #32]
 800376e:	e035      	b.n	80037dc <HAL_RCC_OscConfig+0x398>
 8003770:	40021000 	.word	0x40021000
 8003774:	fffeffff 	.word	0xfffeffff
 8003778:	fffbffff 	.word	0xfffbffff
 800377c:	40007000 	.word	0x40007000
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x35e>
 8003788:	4bb6      	ldr	r3, [pc, #728]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	4bb5      	ldr	r3, [pc, #724]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800378e:	2101      	movs	r1, #1
 8003790:	438a      	bics	r2, r1
 8003792:	621a      	str	r2, [r3, #32]
 8003794:	4bb3      	ldr	r3, [pc, #716]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	4bb2      	ldr	r3, [pc, #712]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800379a:	2104      	movs	r1, #4
 800379c:	438a      	bics	r2, r1
 800379e:	621a      	str	r2, [r3, #32]
 80037a0:	e01c      	b.n	80037dc <HAL_RCC_OscConfig+0x398>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b05      	cmp	r3, #5
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0x380>
 80037aa:	4bae      	ldr	r3, [pc, #696]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	4bad      	ldr	r3, [pc, #692]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037b0:	2104      	movs	r1, #4
 80037b2:	430a      	orrs	r2, r1
 80037b4:	621a      	str	r2, [r3, #32]
 80037b6:	4bab      	ldr	r3, [pc, #684]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	4baa      	ldr	r3, [pc, #680]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037bc:	2101      	movs	r1, #1
 80037be:	430a      	orrs	r2, r1
 80037c0:	621a      	str	r2, [r3, #32]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0x398>
 80037c4:	4ba7      	ldr	r3, [pc, #668]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	4ba6      	ldr	r3, [pc, #664]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	438a      	bics	r2, r1
 80037ce:	621a      	str	r2, [r3, #32]
 80037d0:	4ba4      	ldr	r3, [pc, #656]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037d2:	6a1a      	ldr	r2, [r3, #32]
 80037d4:	4ba3      	ldr	r3, [pc, #652]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80037d6:	2104      	movs	r1, #4
 80037d8:	438a      	bics	r2, r1
 80037da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d014      	beq.n	800380e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e4:	f7ff fb86 	bl	8002ef4 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037ec:	e009      	b.n	8003802 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7ff fb81 	bl	8002ef4 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	4a9b      	ldr	r2, [pc, #620]	; (8003a68 <HAL_RCC_OscConfig+0x624>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e12b      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	4b98      	ldr	r3, [pc, #608]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x3aa>
 800380c:	e013      	b.n	8003836 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7ff fb71 	bl	8002ef4 <HAL_GetTick>
 8003812:	0003      	movs	r3, r0
 8003814:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003816:	e009      	b.n	800382c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003818:	f7ff fb6c 	bl	8002ef4 <HAL_GetTick>
 800381c:	0002      	movs	r2, r0
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	4a91      	ldr	r2, [pc, #580]	; (8003a68 <HAL_RCC_OscConfig+0x624>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e116      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	2202      	movs	r2, #2
 8003832:	4013      	ands	r3, r2
 8003834:	d1f0      	bne.n	8003818 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003836:	231f      	movs	r3, #31
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d105      	bne.n	800384c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003840:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003842:	69da      	ldr	r2, [r3, #28]
 8003844:	4b87      	ldr	r3, [pc, #540]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003846:	4989      	ldr	r1, [pc, #548]	; (8003a6c <HAL_RCC_OscConfig+0x628>)
 8003848:	400a      	ands	r2, r1
 800384a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2210      	movs	r2, #16
 8003852:	4013      	ands	r3, r2
 8003854:	d063      	beq.n	800391e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d12a      	bne.n	80038b4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800385e:	4b81      	ldr	r3, [pc, #516]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003862:	4b80      	ldr	r3, [pc, #512]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003864:	2104      	movs	r1, #4
 8003866:	430a      	orrs	r2, r1
 8003868:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800386a:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800386c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800386e:	4b7d      	ldr	r3, [pc, #500]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003870:	2101      	movs	r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7ff fb3d 	bl	8002ef4 <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003880:	f7ff fb38 	bl	8002ef4 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0e3      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003892:	4b74      	ldr	r3, [pc, #464]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2202      	movs	r2, #2
 8003898:	4013      	ands	r3, r2
 800389a:	d0f1      	beq.n	8003880 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800389c:	4b71      	ldr	r3, [pc, #452]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	22f8      	movs	r2, #248	; 0xf8
 80038a2:	4393      	bics	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	00da      	lsls	r2, r3, #3
 80038ac:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038ae:	430a      	orrs	r2, r1
 80038b0:	635a      	str	r2, [r3, #52]	; 0x34
 80038b2:	e034      	b.n	800391e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	3305      	adds	r3, #5
 80038ba:	d111      	bne.n	80038e0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80038bc:	4b69      	ldr	r3, [pc, #420]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c0:	4b68      	ldr	r3, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038c2:	2104      	movs	r1, #4
 80038c4:	438a      	bics	r2, r1
 80038c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038cc:	22f8      	movs	r2, #248	; 0xf8
 80038ce:	4393      	bics	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	00da      	lsls	r2, r3, #3
 80038d8:	4b62      	ldr	r3, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038da:	430a      	orrs	r2, r1
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34
 80038de:	e01e      	b.n	800391e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80038e0:	4b60      	ldr	r3, [pc, #384]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e4:	4b5f      	ldr	r3, [pc, #380]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038e6:	2104      	movs	r1, #4
 80038e8:	430a      	orrs	r2, r1
 80038ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80038ec:	4b5d      	ldr	r3, [pc, #372]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038f0:	4b5c      	ldr	r3, [pc, #368]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7ff fafc 	bl	8002ef4 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003902:	f7ff faf7 	bl	8002ef4 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e0a2      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003914:	4b53      	ldr	r3, [pc, #332]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	2202      	movs	r2, #2
 800391a:	4013      	ands	r3, r2
 800391c:	d1f1      	bne.n	8003902 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d100      	bne.n	8003928 <HAL_RCC_OscConfig+0x4e4>
 8003926:	e097      	b.n	8003a58 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003928:	4b4e      	ldr	r3, [pc, #312]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	220c      	movs	r2, #12
 800392e:	4013      	ands	r3, r2
 8003930:	2b08      	cmp	r3, #8
 8003932:	d100      	bne.n	8003936 <HAL_RCC_OscConfig+0x4f2>
 8003934:	e06b      	b.n	8003a0e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d14c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b49      	ldr	r3, [pc, #292]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4b48      	ldr	r3, [pc, #288]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003944:	494a      	ldr	r1, [pc, #296]	; (8003a70 <HAL_RCC_OscConfig+0x62c>)
 8003946:	400a      	ands	r2, r1
 8003948:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394a:	f7ff fad3 	bl	8002ef4 <HAL_GetTick>
 800394e:	0003      	movs	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003954:	f7ff face 	bl	8002ef4 <HAL_GetTick>
 8003958:	0002      	movs	r2, r0
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e079      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	4b3f      	ldr	r3, [pc, #252]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	049b      	lsls	r3, r3, #18
 800396e:	4013      	ands	r3, r2
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003972:	4b3c      	ldr	r3, [pc, #240]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	220f      	movs	r2, #15
 8003978:	4393      	bics	r3, r2
 800397a:	0019      	movs	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003980:	4b38      	ldr	r3, [pc, #224]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003982:	430a      	orrs	r2, r1
 8003984:	62da      	str	r2, [r3, #44]	; 0x2c
 8003986:	4b37      	ldr	r3, [pc, #220]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_RCC_OscConfig+0x630>)
 800398c:	4013      	ands	r3, r2
 800398e:	0019      	movs	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	431a      	orrs	r2, r3
 800399a:	4b32      	ldr	r3, [pc, #200]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a0:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b2f      	ldr	r3, [pc, #188]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	0449      	lsls	r1, r1, #17
 80039aa:	430a      	orrs	r2, r1
 80039ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7ff faa1 	bl	8002ef4 <HAL_GetTick>
 80039b2:	0003      	movs	r3, r0
 80039b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b8:	f7ff fa9c 	bl	8002ef4 <HAL_GetTick>
 80039bc:	0002      	movs	r2, r0
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e047      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	2380      	movs	r3, #128	; 0x80
 80039d0:	049b      	lsls	r3, r3, #18
 80039d2:	4013      	ands	r3, r2
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x574>
 80039d6:	e03f      	b.n	8003a58 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d8:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b21      	ldr	r3, [pc, #132]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 80039de:	4924      	ldr	r1, [pc, #144]	; (8003a70 <HAL_RCC_OscConfig+0x62c>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e4:	f7ff fa86 	bl	8002ef4 <HAL_GetTick>
 80039e8:	0003      	movs	r3, r0
 80039ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ee:	f7ff fa81 	bl	8002ef4 <HAL_GetTick>
 80039f2:	0002      	movs	r2, r0
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e02c      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a00:	4b18      	ldr	r3, [pc, #96]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	2380      	movs	r3, #128	; 0x80
 8003a06:	049b      	lsls	r3, r3, #18
 8003a08:	4013      	ands	r3, r2
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x5aa>
 8003a0c:	e024      	b.n	8003a58 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e01f      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003a1a:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003a20:	4b10      	ldr	r3, [pc, #64]	; (8003a64 <HAL_RCC_OscConfig+0x620>)
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	025b      	lsls	r3, r3, #9
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d10e      	bne.n	8003a54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	220f      	movs	r2, #15
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d107      	bne.n	8003a54 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	23f0      	movs	r3, #240	; 0xf0
 8003a48:	039b      	lsls	r3, r3, #14
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	40021000 	.word	0x40021000
 8003a68:	00001388 	.word	0x00001388
 8003a6c:	efffffff 	.word	0xefffffff
 8003a70:	feffffff 	.word	0xfeffffff
 8003a74:	ffc2ffff 	.word	0xffc2ffff

08003a78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e0b3      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2201      	movs	r2, #1
 8003a92:	4013      	ands	r3, r2
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d911      	bls.n	8003abe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4393      	bics	r3, r2
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	4b55      	ldr	r3, [pc, #340]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e09a      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2204      	movs	r2, #4
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d006      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4b4a      	ldr	r3, [pc, #296]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003ad8:	21e0      	movs	r1, #224	; 0xe0
 8003ada:	00c9      	lsls	r1, r1, #3
 8003adc:	430a      	orrs	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae0:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	22f0      	movs	r2, #240	; 0xf0
 8003ae6:	4393      	bics	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	4b44      	ldr	r3, [pc, #272]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003af0:	430a      	orrs	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2201      	movs	r2, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	d040      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	4b3e      	ldr	r3, [pc, #248]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	029b      	lsls	r3, r3, #10
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d114      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06e      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	049b      	lsls	r3, r3, #18
 8003b26:	4013      	ands	r3, r2
 8003b28:	d108      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e062      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b34      	ldr	r3, [pc, #208]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e05b      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	4b30      	ldr	r3, [pc, #192]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2203      	movs	r2, #3
 8003b42:	4393      	bics	r3, r2
 8003b44:	0019      	movs	r1, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	4b2d      	ldr	r3, [pc, #180]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7ff f9d0 	bl	8002ef4 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b58:	e009      	b.n	8003b6e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b5a:	f7ff f9cb 	bl	8002ef4 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	4a27      	ldr	r2, [pc, #156]	; (8003c04 <HAL_RCC_ClockConfig+0x18c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e042      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	220c      	movs	r2, #12
 8003b74:	401a      	ands	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1ec      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d211      	bcs.n	8003bb2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	4393      	bics	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x184>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e020      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003bbc:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <HAL_RCC_ClockConfig+0x190>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	0019      	movs	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bd0:	f000 f820 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bd4:	0001      	movs	r1, r0
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x188>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	220f      	movs	r2, #15
 8003bde:	4013      	ands	r3, r2
 8003be0:	4a0a      	ldr	r2, [pc, #40]	; (8003c0c <HAL_RCC_ClockConfig+0x194>)
 8003be2:	5cd3      	ldrb	r3, [r2, r3]
 8003be4:	000a      	movs	r2, r1
 8003be6:	40da      	lsrs	r2, r3
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCC_ClockConfig+0x198>)
 8003bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bec:	2003      	movs	r0, #3
 8003bee:	f7ff f93b 	bl	8002e68 <HAL_InitTick>
  
  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b004      	add	sp, #16
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40021000 	.word	0x40021000
 8003c04:	00001388 	.word	0x00001388
 8003c08:	fffff8ff 	.word	0xfffff8ff
 8003c0c:	0800704c 	.word	0x0800704c
 8003c10:	20000010 	.word	0x20000010

08003c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	220c      	movs	r2, #12
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d002      	beq.n	8003c44 <HAL_RCC_GetSysClockFreq+0x30>
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d003      	beq.n	8003c4a <HAL_RCC_GetSysClockFreq+0x36>
 8003c42:	e02c      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c46:	613b      	str	r3, [r7, #16]
      break;
 8003c48:	e02c      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0c9b      	lsrs	r3, r3, #18
 8003c4e:	220f      	movs	r2, #15
 8003c50:	4013      	ands	r3, r2
 8003c52:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003c58:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	4013      	ands	r3, r2
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
 8003c64:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	025b      	lsls	r3, r3, #9
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d009      	beq.n	8003c84 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	4810      	ldr	r0, [pc, #64]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c74:	f7fc fa64 	bl	8000140 <__udivsi3>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4353      	muls	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	e009      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	000a      	movs	r2, r1
 8003c88:	0152      	lsls	r2, r2, #5
 8003c8a:	1a52      	subs	r2, r2, r1
 8003c8c:	0193      	lsls	r3, r2, #6
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	185b      	adds	r3, r3, r1
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	613b      	str	r3, [r7, #16]
      break;
 8003c9c:	e002      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c9e:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ca0:	613b      	str	r3, [r7, #16]
      break;
 8003ca2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ca4:	693b      	ldr	r3, [r7, #16]
}
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b006      	add	sp, #24
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	0800705c 	.word	0x0800705c
 8003cbc:	0800706c 	.word	0x0800706c

08003cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e0a8      	b.n	8003e24 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	2382      	movs	r3, #130	; 0x82
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d009      	beq.n	8003cfa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	61da      	str	r2, [r3, #28]
 8003cec:	e005      	b.n	8003cfa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	225d      	movs	r2, #93	; 0x5d
 8003d04:	5c9b      	ldrb	r3, [r3, r2]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	225c      	movs	r2, #92	; 0x5c
 8003d10:	2100      	movs	r1, #0
 8003d12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	0018      	movs	r0, r3
 8003d18:	f7fe fc7e 	bl	8002618 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	225d      	movs	r2, #93	; 0x5d
 8003d20:	2102      	movs	r1, #2
 8003d22:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2140      	movs	r1, #64	; 0x40
 8003d30:	438a      	bics	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	23e0      	movs	r3, #224	; 0xe0
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d902      	bls.n	8003d46 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e002      	b.n	8003d4c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	015b      	lsls	r3, r3, #5
 8003d4a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	23f0      	movs	r3, #240	; 0xf0
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d008      	beq.n	8003d6a <HAL_SPI_Init+0xaa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	23e0      	movs	r3, #224	; 0xe0
 8003d5e:	00db      	lsls	r3, r3, #3
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d002      	beq.n	8003d6a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	2382      	movs	r3, #130	; 0x82
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	401a      	ands	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6899      	ldr	r1, [r3, #8]
 8003d78:	2384      	movs	r3, #132	; 0x84
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2102      	movs	r1, #2
 8003d86:	400b      	ands	r3, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2101      	movs	r1, #1
 8003d90:	400b      	ands	r3, r1
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6999      	ldr	r1, [r3, #24]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	400b      	ands	r3, r1
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2138      	movs	r1, #56	; 0x38
 8003da6:	400b      	ands	r3, r1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	2180      	movs	r1, #128	; 0x80
 8003db0:	400b      	ands	r3, r1
 8003db2:	431a      	orrs	r2, r3
 8003db4:	0011      	movs	r1, r2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	0c1b      	lsrs	r3, r3, #16
 8003dce:	2204      	movs	r2, #4
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2110      	movs	r1, #16
 8003dd8:	400b      	ands	r3, r1
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de0:	2108      	movs	r1, #8
 8003de2:	400b      	ands	r3, r1
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68d9      	ldr	r1, [r3, #12]
 8003dea:	23f0      	movs	r3, #240	; 0xf0
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	400b      	ands	r3, r1
 8003df0:	431a      	orrs	r2, r3
 8003df2:	0011      	movs	r1, r2
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	015b      	lsls	r3, r3, #5
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4907      	ldr	r1, [pc, #28]	; (8003e2c <HAL_SPI_Init+0x16c>)
 8003e10:	400a      	ands	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	225d      	movs	r2, #93	; 0x5d
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b004      	add	sp, #16
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fffff7ff 	.word	0xfffff7ff

08003e30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	001a      	movs	r2, r3
 8003e3e:	1cbb      	adds	r3, r7, #2
 8003e40:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003e42:	2301      	movs	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003e46:	2323      	movs	r3, #35	; 0x23
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	225c      	movs	r2, #92	; 0x5c
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_SPI_TransmitReceive+0x2c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e1c4      	b.n	80041e6 <HAL_SPI_TransmitReceive+0x3b6>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	225c      	movs	r2, #92	; 0x5c
 8003e60:	2101      	movs	r1, #1
 8003e62:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e64:	f7ff f846 	bl	8002ef4 <HAL_GetTick>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e6c:	201b      	movs	r0, #27
 8003e6e:	183b      	adds	r3, r7, r0
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	215d      	movs	r1, #93	; 0x5d
 8003e74:	5c52      	ldrb	r2, [r2, r1]
 8003e76:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003e7e:	2312      	movs	r3, #18
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	1cba      	adds	r2, r7, #2
 8003e84:	8812      	ldrh	r2, [r2, #0]
 8003e86:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e88:	183b      	adds	r3, r7, r0
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d011      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x84>
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	2382      	movs	r3, #130	; 0x82
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d107      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_SPI_TransmitReceive+0x7a>
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d004      	beq.n	8003eb4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8003eaa:	2323      	movs	r3, #35	; 0x23
 8003eac:	18fb      	adds	r3, r7, r3
 8003eae:	2202      	movs	r2, #2
 8003eb0:	701a      	strb	r2, [r3, #0]
    goto error;
 8003eb2:	e191      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x98>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_SPI_TransmitReceive+0x98>
 8003ec0:	1cbb      	adds	r3, r7, #2
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2323      	movs	r3, #35	; 0x23
 8003eca:	18fb      	adds	r3, r7, r3
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
    goto error;
 8003ed0:	e182      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	225d      	movs	r2, #93	; 0x5d
 8003ed6:	5c9b      	ldrb	r3, [r3, r2]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d003      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	225d      	movs	r2, #93	; 0x5d
 8003ee2:	2105      	movs	r1, #5
 8003ee4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1cba      	adds	r2, r7, #2
 8003ef6:	2146      	movs	r1, #70	; 0x46
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1cba      	adds	r2, r7, #2
 8003f00:	2144      	movs	r1, #68	; 0x44
 8003f02:	8812      	ldrh	r2, [r2, #0]
 8003f04:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1cba      	adds	r2, r7, #2
 8003f10:	8812      	ldrh	r2, [r2, #0]
 8003f12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	1cba      	adds	r2, r7, #2
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	23e0      	movs	r3, #224	; 0xe0
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d908      	bls.n	8003f46 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	49ac      	ldr	r1, [pc, #688]	; (80041f0 <HAL_SPI_TransmitReceive+0x3c0>)
 8003f40:	400a      	ands	r2, r1
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e008      	b.n	8003f58 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2180      	movs	r1, #128	; 0x80
 8003f52:	0149      	lsls	r1, r1, #5
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2240      	movs	r2, #64	; 0x40
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d007      	beq.n	8003f76 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2140      	movs	r1, #64	; 0x40
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	23e0      	movs	r3, #224	; 0xe0
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d800      	bhi.n	8003f84 <HAL_SPI_TransmitReceive+0x154>
 8003f82:	e083      	b.n	800408c <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x168>
 8003f8c:	2312      	movs	r3, #18
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	881b      	ldrh	r3, [r3, #0]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d000      	beq.n	8003f98 <HAL_SPI_TransmitReceive+0x168>
 8003f96:	e06d      	b.n	8004074 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9c:	881a      	ldrh	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa8:	1c9a      	adds	r2, r3, #2
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fbc:	e05a      	b.n	8004074 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d11b      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x1d4>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_SPI_TransmitReceive+0x1d4>
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d113      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	1c9a      	adds	r2, r3, #2
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	2b01      	cmp	r3, #1
 8004010:	d11c      	bne.n	800404c <HAL_SPI_TransmitReceive+0x21c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2246      	movs	r2, #70	; 0x46
 8004016:	5a9b      	ldrh	r3, [r3, r2]
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	b292      	uxth	r2, r2
 800402a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	1c9a      	adds	r2, r3, #2
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2246      	movs	r2, #70	; 0x46
 800403a:	5a9b      	ldrh	r3, [r3, r2]
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b299      	uxth	r1, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2246      	movs	r2, #70	; 0x46
 8004046:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800404c:	f7fe ff52 	bl	8002ef4 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004058:	429a      	cmp	r2, r3
 800405a:	d80b      	bhi.n	8004074 <HAL_SPI_TransmitReceive+0x244>
 800405c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405e:	3301      	adds	r3, #1
 8004060:	d008      	beq.n	8004074 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8004062:	2323      	movs	r3, #35	; 0x23
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2203      	movs	r2, #3
 8004068:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	225d      	movs	r2, #93	; 0x5d
 800406e:	2101      	movs	r1, #1
 8004070:	5499      	strb	r1, [r3, r2]
        goto error;
 8004072:	e0b1      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d19f      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x18e>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2246      	movs	r2, #70	; 0x46
 8004082:	5a9b      	ldrh	r3, [r3, r2]
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d199      	bne.n	8003fbe <HAL_SPI_TransmitReceive+0x18e>
 800408a:	e089      	b.n	80041a0 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x270>
 8004094:	2312      	movs	r3, #18
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d000      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x270>
 800409e:	e074      	b.n	800418a <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c6:	e060      	b.n	800418a <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2202      	movs	r2, #2
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d11c      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x2e0>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d017      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x2e0>
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d114      	bne.n	8004110 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800410c:	2300      	movs	r3, #0
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2201      	movs	r2, #1
 8004118:	4013      	ands	r3, r2
 800411a:	2b01      	cmp	r3, #1
 800411c:	d11e      	bne.n	800415c <HAL_SPI_TransmitReceive+0x32c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2246      	movs	r2, #70	; 0x46
 8004122:	5a9b      	ldrh	r3, [r3, r2]
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d018      	beq.n	800415c <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	001a      	movs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	7812      	ldrb	r2, [r2, #0]
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2246      	movs	r2, #70	; 0x46
 800414a:	5a9b      	ldrh	r3, [r3, r2]
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b299      	uxth	r1, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2246      	movs	r2, #70	; 0x46
 8004156:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004158:	2301      	movs	r3, #1
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800415c:	f7fe feca 	bl	8002ef4 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004168:	429a      	cmp	r2, r3
 800416a:	d802      	bhi.n	8004172 <HAL_SPI_TransmitReceive+0x342>
 800416c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416e:	3301      	adds	r3, #1
 8004170:	d102      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x348>
 8004172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004174:	2b00      	cmp	r3, #0
 8004176:	d108      	bne.n	800418a <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004178:	2323      	movs	r3, #35	; 0x23
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	2203      	movs	r2, #3
 800417e:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	225d      	movs	r2, #93	; 0x5d
 8004184:	2101      	movs	r1, #1
 8004186:	5499      	strb	r1, [r3, r2]
        goto error;
 8004188:	e026      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d199      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x298>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2246      	movs	r2, #70	; 0x46
 8004198:	5a9b      	ldrh	r3, [r3, r2]
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d193      	bne.n	80040c8 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 f954 	bl	8004454 <SPI_EndRxTxTransaction>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d006      	beq.n	80041be <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80041b0:	2323      	movs	r3, #35	; 0x23
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2220      	movs	r2, #32
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80041c6:	2323      	movs	r3, #35	; 0x23
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2201      	movs	r2, #1
 80041cc:	701a      	strb	r2, [r3, #0]
 80041ce:	e003      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	225d      	movs	r2, #93	; 0x5d
 80041d4:	2101      	movs	r1, #1
 80041d6:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	225c      	movs	r2, #92	; 0x5c
 80041dc:	2100      	movs	r1, #0
 80041de:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80041e0:	2323      	movs	r3, #35	; 0x23
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b00a      	add	sp, #40	; 0x28
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	ffffefff 	.word	0xffffefff

080041f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	1dfb      	adds	r3, r7, #7
 8004202:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004204:	f7fe fe76 	bl	8002ef4 <HAL_GetTick>
 8004208:	0002      	movs	r2, r0
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004214:	f7fe fe6e 	bl	8002ef4 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	015b      	lsls	r3, r3, #5
 8004222:	0d1b      	lsrs	r3, r3, #20
 8004224:	69fa      	ldr	r2, [r7, #28]
 8004226:	4353      	muls	r3, r2
 8004228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422a:	e058      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	d055      	beq.n	80042de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004232:	f7fe fe5f 	bl	8002ef4 <HAL_GetTick>
 8004236:	0002      	movs	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	69fa      	ldr	r2, [r7, #28]
 800423e:	429a      	cmp	r2, r3
 8004240:	d902      	bls.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d142      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	21e0      	movs	r1, #224	; 0xe0
 8004254:	438a      	bics	r2, r1
 8004256:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	2382      	movs	r3, #130	; 0x82
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	429a      	cmp	r2, r3
 8004262:	d113      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x98>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	429a      	cmp	r2, r3
 800426e:	d005      	beq.n	800427c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2140      	movs	r1, #64	; 0x40
 8004288:	438a      	bics	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	019b      	lsls	r3, r3, #6
 8004294:	429a      	cmp	r2, r3
 8004296:	d110      	bne.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	491a      	ldr	r1, [pc, #104]	; (800430c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	0189      	lsls	r1, r1, #6
 80042b6:	430a      	orrs	r2, r1
 80042b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	225d      	movs	r2, #93	; 0x5d
 80042be:	2101      	movs	r1, #1
 80042c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	225c      	movs	r2, #92	; 0x5c
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e017      	b.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3b01      	subs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	425a      	negs	r2, r3
 80042ee:	4153      	adcs	r3, r2
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	001a      	movs	r2, r3
 80042f4:	1dfb      	adds	r3, r7, #7
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d197      	bne.n	800422c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b008      	add	sp, #32
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	20000010 	.word	0x20000010
 800430c:	ffffdfff 	.word	0xffffdfff

08004310 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800431e:	2317      	movs	r3, #23
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004326:	f7fe fde5 	bl	8002ef4 <HAL_GetTick>
 800432a:	0002      	movs	r2, r0
 800432c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432e:	1a9b      	subs	r3, r3, r2
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	18d3      	adds	r3, r2, r3
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004336:	f7fe fddd 	bl	8002ef4 <HAL_GetTick>
 800433a:	0003      	movs	r3, r0
 800433c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	0013      	movs	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	189b      	adds	r3, r3, r2
 8004350:	00da      	lsls	r2, r3, #3
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	0d1b      	lsrs	r3, r3, #20
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	4353      	muls	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800435c:	e068      	b.n	8004430 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	429a      	cmp	r2, r3
 8004366:	d10a      	bne.n	800437e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	b2da      	uxtb	r2, r3
 8004374:	2117      	movs	r1, #23
 8004376:	187b      	adds	r3, r7, r1
 8004378:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800437a:	187b      	adds	r3, r7, r1
 800437c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	d055      	beq.n	8004430 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004384:	f7fe fdb6 	bl	8002ef4 <HAL_GetTick>
 8004388:	0002      	movs	r2, r0
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004390:	429a      	cmp	r2, r3
 8004392:	d902      	bls.n	800439a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	2b00      	cmp	r3, #0
 8004398:	d142      	bne.n	8004420 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	21e0      	movs	r1, #224	; 0xe0
 80043a6:	438a      	bics	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	2382      	movs	r3, #130	; 0x82
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d113      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xce>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	2380      	movs	r3, #128	; 0x80
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	429a      	cmp	r2, r3
 80043c0:	d005      	beq.n	80043ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d107      	bne.n	80043de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2140      	movs	r1, #64	; 0x40
 80043da:	438a      	bics	r2, r1
 80043dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	019b      	lsls	r3, r3, #6
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d110      	bne.n	800440c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4916      	ldr	r1, [pc, #88]	; (8004450 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80043f6:	400a      	ands	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	0189      	lsls	r1, r1, #6
 8004408:	430a      	orrs	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	225d      	movs	r2, #93	; 0x5d
 8004410:	2101      	movs	r1, #1
 8004412:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	225c      	movs	r2, #92	; 0x5c
 8004418:	2100      	movs	r1, #0
 800441a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e010      	b.n	8004442 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	3b01      	subs	r3, #1
 800442e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d18e      	bne.n	800435e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	0018      	movs	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	b00a      	add	sp, #40	; 0x28
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	20000010 	.word	0x20000010
 8004450:	ffffdfff 	.word	0xffffdfff

08004454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	23c0      	movs	r3, #192	; 0xc0
 8004464:	0159      	lsls	r1, r3, #5
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	0013      	movs	r3, r2
 800446e:	2200      	movs	r2, #0
 8004470:	f7ff ff4e 	bl	8004310 <SPI_WaitFifoStateUntilTimeout>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d007      	beq.n	8004488 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	2220      	movs	r2, #32
 800447e:	431a      	orrs	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e027      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	0013      	movs	r3, r2
 8004492:	2200      	movs	r2, #0
 8004494:	2180      	movs	r1, #128	; 0x80
 8004496:	f7ff fead 	bl	80041f4 <SPI_WaitFlagStateUntilTimeout>
 800449a:	1e03      	subs	r3, r0, #0
 800449c:	d007      	beq.n	80044ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a2:	2220      	movs	r2, #32
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e014      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	23c0      	movs	r3, #192	; 0xc0
 80044b2:	00d9      	lsls	r1, r3, #3
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	0013      	movs	r3, r2
 80044bc:	2200      	movs	r2, #0
 80044be:	f7ff ff27 	bl	8004310 <SPI_WaitFifoStateUntilTimeout>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d007      	beq.n	80044d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ca:	2220      	movs	r2, #32
 80044cc:	431a      	orrs	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e000      	b.n	80044d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}

080044e0 <__cvt>:
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e2:	001e      	movs	r6, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	0014      	movs	r4, r2
 80044e8:	b08b      	sub	sp, #44	; 0x2c
 80044ea:	429e      	cmp	r6, r3
 80044ec:	da04      	bge.n	80044f8 <__cvt+0x18>
 80044ee:	2180      	movs	r1, #128	; 0x80
 80044f0:	0609      	lsls	r1, r1, #24
 80044f2:	1873      	adds	r3, r6, r1
 80044f4:	001e      	movs	r6, r3
 80044f6:	232d      	movs	r3, #45	; 0x2d
 80044f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80044fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044fc:	7013      	strb	r3, [r2, #0]
 80044fe:	2320      	movs	r3, #32
 8004500:	2203      	movs	r2, #3
 8004502:	439f      	bics	r7, r3
 8004504:	2f46      	cmp	r7, #70	; 0x46
 8004506:	d007      	beq.n	8004518 <__cvt+0x38>
 8004508:	003b      	movs	r3, r7
 800450a:	3b45      	subs	r3, #69	; 0x45
 800450c:	4259      	negs	r1, r3
 800450e:	414b      	adcs	r3, r1
 8004510:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004512:	3a01      	subs	r2, #1
 8004514:	18cb      	adds	r3, r1, r3
 8004516:	9310      	str	r3, [sp, #64]	; 0x40
 8004518:	ab09      	add	r3, sp, #36	; 0x24
 800451a:	9304      	str	r3, [sp, #16]
 800451c:	ab08      	add	r3, sp, #32
 800451e:	9303      	str	r3, [sp, #12]
 8004520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004522:	9200      	str	r2, [sp, #0]
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004528:	0022      	movs	r2, r4
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	0033      	movs	r3, r6
 800452e:	f000 fe97 	bl	8005260 <_dtoa_r>
 8004532:	0005      	movs	r5, r0
 8004534:	2f47      	cmp	r7, #71	; 0x47
 8004536:	d102      	bne.n	800453e <__cvt+0x5e>
 8004538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800453a:	07db      	lsls	r3, r3, #31
 800453c:	d528      	bpl.n	8004590 <__cvt+0xb0>
 800453e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004540:	18eb      	adds	r3, r5, r3
 8004542:	9307      	str	r3, [sp, #28]
 8004544:	2f46      	cmp	r7, #70	; 0x46
 8004546:	d114      	bne.n	8004572 <__cvt+0x92>
 8004548:	782b      	ldrb	r3, [r5, #0]
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d10c      	bne.n	8004568 <__cvt+0x88>
 800454e:	2200      	movs	r2, #0
 8004550:	2300      	movs	r3, #0
 8004552:	0020      	movs	r0, r4
 8004554:	0031      	movs	r1, r6
 8004556:	f7fb ff79 	bl	800044c <__aeabi_dcmpeq>
 800455a:	2800      	cmp	r0, #0
 800455c:	d104      	bne.n	8004568 <__cvt+0x88>
 800455e:	2301      	movs	r3, #1
 8004560:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800456a:	9a07      	ldr	r2, [sp, #28]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	9307      	str	r3, [sp, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	2300      	movs	r3, #0
 8004576:	0020      	movs	r0, r4
 8004578:	0031      	movs	r1, r6
 800457a:	f7fb ff67 	bl	800044c <__aeabi_dcmpeq>
 800457e:	2800      	cmp	r0, #0
 8004580:	d001      	beq.n	8004586 <__cvt+0xa6>
 8004582:	9b07      	ldr	r3, [sp, #28]
 8004584:	9309      	str	r3, [sp, #36]	; 0x24
 8004586:	2230      	movs	r2, #48	; 0x30
 8004588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800458a:	9907      	ldr	r1, [sp, #28]
 800458c:	428b      	cmp	r3, r1
 800458e:	d306      	bcc.n	800459e <__cvt+0xbe>
 8004590:	0028      	movs	r0, r5
 8004592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004594:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004596:	1b5b      	subs	r3, r3, r5
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	b00b      	add	sp, #44	; 0x2c
 800459c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	9109      	str	r1, [sp, #36]	; 0x24
 80045a2:	701a      	strb	r2, [r3, #0]
 80045a4:	e7f0      	b.n	8004588 <__cvt+0xa8>

080045a6 <__exponent>:
 80045a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045a8:	1c83      	adds	r3, r0, #2
 80045aa:	b087      	sub	sp, #28
 80045ac:	9303      	str	r3, [sp, #12]
 80045ae:	0005      	movs	r5, r0
 80045b0:	000c      	movs	r4, r1
 80045b2:	232b      	movs	r3, #43	; 0x2b
 80045b4:	7002      	strb	r2, [r0, #0]
 80045b6:	2900      	cmp	r1, #0
 80045b8:	da01      	bge.n	80045be <__exponent+0x18>
 80045ba:	424c      	negs	r4, r1
 80045bc:	3302      	adds	r3, #2
 80045be:	706b      	strb	r3, [r5, #1]
 80045c0:	2c09      	cmp	r4, #9
 80045c2:	dd2f      	ble.n	8004624 <__exponent+0x7e>
 80045c4:	270a      	movs	r7, #10
 80045c6:	ab04      	add	r3, sp, #16
 80045c8:	1dde      	adds	r6, r3, #7
 80045ca:	0020      	movs	r0, r4
 80045cc:	0039      	movs	r1, r7
 80045ce:	9601      	str	r6, [sp, #4]
 80045d0:	f7fb ff26 	bl	8000420 <__aeabi_idivmod>
 80045d4:	3e01      	subs	r6, #1
 80045d6:	3130      	adds	r1, #48	; 0x30
 80045d8:	0020      	movs	r0, r4
 80045da:	7031      	strb	r1, [r6, #0]
 80045dc:	0039      	movs	r1, r7
 80045de:	9402      	str	r4, [sp, #8]
 80045e0:	f7fb fe38 	bl	8000254 <__divsi3>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	0004      	movs	r4, r0
 80045e8:	2b63      	cmp	r3, #99	; 0x63
 80045ea:	dcee      	bgt.n	80045ca <__exponent+0x24>
 80045ec:	9b01      	ldr	r3, [sp, #4]
 80045ee:	3430      	adds	r4, #48	; 0x30
 80045f0:	1e9a      	subs	r2, r3, #2
 80045f2:	0013      	movs	r3, r2
 80045f4:	9903      	ldr	r1, [sp, #12]
 80045f6:	7014      	strb	r4, [r2, #0]
 80045f8:	a804      	add	r0, sp, #16
 80045fa:	3007      	adds	r0, #7
 80045fc:	4298      	cmp	r0, r3
 80045fe:	d80c      	bhi.n	800461a <__exponent+0x74>
 8004600:	2300      	movs	r3, #0
 8004602:	4282      	cmp	r2, r0
 8004604:	d804      	bhi.n	8004610 <__exponent+0x6a>
 8004606:	aa04      	add	r2, sp, #16
 8004608:	3309      	adds	r3, #9
 800460a:	189b      	adds	r3, r3, r2
 800460c:	9a01      	ldr	r2, [sp, #4]
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	9a03      	ldr	r2, [sp, #12]
 8004612:	18d3      	adds	r3, r2, r3
 8004614:	1b58      	subs	r0, r3, r5
 8004616:	b007      	add	sp, #28
 8004618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461a:	7818      	ldrb	r0, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	7008      	strb	r0, [r1, #0]
 8004620:	3101      	adds	r1, #1
 8004622:	e7e9      	b.n	80045f8 <__exponent+0x52>
 8004624:	2330      	movs	r3, #48	; 0x30
 8004626:	3430      	adds	r4, #48	; 0x30
 8004628:	70ab      	strb	r3, [r5, #2]
 800462a:	70ec      	strb	r4, [r5, #3]
 800462c:	1d2b      	adds	r3, r5, #4
 800462e:	e7f1      	b.n	8004614 <__exponent+0x6e>

08004630 <_printf_float>:
 8004630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004632:	b095      	sub	sp, #84	; 0x54
 8004634:	000c      	movs	r4, r1
 8004636:	9208      	str	r2, [sp, #32]
 8004638:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800463a:	9309      	str	r3, [sp, #36]	; 0x24
 800463c:	0007      	movs	r7, r0
 800463e:	f000 fcf5 	bl	800502c <_localeconv_r>
 8004642:	6803      	ldr	r3, [r0, #0]
 8004644:	0018      	movs	r0, r3
 8004646:	930c      	str	r3, [sp, #48]	; 0x30
 8004648:	f7fb fd5e 	bl	8000108 <strlen>
 800464c:	2300      	movs	r3, #0
 800464e:	9312      	str	r3, [sp, #72]	; 0x48
 8004650:	7e23      	ldrb	r3, [r4, #24]
 8004652:	2207      	movs	r2, #7
 8004654:	930a      	str	r3, [sp, #40]	; 0x28
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	900d      	str	r0, [sp, #52]	; 0x34
 800465a:	930b      	str	r3, [sp, #44]	; 0x2c
 800465c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	05c9      	lsls	r1, r1, #23
 8004662:	d547      	bpl.n	80046f4 <_printf_float+0xc4>
 8004664:	189b      	adds	r3, r3, r2
 8004666:	4393      	bics	r3, r2
 8004668:	001a      	movs	r2, r3
 800466a:	3208      	adds	r2, #8
 800466c:	602a      	str	r2, [r5, #0]
 800466e:	681e      	ldr	r6, [r3, #0]
 8004670:	685d      	ldr	r5, [r3, #4]
 8004672:	0032      	movs	r2, r6
 8004674:	002b      	movs	r3, r5
 8004676:	64a2      	str	r2, [r4, #72]	; 0x48
 8004678:	64e3      	str	r3, [r4, #76]	; 0x4c
 800467a:	2201      	movs	r2, #1
 800467c:	006b      	lsls	r3, r5, #1
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	930e      	str	r3, [sp, #56]	; 0x38
 8004682:	0030      	movs	r0, r6
 8004684:	4bab      	ldr	r3, [pc, #684]	; (8004934 <_printf_float+0x304>)
 8004686:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004688:	4252      	negs	r2, r2
 800468a:	f7fd fcab 	bl	8001fe4 <__aeabi_dcmpun>
 800468e:	2800      	cmp	r0, #0
 8004690:	d132      	bne.n	80046f8 <_printf_float+0xc8>
 8004692:	2201      	movs	r2, #1
 8004694:	0030      	movs	r0, r6
 8004696:	4ba7      	ldr	r3, [pc, #668]	; (8004934 <_printf_float+0x304>)
 8004698:	990e      	ldr	r1, [sp, #56]	; 0x38
 800469a:	4252      	negs	r2, r2
 800469c:	f7fb fee6 	bl	800046c <__aeabi_dcmple>
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d129      	bne.n	80046f8 <_printf_float+0xc8>
 80046a4:	2200      	movs	r2, #0
 80046a6:	2300      	movs	r3, #0
 80046a8:	0030      	movs	r0, r6
 80046aa:	0029      	movs	r1, r5
 80046ac:	f7fb fed4 	bl	8000458 <__aeabi_dcmplt>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d003      	beq.n	80046bc <_printf_float+0x8c>
 80046b4:	0023      	movs	r3, r4
 80046b6:	222d      	movs	r2, #45	; 0x2d
 80046b8:	3343      	adds	r3, #67	; 0x43
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046be:	4d9e      	ldr	r5, [pc, #632]	; (8004938 <_printf_float+0x308>)
 80046c0:	2b47      	cmp	r3, #71	; 0x47
 80046c2:	d900      	bls.n	80046c6 <_printf_float+0x96>
 80046c4:	4d9d      	ldr	r5, [pc, #628]	; (800493c <_printf_float+0x30c>)
 80046c6:	2303      	movs	r3, #3
 80046c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80046ca:	6123      	str	r3, [r4, #16]
 80046cc:	3301      	adds	r3, #1
 80046ce:	439a      	bics	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	6022      	str	r2, [r4, #0]
 80046d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80046d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d8:	0021      	movs	r1, r4
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	0038      	movs	r0, r7
 80046de:	9b08      	ldr	r3, [sp, #32]
 80046e0:	aa13      	add	r2, sp, #76	; 0x4c
 80046e2:	f000 f9fb 	bl	8004adc <_printf_common>
 80046e6:	3001      	adds	r0, #1
 80046e8:	d000      	beq.n	80046ec <_printf_float+0xbc>
 80046ea:	e0a3      	b.n	8004834 <_printf_float+0x204>
 80046ec:	2001      	movs	r0, #1
 80046ee:	4240      	negs	r0, r0
 80046f0:	b015      	add	sp, #84	; 0x54
 80046f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f4:	3307      	adds	r3, #7
 80046f6:	e7b6      	b.n	8004666 <_printf_float+0x36>
 80046f8:	0032      	movs	r2, r6
 80046fa:	002b      	movs	r3, r5
 80046fc:	0030      	movs	r0, r6
 80046fe:	0029      	movs	r1, r5
 8004700:	f7fd fc70 	bl	8001fe4 <__aeabi_dcmpun>
 8004704:	2800      	cmp	r0, #0
 8004706:	d00b      	beq.n	8004720 <_printf_float+0xf0>
 8004708:	2d00      	cmp	r5, #0
 800470a:	da03      	bge.n	8004714 <_printf_float+0xe4>
 800470c:	0023      	movs	r3, r4
 800470e:	222d      	movs	r2, #45	; 0x2d
 8004710:	3343      	adds	r3, #67	; 0x43
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004716:	4d8a      	ldr	r5, [pc, #552]	; (8004940 <_printf_float+0x310>)
 8004718:	2b47      	cmp	r3, #71	; 0x47
 800471a:	d9d4      	bls.n	80046c6 <_printf_float+0x96>
 800471c:	4d89      	ldr	r5, [pc, #548]	; (8004944 <_printf_float+0x314>)
 800471e:	e7d2      	b.n	80046c6 <_printf_float+0x96>
 8004720:	2220      	movs	r2, #32
 8004722:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004724:	6863      	ldr	r3, [r4, #4]
 8004726:	4391      	bics	r1, r2
 8004728:	910e      	str	r1, [sp, #56]	; 0x38
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	d14a      	bne.n	80047c4 <_printf_float+0x194>
 800472e:	3307      	adds	r3, #7
 8004730:	6063      	str	r3, [r4, #4]
 8004732:	2380      	movs	r3, #128	; 0x80
 8004734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	4313      	orrs	r3, r2
 800473a:	2200      	movs	r2, #0
 800473c:	9206      	str	r2, [sp, #24]
 800473e:	aa12      	add	r2, sp, #72	; 0x48
 8004740:	9205      	str	r2, [sp, #20]
 8004742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004744:	6023      	str	r3, [r4, #0]
 8004746:	9204      	str	r2, [sp, #16]
 8004748:	aa11      	add	r2, sp, #68	; 0x44
 800474a:	9203      	str	r2, [sp, #12]
 800474c:	2223      	movs	r2, #35	; 0x23
 800474e:	a908      	add	r1, sp, #32
 8004750:	9301      	str	r3, [sp, #4]
 8004752:	6863      	ldr	r3, [r4, #4]
 8004754:	1852      	adds	r2, r2, r1
 8004756:	9202      	str	r2, [sp, #8]
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	0032      	movs	r2, r6
 800475c:	002b      	movs	r3, r5
 800475e:	0038      	movs	r0, r7
 8004760:	f7ff febe 	bl	80044e0 <__cvt>
 8004764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004766:	0005      	movs	r5, r0
 8004768:	2b47      	cmp	r3, #71	; 0x47
 800476a:	d109      	bne.n	8004780 <_printf_float+0x150>
 800476c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800476e:	1cda      	adds	r2, r3, #3
 8004770:	db02      	blt.n	8004778 <_printf_float+0x148>
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	4293      	cmp	r3, r2
 8004776:	dd49      	ble.n	800480c <_printf_float+0x1dc>
 8004778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800477a:	3b02      	subs	r3, #2
 800477c:	b2db      	uxtb	r3, r3
 800477e:	930a      	str	r3, [sp, #40]	; 0x28
 8004780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004782:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004784:	2b65      	cmp	r3, #101	; 0x65
 8004786:	d824      	bhi.n	80047d2 <_printf_float+0x1a2>
 8004788:	0020      	movs	r0, r4
 800478a:	001a      	movs	r2, r3
 800478c:	3901      	subs	r1, #1
 800478e:	3050      	adds	r0, #80	; 0x50
 8004790:	9111      	str	r1, [sp, #68]	; 0x44
 8004792:	f7ff ff08 	bl	80045a6 <__exponent>
 8004796:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004798:	900b      	str	r0, [sp, #44]	; 0x2c
 800479a:	1813      	adds	r3, r2, r0
 800479c:	6123      	str	r3, [r4, #16]
 800479e:	2a01      	cmp	r2, #1
 80047a0:	dc02      	bgt.n	80047a8 <_printf_float+0x178>
 80047a2:	6822      	ldr	r2, [r4, #0]
 80047a4:	07d2      	lsls	r2, r2, #31
 80047a6:	d501      	bpl.n	80047ac <_printf_float+0x17c>
 80047a8:	3301      	adds	r3, #1
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	2323      	movs	r3, #35	; 0x23
 80047ae:	aa08      	add	r2, sp, #32
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d100      	bne.n	80047ba <_printf_float+0x18a>
 80047b8:	e78d      	b.n	80046d6 <_printf_float+0xa6>
 80047ba:	0023      	movs	r3, r4
 80047bc:	222d      	movs	r2, #45	; 0x2d
 80047be:	3343      	adds	r3, #67	; 0x43
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e788      	b.n	80046d6 <_printf_float+0xa6>
 80047c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047c6:	2a47      	cmp	r2, #71	; 0x47
 80047c8:	d1b3      	bne.n	8004732 <_printf_float+0x102>
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1b1      	bne.n	8004732 <_printf_float+0x102>
 80047ce:	3301      	adds	r3, #1
 80047d0:	e7ae      	b.n	8004730 <_printf_float+0x100>
 80047d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047d4:	2b66      	cmp	r3, #102	; 0x66
 80047d6:	d11b      	bne.n	8004810 <_printf_float+0x1e0>
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	2900      	cmp	r1, #0
 80047dc:	dd09      	ble.n	80047f2 <_printf_float+0x1c2>
 80047de:	6121      	str	r1, [r4, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <_printf_float+0x1ba>
 80047e4:	6822      	ldr	r2, [r4, #0]
 80047e6:	07d2      	lsls	r2, r2, #31
 80047e8:	d50b      	bpl.n	8004802 <_printf_float+0x1d2>
 80047ea:	3301      	adds	r3, #1
 80047ec:	185b      	adds	r3, r3, r1
 80047ee:	6123      	str	r3, [r4, #16]
 80047f0:	e007      	b.n	8004802 <_printf_float+0x1d2>
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <_printf_float+0x1ce>
 80047f6:	2201      	movs	r2, #1
 80047f8:	6821      	ldr	r1, [r4, #0]
 80047fa:	4211      	tst	r1, r2
 80047fc:	d000      	beq.n	8004800 <_printf_float+0x1d0>
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	6122      	str	r2, [r4, #16]
 8004802:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004804:	65a3      	str	r3, [r4, #88]	; 0x58
 8004806:	2300      	movs	r3, #0
 8004808:	930b      	str	r3, [sp, #44]	; 0x2c
 800480a:	e7cf      	b.n	80047ac <_printf_float+0x17c>
 800480c:	2367      	movs	r3, #103	; 0x67
 800480e:	930a      	str	r3, [sp, #40]	; 0x28
 8004810:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004812:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004814:	4299      	cmp	r1, r3
 8004816:	db06      	blt.n	8004826 <_printf_float+0x1f6>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	6121      	str	r1, [r4, #16]
 800481c:	07db      	lsls	r3, r3, #31
 800481e:	d5f0      	bpl.n	8004802 <_printf_float+0x1d2>
 8004820:	3101      	adds	r1, #1
 8004822:	6121      	str	r1, [r4, #16]
 8004824:	e7ed      	b.n	8004802 <_printf_float+0x1d2>
 8004826:	2201      	movs	r2, #1
 8004828:	2900      	cmp	r1, #0
 800482a:	dc01      	bgt.n	8004830 <_printf_float+0x200>
 800482c:	1892      	adds	r2, r2, r2
 800482e:	1a52      	subs	r2, r2, r1
 8004830:	189b      	adds	r3, r3, r2
 8004832:	e7dc      	b.n	80047ee <_printf_float+0x1be>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	0553      	lsls	r3, r2, #21
 8004838:	d408      	bmi.n	800484c <_printf_float+0x21c>
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	002a      	movs	r2, r5
 800483e:	0038      	movs	r0, r7
 8004840:	9908      	ldr	r1, [sp, #32]
 8004842:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004844:	47a8      	blx	r5
 8004846:	3001      	adds	r0, #1
 8004848:	d12a      	bne.n	80048a0 <_printf_float+0x270>
 800484a:	e74f      	b.n	80046ec <_printf_float+0xbc>
 800484c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800484e:	2b65      	cmp	r3, #101	; 0x65
 8004850:	d800      	bhi.n	8004854 <_printf_float+0x224>
 8004852:	e0ec      	b.n	8004a2e <_printf_float+0x3fe>
 8004854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004856:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004858:	2200      	movs	r2, #0
 800485a:	2300      	movs	r3, #0
 800485c:	f7fb fdf6 	bl	800044c <__aeabi_dcmpeq>
 8004860:	2800      	cmp	r0, #0
 8004862:	d034      	beq.n	80048ce <_printf_float+0x29e>
 8004864:	2301      	movs	r3, #1
 8004866:	0038      	movs	r0, r7
 8004868:	4a37      	ldr	r2, [pc, #220]	; (8004948 <_printf_float+0x318>)
 800486a:	9908      	ldr	r1, [sp, #32]
 800486c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800486e:	47a8      	blx	r5
 8004870:	3001      	adds	r0, #1
 8004872:	d100      	bne.n	8004876 <_printf_float+0x246>
 8004874:	e73a      	b.n	80046ec <_printf_float+0xbc>
 8004876:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800487a:	429a      	cmp	r2, r3
 800487c:	db02      	blt.n	8004884 <_printf_float+0x254>
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	07db      	lsls	r3, r3, #31
 8004882:	d50d      	bpl.n	80048a0 <_printf_float+0x270>
 8004884:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004886:	0038      	movs	r0, r7
 8004888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800488a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800488c:	9908      	ldr	r1, [sp, #32]
 800488e:	47a8      	blx	r5
 8004890:	2500      	movs	r5, #0
 8004892:	3001      	adds	r0, #1
 8004894:	d100      	bne.n	8004898 <_printf_float+0x268>
 8004896:	e729      	b.n	80046ec <_printf_float+0xbc>
 8004898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800489a:	3b01      	subs	r3, #1
 800489c:	42ab      	cmp	r3, r5
 800489e:	dc0a      	bgt.n	80048b6 <_printf_float+0x286>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	079b      	lsls	r3, r3, #30
 80048a4:	d500      	bpl.n	80048a8 <_printf_float+0x278>
 80048a6:	e116      	b.n	8004ad6 <_printf_float+0x4a6>
 80048a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80048aa:	68e0      	ldr	r0, [r4, #12]
 80048ac:	4298      	cmp	r0, r3
 80048ae:	db00      	blt.n	80048b2 <_printf_float+0x282>
 80048b0:	e71e      	b.n	80046f0 <_printf_float+0xc0>
 80048b2:	0018      	movs	r0, r3
 80048b4:	e71c      	b.n	80046f0 <_printf_float+0xc0>
 80048b6:	0022      	movs	r2, r4
 80048b8:	2301      	movs	r3, #1
 80048ba:	0038      	movs	r0, r7
 80048bc:	9908      	ldr	r1, [sp, #32]
 80048be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048c0:	321a      	adds	r2, #26
 80048c2:	47b0      	blx	r6
 80048c4:	3001      	adds	r0, #1
 80048c6:	d100      	bne.n	80048ca <_printf_float+0x29a>
 80048c8:	e710      	b.n	80046ec <_printf_float+0xbc>
 80048ca:	3501      	adds	r5, #1
 80048cc:	e7e4      	b.n	8004898 <_printf_float+0x268>
 80048ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dc3b      	bgt.n	800494c <_printf_float+0x31c>
 80048d4:	2301      	movs	r3, #1
 80048d6:	0038      	movs	r0, r7
 80048d8:	4a1b      	ldr	r2, [pc, #108]	; (8004948 <_printf_float+0x318>)
 80048da:	9908      	ldr	r1, [sp, #32]
 80048dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048de:	47b0      	blx	r6
 80048e0:	3001      	adds	r0, #1
 80048e2:	d100      	bne.n	80048e6 <_printf_float+0x2b6>
 80048e4:	e702      	b.n	80046ec <_printf_float+0xbc>
 80048e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80048e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048ea:	4313      	orrs	r3, r2
 80048ec:	d102      	bne.n	80048f4 <_printf_float+0x2c4>
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	07db      	lsls	r3, r3, #31
 80048f2:	d5d5      	bpl.n	80048a0 <_printf_float+0x270>
 80048f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048f6:	0038      	movs	r0, r7
 80048f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048fa:	9908      	ldr	r1, [sp, #32]
 80048fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048fe:	47b0      	blx	r6
 8004900:	2300      	movs	r3, #0
 8004902:	3001      	adds	r0, #1
 8004904:	d100      	bne.n	8004908 <_printf_float+0x2d8>
 8004906:	e6f1      	b.n	80046ec <_printf_float+0xbc>
 8004908:	930a      	str	r3, [sp, #40]	; 0x28
 800490a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800490c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490e:	425b      	negs	r3, r3
 8004910:	4293      	cmp	r3, r2
 8004912:	dc01      	bgt.n	8004918 <_printf_float+0x2e8>
 8004914:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004916:	e791      	b.n	800483c <_printf_float+0x20c>
 8004918:	0022      	movs	r2, r4
 800491a:	2301      	movs	r3, #1
 800491c:	0038      	movs	r0, r7
 800491e:	9908      	ldr	r1, [sp, #32]
 8004920:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004922:	321a      	adds	r2, #26
 8004924:	47b0      	blx	r6
 8004926:	3001      	adds	r0, #1
 8004928:	d100      	bne.n	800492c <_printf_float+0x2fc>
 800492a:	e6df      	b.n	80046ec <_printf_float+0xbc>
 800492c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492e:	3301      	adds	r3, #1
 8004930:	e7ea      	b.n	8004908 <_printf_float+0x2d8>
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	7fefffff 	.word	0x7fefffff
 8004938:	0800707c 	.word	0x0800707c
 800493c:	08007080 	.word	0x08007080
 8004940:	08007084 	.word	0x08007084
 8004944:	08007088 	.word	0x08007088
 8004948:	0800708c 	.word	0x0800708c
 800494c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800494e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004950:	920a      	str	r2, [sp, #40]	; 0x28
 8004952:	429a      	cmp	r2, r3
 8004954:	dd00      	ble.n	8004958 <_printf_float+0x328>
 8004956:	930a      	str	r3, [sp, #40]	; 0x28
 8004958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	dc3d      	bgt.n	80049da <_printf_float+0x3aa>
 800495e:	2300      	movs	r3, #0
 8004960:	930e      	str	r3, [sp, #56]	; 0x38
 8004962:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004964:	43db      	mvns	r3, r3
 8004966:	17db      	asrs	r3, r3, #31
 8004968:	930f      	str	r3, [sp, #60]	; 0x3c
 800496a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800496c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800496e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004972:	4013      	ands	r3, r2
 8004974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800497a:	4293      	cmp	r3, r2
 800497c:	dc36      	bgt.n	80049ec <_printf_float+0x3bc>
 800497e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004980:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004982:	429a      	cmp	r2, r3
 8004984:	db40      	blt.n	8004a08 <_printf_float+0x3d8>
 8004986:	6823      	ldr	r3, [r4, #0]
 8004988:	07db      	lsls	r3, r3, #31
 800498a:	d43d      	bmi.n	8004a08 <_printf_float+0x3d8>
 800498c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800498e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004992:	1af3      	subs	r3, r6, r3
 8004994:	1ab6      	subs	r6, r6, r2
 8004996:	429e      	cmp	r6, r3
 8004998:	dd00      	ble.n	800499c <_printf_float+0x36c>
 800499a:	001e      	movs	r6, r3
 800499c:	2e00      	cmp	r6, #0
 800499e:	dc3c      	bgt.n	8004a1a <_printf_float+0x3ea>
 80049a0:	2300      	movs	r3, #0
 80049a2:	930a      	str	r3, [sp, #40]	; 0x28
 80049a4:	43f3      	mvns	r3, r6
 80049a6:	17db      	asrs	r3, r3, #31
 80049a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80049aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80049ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049b2:	4032      	ands	r2, r6
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b8:	4293      	cmp	r3, r2
 80049ba:	dc00      	bgt.n	80049be <_printf_float+0x38e>
 80049bc:	e770      	b.n	80048a0 <_printf_float+0x270>
 80049be:	0022      	movs	r2, r4
 80049c0:	2301      	movs	r3, #1
 80049c2:	0038      	movs	r0, r7
 80049c4:	9908      	ldr	r1, [sp, #32]
 80049c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80049c8:	321a      	adds	r2, #26
 80049ca:	47a8      	blx	r5
 80049cc:	3001      	adds	r0, #1
 80049ce:	d100      	bne.n	80049d2 <_printf_float+0x3a2>
 80049d0:	e68c      	b.n	80046ec <_printf_float+0xbc>
 80049d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049d4:	3301      	adds	r3, #1
 80049d6:	930a      	str	r3, [sp, #40]	; 0x28
 80049d8:	e7e7      	b.n	80049aa <_printf_float+0x37a>
 80049da:	002a      	movs	r2, r5
 80049dc:	0038      	movs	r0, r7
 80049de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049e0:	9908      	ldr	r1, [sp, #32]
 80049e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049e4:	47b0      	blx	r6
 80049e6:	3001      	adds	r0, #1
 80049e8:	d1b9      	bne.n	800495e <_printf_float+0x32e>
 80049ea:	e67f      	b.n	80046ec <_printf_float+0xbc>
 80049ec:	0022      	movs	r2, r4
 80049ee:	2301      	movs	r3, #1
 80049f0:	0038      	movs	r0, r7
 80049f2:	9908      	ldr	r1, [sp, #32]
 80049f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049f6:	321a      	adds	r2, #26
 80049f8:	47b0      	blx	r6
 80049fa:	3001      	adds	r0, #1
 80049fc:	d100      	bne.n	8004a00 <_printf_float+0x3d0>
 80049fe:	e675      	b.n	80046ec <_printf_float+0xbc>
 8004a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a02:	3301      	adds	r3, #1
 8004a04:	930e      	str	r3, [sp, #56]	; 0x38
 8004a06:	e7b0      	b.n	800496a <_printf_float+0x33a>
 8004a08:	0038      	movs	r0, r7
 8004a0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a0e:	9908      	ldr	r1, [sp, #32]
 8004a10:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a12:	47b0      	blx	r6
 8004a14:	3001      	adds	r0, #1
 8004a16:	d1b9      	bne.n	800498c <_printf_float+0x35c>
 8004a18:	e668      	b.n	80046ec <_printf_float+0xbc>
 8004a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a1c:	0038      	movs	r0, r7
 8004a1e:	18ea      	adds	r2, r5, r3
 8004a20:	9908      	ldr	r1, [sp, #32]
 8004a22:	0033      	movs	r3, r6
 8004a24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004a26:	47a8      	blx	r5
 8004a28:	3001      	adds	r0, #1
 8004a2a:	d1b9      	bne.n	80049a0 <_printf_float+0x370>
 8004a2c:	e65e      	b.n	80046ec <_printf_float+0xbc>
 8004a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	dc02      	bgt.n	8004a3a <_printf_float+0x40a>
 8004a34:	2301      	movs	r3, #1
 8004a36:	421a      	tst	r2, r3
 8004a38:	d03a      	beq.n	8004ab0 <_printf_float+0x480>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	002a      	movs	r2, r5
 8004a3e:	0038      	movs	r0, r7
 8004a40:	9908      	ldr	r1, [sp, #32]
 8004a42:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a44:	47b0      	blx	r6
 8004a46:	3001      	adds	r0, #1
 8004a48:	d100      	bne.n	8004a4c <_printf_float+0x41c>
 8004a4a:	e64f      	b.n	80046ec <_printf_float+0xbc>
 8004a4c:	0038      	movs	r0, r7
 8004a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a52:	9908      	ldr	r1, [sp, #32]
 8004a54:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a56:	47b0      	blx	r6
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d100      	bne.n	8004a5e <_printf_float+0x42e>
 8004a5c:	e646      	b.n	80046ec <_printf_float+0xbc>
 8004a5e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a60:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004a62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a64:	2200      	movs	r2, #0
 8004a66:	001e      	movs	r6, r3
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f7fb fcef 	bl	800044c <__aeabi_dcmpeq>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d11c      	bne.n	8004aac <_printf_float+0x47c>
 8004a72:	0033      	movs	r3, r6
 8004a74:	1c6a      	adds	r2, r5, #1
 8004a76:	3b01      	subs	r3, #1
 8004a78:	0038      	movs	r0, r7
 8004a7a:	9908      	ldr	r1, [sp, #32]
 8004a7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004a7e:	47a8      	blx	r5
 8004a80:	3001      	adds	r0, #1
 8004a82:	d10f      	bne.n	8004aa4 <_printf_float+0x474>
 8004a84:	e632      	b.n	80046ec <_printf_float+0xbc>
 8004a86:	0022      	movs	r2, r4
 8004a88:	2301      	movs	r3, #1
 8004a8a:	0038      	movs	r0, r7
 8004a8c:	9908      	ldr	r1, [sp, #32]
 8004a8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a90:	321a      	adds	r2, #26
 8004a92:	47b0      	blx	r6
 8004a94:	3001      	adds	r0, #1
 8004a96:	d100      	bne.n	8004a9a <_printf_float+0x46a>
 8004a98:	e628      	b.n	80046ec <_printf_float+0xbc>
 8004a9a:	3501      	adds	r5, #1
 8004a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	42ab      	cmp	r3, r5
 8004aa2:	dcf0      	bgt.n	8004a86 <_printf_float+0x456>
 8004aa4:	0022      	movs	r2, r4
 8004aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aa8:	3250      	adds	r2, #80	; 0x50
 8004aaa:	e6c8      	b.n	800483e <_printf_float+0x20e>
 8004aac:	2500      	movs	r5, #0
 8004aae:	e7f5      	b.n	8004a9c <_printf_float+0x46c>
 8004ab0:	002a      	movs	r2, r5
 8004ab2:	e7e1      	b.n	8004a78 <_printf_float+0x448>
 8004ab4:	0022      	movs	r2, r4
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	0038      	movs	r0, r7
 8004aba:	9908      	ldr	r1, [sp, #32]
 8004abc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004abe:	3219      	adds	r2, #25
 8004ac0:	47b0      	blx	r6
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d100      	bne.n	8004ac8 <_printf_float+0x498>
 8004ac6:	e611      	b.n	80046ec <_printf_float+0xbc>
 8004ac8:	3501      	adds	r5, #1
 8004aca:	68e3      	ldr	r3, [r4, #12]
 8004acc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	42ab      	cmp	r3, r5
 8004ad2:	dcef      	bgt.n	8004ab4 <_printf_float+0x484>
 8004ad4:	e6e8      	b.n	80048a8 <_printf_float+0x278>
 8004ad6:	2500      	movs	r5, #0
 8004ad8:	e7f7      	b.n	8004aca <_printf_float+0x49a>
 8004ada:	46c0      	nop			; (mov r8, r8)

08004adc <_printf_common>:
 8004adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ade:	0016      	movs	r6, r2
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	688a      	ldr	r2, [r1, #8]
 8004ae4:	690b      	ldr	r3, [r1, #16]
 8004ae6:	000c      	movs	r4, r1
 8004ae8:	9000      	str	r0, [sp, #0]
 8004aea:	4293      	cmp	r3, r2
 8004aec:	da00      	bge.n	8004af0 <_printf_common+0x14>
 8004aee:	0013      	movs	r3, r2
 8004af0:	0022      	movs	r2, r4
 8004af2:	6033      	str	r3, [r6, #0]
 8004af4:	3243      	adds	r2, #67	; 0x43
 8004af6:	7812      	ldrb	r2, [r2, #0]
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	d001      	beq.n	8004b00 <_printf_common+0x24>
 8004afc:	3301      	adds	r3, #1
 8004afe:	6033      	str	r3, [r6, #0]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	069b      	lsls	r3, r3, #26
 8004b04:	d502      	bpl.n	8004b0c <_printf_common+0x30>
 8004b06:	6833      	ldr	r3, [r6, #0]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	2306      	movs	r3, #6
 8004b10:	0015      	movs	r5, r2
 8004b12:	401d      	ands	r5, r3
 8004b14:	421a      	tst	r2, r3
 8004b16:	d027      	beq.n	8004b68 <_printf_common+0x8c>
 8004b18:	0023      	movs	r3, r4
 8004b1a:	3343      	adds	r3, #67	; 0x43
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	1e5a      	subs	r2, r3, #1
 8004b20:	4193      	sbcs	r3, r2
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	0692      	lsls	r2, r2, #26
 8004b26:	d430      	bmi.n	8004b8a <_printf_common+0xae>
 8004b28:	0022      	movs	r2, r4
 8004b2a:	9901      	ldr	r1, [sp, #4]
 8004b2c:	9800      	ldr	r0, [sp, #0]
 8004b2e:	9d08      	ldr	r5, [sp, #32]
 8004b30:	3243      	adds	r2, #67	; 0x43
 8004b32:	47a8      	blx	r5
 8004b34:	3001      	adds	r0, #1
 8004b36:	d025      	beq.n	8004b84 <_printf_common+0xa8>
 8004b38:	2206      	movs	r2, #6
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	2500      	movs	r5, #0
 8004b3e:	4013      	ands	r3, r2
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d105      	bne.n	8004b50 <_printf_common+0x74>
 8004b44:	6833      	ldr	r3, [r6, #0]
 8004b46:	68e5      	ldr	r5, [r4, #12]
 8004b48:	1aed      	subs	r5, r5, r3
 8004b4a:	43eb      	mvns	r3, r5
 8004b4c:	17db      	asrs	r3, r3, #31
 8004b4e:	401d      	ands	r5, r3
 8004b50:	68a3      	ldr	r3, [r4, #8]
 8004b52:	6922      	ldr	r2, [r4, #16]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	dd01      	ble.n	8004b5c <_printf_common+0x80>
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	18ed      	adds	r5, r5, r3
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	42b5      	cmp	r5, r6
 8004b60:	d120      	bne.n	8004ba4 <_printf_common+0xc8>
 8004b62:	2000      	movs	r0, #0
 8004b64:	e010      	b.n	8004b88 <_printf_common+0xac>
 8004b66:	3501      	adds	r5, #1
 8004b68:	68e3      	ldr	r3, [r4, #12]
 8004b6a:	6832      	ldr	r2, [r6, #0]
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	42ab      	cmp	r3, r5
 8004b70:	ddd2      	ble.n	8004b18 <_printf_common+0x3c>
 8004b72:	0022      	movs	r2, r4
 8004b74:	2301      	movs	r3, #1
 8004b76:	9901      	ldr	r1, [sp, #4]
 8004b78:	9800      	ldr	r0, [sp, #0]
 8004b7a:	9f08      	ldr	r7, [sp, #32]
 8004b7c:	3219      	adds	r2, #25
 8004b7e:	47b8      	blx	r7
 8004b80:	3001      	adds	r0, #1
 8004b82:	d1f0      	bne.n	8004b66 <_printf_common+0x8a>
 8004b84:	2001      	movs	r0, #1
 8004b86:	4240      	negs	r0, r0
 8004b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b8a:	2030      	movs	r0, #48	; 0x30
 8004b8c:	18e1      	adds	r1, r4, r3
 8004b8e:	3143      	adds	r1, #67	; 0x43
 8004b90:	7008      	strb	r0, [r1, #0]
 8004b92:	0021      	movs	r1, r4
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	3145      	adds	r1, #69	; 0x45
 8004b98:	7809      	ldrb	r1, [r1, #0]
 8004b9a:	18a2      	adds	r2, r4, r2
 8004b9c:	3243      	adds	r2, #67	; 0x43
 8004b9e:	3302      	adds	r3, #2
 8004ba0:	7011      	strb	r1, [r2, #0]
 8004ba2:	e7c1      	b.n	8004b28 <_printf_common+0x4c>
 8004ba4:	0022      	movs	r2, r4
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	9901      	ldr	r1, [sp, #4]
 8004baa:	9800      	ldr	r0, [sp, #0]
 8004bac:	9f08      	ldr	r7, [sp, #32]
 8004bae:	321a      	adds	r2, #26
 8004bb0:	47b8      	blx	r7
 8004bb2:	3001      	adds	r0, #1
 8004bb4:	d0e6      	beq.n	8004b84 <_printf_common+0xa8>
 8004bb6:	3601      	adds	r6, #1
 8004bb8:	e7d1      	b.n	8004b5e <_printf_common+0x82>
	...

08004bbc <_printf_i>:
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b08b      	sub	sp, #44	; 0x2c
 8004bc0:	9206      	str	r2, [sp, #24]
 8004bc2:	000a      	movs	r2, r1
 8004bc4:	3243      	adds	r2, #67	; 0x43
 8004bc6:	9307      	str	r3, [sp, #28]
 8004bc8:	9005      	str	r0, [sp, #20]
 8004bca:	9204      	str	r2, [sp, #16]
 8004bcc:	7e0a      	ldrb	r2, [r1, #24]
 8004bce:	000c      	movs	r4, r1
 8004bd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bd2:	2a78      	cmp	r2, #120	; 0x78
 8004bd4:	d809      	bhi.n	8004bea <_printf_i+0x2e>
 8004bd6:	2a62      	cmp	r2, #98	; 0x62
 8004bd8:	d80b      	bhi.n	8004bf2 <_printf_i+0x36>
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d100      	bne.n	8004be0 <_printf_i+0x24>
 8004bde:	e0be      	b.n	8004d5e <_printf_i+0x1a2>
 8004be0:	497c      	ldr	r1, [pc, #496]	; (8004dd4 <_printf_i+0x218>)
 8004be2:	9103      	str	r1, [sp, #12]
 8004be4:	2a58      	cmp	r2, #88	; 0x58
 8004be6:	d100      	bne.n	8004bea <_printf_i+0x2e>
 8004be8:	e093      	b.n	8004d12 <_printf_i+0x156>
 8004bea:	0026      	movs	r6, r4
 8004bec:	3642      	adds	r6, #66	; 0x42
 8004bee:	7032      	strb	r2, [r6, #0]
 8004bf0:	e022      	b.n	8004c38 <_printf_i+0x7c>
 8004bf2:	0010      	movs	r0, r2
 8004bf4:	3863      	subs	r0, #99	; 0x63
 8004bf6:	2815      	cmp	r0, #21
 8004bf8:	d8f7      	bhi.n	8004bea <_printf_i+0x2e>
 8004bfa:	f7fb fa97 	bl	800012c <__gnu_thumb1_case_shi>
 8004bfe:	0016      	.short	0x0016
 8004c00:	fff6001f 	.word	0xfff6001f
 8004c04:	fff6fff6 	.word	0xfff6fff6
 8004c08:	001ffff6 	.word	0x001ffff6
 8004c0c:	fff6fff6 	.word	0xfff6fff6
 8004c10:	fff6fff6 	.word	0xfff6fff6
 8004c14:	003600a3 	.word	0x003600a3
 8004c18:	fff60083 	.word	0xfff60083
 8004c1c:	00b4fff6 	.word	0x00b4fff6
 8004c20:	0036fff6 	.word	0x0036fff6
 8004c24:	fff6fff6 	.word	0xfff6fff6
 8004c28:	0087      	.short	0x0087
 8004c2a:	0026      	movs	r6, r4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	3642      	adds	r6, #66	; 0x42
 8004c30:	1d11      	adds	r1, r2, #4
 8004c32:	6019      	str	r1, [r3, #0]
 8004c34:	6813      	ldr	r3, [r2, #0]
 8004c36:	7033      	strb	r3, [r6, #0]
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0a2      	b.n	8004d82 <_printf_i+0x1c6>
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	6809      	ldr	r1, [r1, #0]
 8004c40:	1d02      	adds	r2, r0, #4
 8004c42:	060d      	lsls	r5, r1, #24
 8004c44:	d50b      	bpl.n	8004c5e <_printf_i+0xa2>
 8004c46:	6805      	ldr	r5, [r0, #0]
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	2d00      	cmp	r5, #0
 8004c4c:	da03      	bge.n	8004c56 <_printf_i+0x9a>
 8004c4e:	232d      	movs	r3, #45	; 0x2d
 8004c50:	9a04      	ldr	r2, [sp, #16]
 8004c52:	426d      	negs	r5, r5
 8004c54:	7013      	strb	r3, [r2, #0]
 8004c56:	4b5f      	ldr	r3, [pc, #380]	; (8004dd4 <_printf_i+0x218>)
 8004c58:	270a      	movs	r7, #10
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	e01b      	b.n	8004c96 <_printf_i+0xda>
 8004c5e:	6805      	ldr	r5, [r0, #0]
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	0649      	lsls	r1, r1, #25
 8004c64:	d5f1      	bpl.n	8004c4a <_printf_i+0x8e>
 8004c66:	b22d      	sxth	r5, r5
 8004c68:	e7ef      	b.n	8004c4a <_printf_i+0x8e>
 8004c6a:	680d      	ldr	r5, [r1, #0]
 8004c6c:	6819      	ldr	r1, [r3, #0]
 8004c6e:	1d08      	adds	r0, r1, #4
 8004c70:	6018      	str	r0, [r3, #0]
 8004c72:	062e      	lsls	r6, r5, #24
 8004c74:	d501      	bpl.n	8004c7a <_printf_i+0xbe>
 8004c76:	680d      	ldr	r5, [r1, #0]
 8004c78:	e003      	b.n	8004c82 <_printf_i+0xc6>
 8004c7a:	066d      	lsls	r5, r5, #25
 8004c7c:	d5fb      	bpl.n	8004c76 <_printf_i+0xba>
 8004c7e:	680d      	ldr	r5, [r1, #0]
 8004c80:	b2ad      	uxth	r5, r5
 8004c82:	4b54      	ldr	r3, [pc, #336]	; (8004dd4 <_printf_i+0x218>)
 8004c84:	2708      	movs	r7, #8
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	2a6f      	cmp	r2, #111	; 0x6f
 8004c8a:	d000      	beq.n	8004c8e <_printf_i+0xd2>
 8004c8c:	3702      	adds	r7, #2
 8004c8e:	0023      	movs	r3, r4
 8004c90:	2200      	movs	r2, #0
 8004c92:	3343      	adds	r3, #67	; 0x43
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	6863      	ldr	r3, [r4, #4]
 8004c98:	60a3      	str	r3, [r4, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	db03      	blt.n	8004ca6 <_printf_i+0xea>
 8004c9e:	2104      	movs	r1, #4
 8004ca0:	6822      	ldr	r2, [r4, #0]
 8004ca2:	438a      	bics	r2, r1
 8004ca4:	6022      	str	r2, [r4, #0]
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	d102      	bne.n	8004cb0 <_printf_i+0xf4>
 8004caa:	9e04      	ldr	r6, [sp, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <_printf_i+0x10e>
 8004cb0:	9e04      	ldr	r6, [sp, #16]
 8004cb2:	0028      	movs	r0, r5
 8004cb4:	0039      	movs	r1, r7
 8004cb6:	f7fb fac9 	bl	800024c <__aeabi_uidivmod>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	3e01      	subs	r6, #1
 8004cbe:	5c5b      	ldrb	r3, [r3, r1]
 8004cc0:	7033      	strb	r3, [r6, #0]
 8004cc2:	002b      	movs	r3, r5
 8004cc4:	0005      	movs	r5, r0
 8004cc6:	429f      	cmp	r7, r3
 8004cc8:	d9f3      	bls.n	8004cb2 <_printf_i+0xf6>
 8004cca:	2f08      	cmp	r7, #8
 8004ccc:	d109      	bne.n	8004ce2 <_printf_i+0x126>
 8004cce:	6823      	ldr	r3, [r4, #0]
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d506      	bpl.n	8004ce2 <_printf_i+0x126>
 8004cd4:	6862      	ldr	r2, [r4, #4]
 8004cd6:	6923      	ldr	r3, [r4, #16]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dc02      	bgt.n	8004ce2 <_printf_i+0x126>
 8004cdc:	2330      	movs	r3, #48	; 0x30
 8004cde:	3e01      	subs	r6, #1
 8004ce0:	7033      	strb	r3, [r6, #0]
 8004ce2:	9b04      	ldr	r3, [sp, #16]
 8004ce4:	1b9b      	subs	r3, r3, r6
 8004ce6:	6123      	str	r3, [r4, #16]
 8004ce8:	9b07      	ldr	r3, [sp, #28]
 8004cea:	0021      	movs	r1, r4
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	9805      	ldr	r0, [sp, #20]
 8004cf0:	9b06      	ldr	r3, [sp, #24]
 8004cf2:	aa09      	add	r2, sp, #36	; 0x24
 8004cf4:	f7ff fef2 	bl	8004adc <_printf_common>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d147      	bne.n	8004d8c <_printf_i+0x1d0>
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	4240      	negs	r0, r0
 8004d00:	b00b      	add	sp, #44	; 0x2c
 8004d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d04:	2220      	movs	r2, #32
 8004d06:	6809      	ldr	r1, [r1, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	6022      	str	r2, [r4, #0]
 8004d0c:	2278      	movs	r2, #120	; 0x78
 8004d0e:	4932      	ldr	r1, [pc, #200]	; (8004dd8 <_printf_i+0x21c>)
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	0021      	movs	r1, r4
 8004d14:	3145      	adds	r1, #69	; 0x45
 8004d16:	700a      	strb	r2, [r1, #0]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	c920      	ldmia	r1!, {r5}
 8004d1e:	0610      	lsls	r0, r2, #24
 8004d20:	d402      	bmi.n	8004d28 <_printf_i+0x16c>
 8004d22:	0650      	lsls	r0, r2, #25
 8004d24:	d500      	bpl.n	8004d28 <_printf_i+0x16c>
 8004d26:	b2ad      	uxth	r5, r5
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	07d3      	lsls	r3, r2, #31
 8004d2c:	d502      	bpl.n	8004d34 <_printf_i+0x178>
 8004d2e:	2320      	movs	r3, #32
 8004d30:	4313      	orrs	r3, r2
 8004d32:	6023      	str	r3, [r4, #0]
 8004d34:	2710      	movs	r7, #16
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	d1a9      	bne.n	8004c8e <_printf_i+0xd2>
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	4393      	bics	r3, r2
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	e7a4      	b.n	8004c8e <_printf_i+0xd2>
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	680d      	ldr	r5, [r1, #0]
 8004d48:	1d10      	adds	r0, r2, #4
 8004d4a:	6949      	ldr	r1, [r1, #20]
 8004d4c:	6018      	str	r0, [r3, #0]
 8004d4e:	6813      	ldr	r3, [r2, #0]
 8004d50:	062e      	lsls	r6, r5, #24
 8004d52:	d501      	bpl.n	8004d58 <_printf_i+0x19c>
 8004d54:	6019      	str	r1, [r3, #0]
 8004d56:	e002      	b.n	8004d5e <_printf_i+0x1a2>
 8004d58:	066d      	lsls	r5, r5, #25
 8004d5a:	d5fb      	bpl.n	8004d54 <_printf_i+0x198>
 8004d5c:	8019      	strh	r1, [r3, #0]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9e04      	ldr	r6, [sp, #16]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	e7c0      	b.n	8004ce8 <_printf_i+0x12c>
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	1d11      	adds	r1, r2, #4
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	6816      	ldr	r6, [r2, #0]
 8004d6e:	2100      	movs	r1, #0
 8004d70:	0030      	movs	r0, r6
 8004d72:	6862      	ldr	r2, [r4, #4]
 8004d74:	f000 f9d9 	bl	800512a <memchr>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d001      	beq.n	8004d80 <_printf_i+0x1c4>
 8004d7c:	1b80      	subs	r0, r0, r6
 8004d7e:	6060      	str	r0, [r4, #4]
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	6123      	str	r3, [r4, #16]
 8004d84:	2300      	movs	r3, #0
 8004d86:	9a04      	ldr	r2, [sp, #16]
 8004d88:	7013      	strb	r3, [r2, #0]
 8004d8a:	e7ad      	b.n	8004ce8 <_printf_i+0x12c>
 8004d8c:	0032      	movs	r2, r6
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	9906      	ldr	r1, [sp, #24]
 8004d92:	9805      	ldr	r0, [sp, #20]
 8004d94:	9d07      	ldr	r5, [sp, #28]
 8004d96:	47a8      	blx	r5
 8004d98:	3001      	adds	r0, #1
 8004d9a:	d0af      	beq.n	8004cfc <_printf_i+0x140>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	079b      	lsls	r3, r3, #30
 8004da0:	d415      	bmi.n	8004dce <_printf_i+0x212>
 8004da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da4:	68e0      	ldr	r0, [r4, #12]
 8004da6:	4298      	cmp	r0, r3
 8004da8:	daaa      	bge.n	8004d00 <_printf_i+0x144>
 8004daa:	0018      	movs	r0, r3
 8004dac:	e7a8      	b.n	8004d00 <_printf_i+0x144>
 8004dae:	0022      	movs	r2, r4
 8004db0:	2301      	movs	r3, #1
 8004db2:	9906      	ldr	r1, [sp, #24]
 8004db4:	9805      	ldr	r0, [sp, #20]
 8004db6:	9e07      	ldr	r6, [sp, #28]
 8004db8:	3219      	adds	r2, #25
 8004dba:	47b0      	blx	r6
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d09d      	beq.n	8004cfc <_printf_i+0x140>
 8004dc0:	3501      	adds	r5, #1
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	42ab      	cmp	r3, r5
 8004dca:	dcf0      	bgt.n	8004dae <_printf_i+0x1f2>
 8004dcc:	e7e9      	b.n	8004da2 <_printf_i+0x1e6>
 8004dce:	2500      	movs	r5, #0
 8004dd0:	e7f7      	b.n	8004dc2 <_printf_i+0x206>
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	0800708e 	.word	0x0800708e
 8004dd8:	0800709f 	.word	0x0800709f

08004ddc <std>:
 8004ddc:	2300      	movs	r3, #0
 8004dde:	b510      	push	{r4, lr}
 8004de0:	0004      	movs	r4, r0
 8004de2:	6003      	str	r3, [r0, #0]
 8004de4:	6043      	str	r3, [r0, #4]
 8004de6:	6083      	str	r3, [r0, #8]
 8004de8:	8181      	strh	r1, [r0, #12]
 8004dea:	6643      	str	r3, [r0, #100]	; 0x64
 8004dec:	81c2      	strh	r2, [r0, #14]
 8004dee:	6103      	str	r3, [r0, #16]
 8004df0:	6143      	str	r3, [r0, #20]
 8004df2:	6183      	str	r3, [r0, #24]
 8004df4:	0019      	movs	r1, r3
 8004df6:	2208      	movs	r2, #8
 8004df8:	305c      	adds	r0, #92	; 0x5c
 8004dfa:	f000 f90f 	bl	800501c <memset>
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <std+0x50>)
 8004e00:	6224      	str	r4, [r4, #32]
 8004e02:	6263      	str	r3, [r4, #36]	; 0x24
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <std+0x54>)
 8004e06:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <std+0x58>)
 8004e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e0c:	4b0a      	ldr	r3, [pc, #40]	; (8004e38 <std+0x5c>)
 8004e0e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <std+0x60>)
 8004e12:	429c      	cmp	r4, r3
 8004e14:	d005      	beq.n	8004e22 <std+0x46>
 8004e16:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <std+0x64>)
 8004e18:	429c      	cmp	r4, r3
 8004e1a:	d002      	beq.n	8004e22 <std+0x46>
 8004e1c:	4b09      	ldr	r3, [pc, #36]	; (8004e44 <std+0x68>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d103      	bne.n	8004e2a <std+0x4e>
 8004e22:	0020      	movs	r0, r4
 8004e24:	3058      	adds	r0, #88	; 0x58
 8004e26:	f000 f97d 	bl	8005124 <__retarget_lock_init_recursive>
 8004e2a:	bd10      	pop	{r4, pc}
 8004e2c:	08004f85 	.word	0x08004f85
 8004e30:	08004fad 	.word	0x08004fad
 8004e34:	08004fe5 	.word	0x08004fe5
 8004e38:	08005011 	.word	0x08005011
 8004e3c:	20000284 	.word	0x20000284
 8004e40:	200002ec 	.word	0x200002ec
 8004e44:	20000354 	.word	0x20000354

08004e48 <stdio_exit_handler>:
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <stdio_exit_handler+0x10>)
 8004e4c:	4903      	ldr	r1, [pc, #12]	; (8004e5c <stdio_exit_handler+0x14>)
 8004e4e:	4804      	ldr	r0, [pc, #16]	; (8004e60 <stdio_exit_handler+0x18>)
 8004e50:	f000 f86c 	bl	8004f2c <_fwalk_sglue>
 8004e54:	bd10      	pop	{r4, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	2000001c 	.word	0x2000001c
 8004e5c:	08006b5d 	.word	0x08006b5d
 8004e60:	20000028 	.word	0x20000028

08004e64 <cleanup_stdio>:
 8004e64:	6841      	ldr	r1, [r0, #4]
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <cleanup_stdio+0x30>)
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	0004      	movs	r4, r0
 8004e6c:	4299      	cmp	r1, r3
 8004e6e:	d001      	beq.n	8004e74 <cleanup_stdio+0x10>
 8004e70:	f001 fe74 	bl	8006b5c <_fflush_r>
 8004e74:	68a1      	ldr	r1, [r4, #8]
 8004e76:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <cleanup_stdio+0x34>)
 8004e78:	4299      	cmp	r1, r3
 8004e7a:	d002      	beq.n	8004e82 <cleanup_stdio+0x1e>
 8004e7c:	0020      	movs	r0, r4
 8004e7e:	f001 fe6d 	bl	8006b5c <_fflush_r>
 8004e82:	68e1      	ldr	r1, [r4, #12]
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <cleanup_stdio+0x38>)
 8004e86:	4299      	cmp	r1, r3
 8004e88:	d002      	beq.n	8004e90 <cleanup_stdio+0x2c>
 8004e8a:	0020      	movs	r0, r4
 8004e8c:	f001 fe66 	bl	8006b5c <_fflush_r>
 8004e90:	bd10      	pop	{r4, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	20000284 	.word	0x20000284
 8004e98:	200002ec 	.word	0x200002ec
 8004e9c:	20000354 	.word	0x20000354

08004ea0 <global_stdio_init.part.0>:
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <global_stdio_init.part.0+0x28>)
 8004ea4:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <global_stdio_init.part.0+0x2c>)
 8004ea6:	2104      	movs	r1, #4
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	4809      	ldr	r0, [pc, #36]	; (8004ed0 <global_stdio_init.part.0+0x30>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	f7ff ff95 	bl	8004ddc <std>
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2109      	movs	r1, #9
 8004eb6:	4807      	ldr	r0, [pc, #28]	; (8004ed4 <global_stdio_init.part.0+0x34>)
 8004eb8:	f7ff ff90 	bl	8004ddc <std>
 8004ebc:	2202      	movs	r2, #2
 8004ebe:	2112      	movs	r1, #18
 8004ec0:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <global_stdio_init.part.0+0x38>)
 8004ec2:	f7ff ff8b 	bl	8004ddc <std>
 8004ec6:	bd10      	pop	{r4, pc}
 8004ec8:	200003bc 	.word	0x200003bc
 8004ecc:	08004e49 	.word	0x08004e49
 8004ed0:	20000284 	.word	0x20000284
 8004ed4:	200002ec 	.word	0x200002ec
 8004ed8:	20000354 	.word	0x20000354

08004edc <__sfp_lock_acquire>:
 8004edc:	b510      	push	{r4, lr}
 8004ede:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <__sfp_lock_acquire+0xc>)
 8004ee0:	f000 f921 	bl	8005126 <__retarget_lock_acquire_recursive>
 8004ee4:	bd10      	pop	{r4, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	200003c5 	.word	0x200003c5

08004eec <__sfp_lock_release>:
 8004eec:	b510      	push	{r4, lr}
 8004eee:	4802      	ldr	r0, [pc, #8]	; (8004ef8 <__sfp_lock_release+0xc>)
 8004ef0:	f000 f91a 	bl	8005128 <__retarget_lock_release_recursive>
 8004ef4:	bd10      	pop	{r4, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	200003c5 	.word	0x200003c5

08004efc <__sinit>:
 8004efc:	b510      	push	{r4, lr}
 8004efe:	0004      	movs	r4, r0
 8004f00:	f7ff ffec 	bl	8004edc <__sfp_lock_acquire>
 8004f04:	6a23      	ldr	r3, [r4, #32]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <__sinit+0x14>
 8004f0a:	f7ff ffef 	bl	8004eec <__sfp_lock_release>
 8004f0e:	bd10      	pop	{r4, pc}
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <__sinit+0x28>)
 8004f12:	6223      	str	r3, [r4, #32]
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <__sinit+0x2c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f6      	bne.n	8004f0a <__sinit+0xe>
 8004f1c:	f7ff ffc0 	bl	8004ea0 <global_stdio_init.part.0>
 8004f20:	e7f3      	b.n	8004f0a <__sinit+0xe>
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	08004e65 	.word	0x08004e65
 8004f28:	200003bc 	.word	0x200003bc

08004f2c <_fwalk_sglue>:
 8004f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2e:	0014      	movs	r4, r2
 8004f30:	2600      	movs	r6, #0
 8004f32:	9000      	str	r0, [sp, #0]
 8004f34:	9101      	str	r1, [sp, #4]
 8004f36:	68a5      	ldr	r5, [r4, #8]
 8004f38:	6867      	ldr	r7, [r4, #4]
 8004f3a:	3f01      	subs	r7, #1
 8004f3c:	d504      	bpl.n	8004f48 <_fwalk_sglue+0x1c>
 8004f3e:	6824      	ldr	r4, [r4, #0]
 8004f40:	2c00      	cmp	r4, #0
 8004f42:	d1f8      	bne.n	8004f36 <_fwalk_sglue+0xa>
 8004f44:	0030      	movs	r0, r6
 8004f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f48:	89ab      	ldrh	r3, [r5, #12]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d908      	bls.n	8004f60 <_fwalk_sglue+0x34>
 8004f4e:	220e      	movs	r2, #14
 8004f50:	5eab      	ldrsh	r3, [r5, r2]
 8004f52:	3301      	adds	r3, #1
 8004f54:	d004      	beq.n	8004f60 <_fwalk_sglue+0x34>
 8004f56:	0029      	movs	r1, r5
 8004f58:	9800      	ldr	r0, [sp, #0]
 8004f5a:	9b01      	ldr	r3, [sp, #4]
 8004f5c:	4798      	blx	r3
 8004f5e:	4306      	orrs	r6, r0
 8004f60:	3568      	adds	r5, #104	; 0x68
 8004f62:	e7ea      	b.n	8004f3a <_fwalk_sglue+0xe>

08004f64 <iprintf>:
 8004f64:	b40f      	push	{r0, r1, r2, r3}
 8004f66:	b507      	push	{r0, r1, r2, lr}
 8004f68:	4905      	ldr	r1, [pc, #20]	; (8004f80 <iprintf+0x1c>)
 8004f6a:	ab04      	add	r3, sp, #16
 8004f6c:	6808      	ldr	r0, [r1, #0]
 8004f6e:	cb04      	ldmia	r3!, {r2}
 8004f70:	6881      	ldr	r1, [r0, #8]
 8004f72:	9301      	str	r3, [sp, #4]
 8004f74:	f001 fc4c 	bl	8006810 <_vfiprintf_r>
 8004f78:	b003      	add	sp, #12
 8004f7a:	bc08      	pop	{r3}
 8004f7c:	b004      	add	sp, #16
 8004f7e:	4718      	bx	r3
 8004f80:	20000074 	.word	0x20000074

08004f84 <__sread>:
 8004f84:	b570      	push	{r4, r5, r6, lr}
 8004f86:	000c      	movs	r4, r1
 8004f88:	250e      	movs	r5, #14
 8004f8a:	5f49      	ldrsh	r1, [r1, r5]
 8004f8c:	f000 f878 	bl	8005080 <_read_r>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	db03      	blt.n	8004f9c <__sread+0x18>
 8004f94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f96:	181b      	adds	r3, r3, r0
 8004f98:	6563      	str	r3, [r4, #84]	; 0x54
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	4a02      	ldr	r2, [pc, #8]	; (8004fa8 <__sread+0x24>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	81a3      	strh	r3, [r4, #12]
 8004fa4:	e7f9      	b.n	8004f9a <__sread+0x16>
 8004fa6:	46c0      	nop			; (mov r8, r8)
 8004fa8:	ffffefff 	.word	0xffffefff

08004fac <__swrite>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	001f      	movs	r7, r3
 8004fb0:	898b      	ldrh	r3, [r1, #12]
 8004fb2:	0005      	movs	r5, r0
 8004fb4:	000c      	movs	r4, r1
 8004fb6:	0016      	movs	r6, r2
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	d505      	bpl.n	8004fc8 <__swrite+0x1c>
 8004fbc:	230e      	movs	r3, #14
 8004fbe:	5ec9      	ldrsh	r1, [r1, r3]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	f000 f848 	bl	8005058 <_lseek_r>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	4a05      	ldr	r2, [pc, #20]	; (8004fe0 <__swrite+0x34>)
 8004fcc:	0028      	movs	r0, r5
 8004fce:	4013      	ands	r3, r2
 8004fd0:	81a3      	strh	r3, [r4, #12]
 8004fd2:	0032      	movs	r2, r6
 8004fd4:	230e      	movs	r3, #14
 8004fd6:	5ee1      	ldrsh	r1, [r4, r3]
 8004fd8:	003b      	movs	r3, r7
 8004fda:	f000 f865 	bl	80050a8 <_write_r>
 8004fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fe0:	ffffefff 	.word	0xffffefff

08004fe4 <__sseek>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	000c      	movs	r4, r1
 8004fe8:	250e      	movs	r5, #14
 8004fea:	5f49      	ldrsh	r1, [r1, r5]
 8004fec:	f000 f834 	bl	8005058 <_lseek_r>
 8004ff0:	89a3      	ldrh	r3, [r4, #12]
 8004ff2:	1c42      	adds	r2, r0, #1
 8004ff4:	d103      	bne.n	8004ffe <__sseek+0x1a>
 8004ff6:	4a05      	ldr	r2, [pc, #20]	; (800500c <__sseek+0x28>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	81a3      	strh	r3, [r4, #12]
 8004ffc:	bd70      	pop	{r4, r5, r6, pc}
 8004ffe:	2280      	movs	r2, #128	; 0x80
 8005000:	0152      	lsls	r2, r2, #5
 8005002:	4313      	orrs	r3, r2
 8005004:	81a3      	strh	r3, [r4, #12]
 8005006:	6560      	str	r0, [r4, #84]	; 0x54
 8005008:	e7f8      	b.n	8004ffc <__sseek+0x18>
 800500a:	46c0      	nop			; (mov r8, r8)
 800500c:	ffffefff 	.word	0xffffefff

08005010 <__sclose>:
 8005010:	b510      	push	{r4, lr}
 8005012:	230e      	movs	r3, #14
 8005014:	5ec9      	ldrsh	r1, [r1, r3]
 8005016:	f000 f80d 	bl	8005034 <_close_r>
 800501a:	bd10      	pop	{r4, pc}

0800501c <memset>:
 800501c:	0003      	movs	r3, r0
 800501e:	1882      	adds	r2, r0, r2
 8005020:	4293      	cmp	r3, r2
 8005022:	d100      	bne.n	8005026 <memset+0xa>
 8005024:	4770      	bx	lr
 8005026:	7019      	strb	r1, [r3, #0]
 8005028:	3301      	adds	r3, #1
 800502a:	e7f9      	b.n	8005020 <memset+0x4>

0800502c <_localeconv_r>:
 800502c:	4800      	ldr	r0, [pc, #0]	; (8005030 <_localeconv_r+0x4>)
 800502e:	4770      	bx	lr
 8005030:	20000168 	.word	0x20000168

08005034 <_close_r>:
 8005034:	2300      	movs	r3, #0
 8005036:	b570      	push	{r4, r5, r6, lr}
 8005038:	4d06      	ldr	r5, [pc, #24]	; (8005054 <_close_r+0x20>)
 800503a:	0004      	movs	r4, r0
 800503c:	0008      	movs	r0, r1
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	f7fd fe6b 	bl	8002d1a <_close>
 8005044:	1c43      	adds	r3, r0, #1
 8005046:	d103      	bne.n	8005050 <_close_r+0x1c>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d000      	beq.n	8005050 <_close_r+0x1c>
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	bd70      	pop	{r4, r5, r6, pc}
 8005052:	46c0      	nop			; (mov r8, r8)
 8005054:	200003c0 	.word	0x200003c0

08005058 <_lseek_r>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	0004      	movs	r4, r0
 800505c:	0008      	movs	r0, r1
 800505e:	0011      	movs	r1, r2
 8005060:	001a      	movs	r2, r3
 8005062:	2300      	movs	r3, #0
 8005064:	4d05      	ldr	r5, [pc, #20]	; (800507c <_lseek_r+0x24>)
 8005066:	602b      	str	r3, [r5, #0]
 8005068:	f7fd fe78 	bl	8002d5c <_lseek>
 800506c:	1c43      	adds	r3, r0, #1
 800506e:	d103      	bne.n	8005078 <_lseek_r+0x20>
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d000      	beq.n	8005078 <_lseek_r+0x20>
 8005076:	6023      	str	r3, [r4, #0]
 8005078:	bd70      	pop	{r4, r5, r6, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	200003c0 	.word	0x200003c0

08005080 <_read_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	0004      	movs	r4, r0
 8005084:	0008      	movs	r0, r1
 8005086:	0011      	movs	r1, r2
 8005088:	001a      	movs	r2, r3
 800508a:	2300      	movs	r3, #0
 800508c:	4d05      	ldr	r5, [pc, #20]	; (80050a4 <_read_r+0x24>)
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fd fe0a 	bl	8002ca8 <_read>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d103      	bne.n	80050a0 <_read_r+0x20>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d000      	beq.n	80050a0 <_read_r+0x20>
 800509e:	6023      	str	r3, [r4, #0]
 80050a0:	bd70      	pop	{r4, r5, r6, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	200003c0 	.word	0x200003c0

080050a8 <_write_r>:
 80050a8:	b570      	push	{r4, r5, r6, lr}
 80050aa:	0004      	movs	r4, r0
 80050ac:	0008      	movs	r0, r1
 80050ae:	0011      	movs	r1, r2
 80050b0:	001a      	movs	r2, r3
 80050b2:	2300      	movs	r3, #0
 80050b4:	4d05      	ldr	r5, [pc, #20]	; (80050cc <_write_r+0x24>)
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fd fe13 	bl	8002ce2 <_write>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d103      	bne.n	80050c8 <_write_r+0x20>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d000      	beq.n	80050c8 <_write_r+0x20>
 80050c6:	6023      	str	r3, [r4, #0]
 80050c8:	bd70      	pop	{r4, r5, r6, pc}
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	200003c0 	.word	0x200003c0

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	20000074 	.word	0x20000074

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2600      	movs	r6, #0
 80050e0:	4c0c      	ldr	r4, [pc, #48]	; (8005114 <__libc_init_array+0x38>)
 80050e2:	4d0d      	ldr	r5, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e4:	1b64      	subs	r4, r4, r5
 80050e6:	10a4      	asrs	r4, r4, #2
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	2600      	movs	r6, #0
 80050ee:	f001 ff79 	bl	8006fe4 <_init>
 80050f2:	4c0a      	ldr	r4, [pc, #40]	; (800511c <__libc_init_array+0x40>)
 80050f4:	4d0a      	ldr	r5, [pc, #40]	; (8005120 <__libc_init_array+0x44>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	00b3      	lsls	r3, r6, #2
 8005102:	58eb      	ldr	r3, [r5, r3]
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	00b3      	lsls	r3, r6, #2
 800510c:	58eb      	ldr	r3, [r5, r3]
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	080073ec 	.word	0x080073ec
 8005118:	080073ec 	.word	0x080073ec
 800511c:	080073f0 	.word	0x080073f0
 8005120:	080073ec 	.word	0x080073ec

08005124 <__retarget_lock_init_recursive>:
 8005124:	4770      	bx	lr

08005126 <__retarget_lock_acquire_recursive>:
 8005126:	4770      	bx	lr

08005128 <__retarget_lock_release_recursive>:
 8005128:	4770      	bx	lr

0800512a <memchr>:
 800512a:	b2c9      	uxtb	r1, r1
 800512c:	1882      	adds	r2, r0, r2
 800512e:	4290      	cmp	r0, r2
 8005130:	d101      	bne.n	8005136 <memchr+0xc>
 8005132:	2000      	movs	r0, #0
 8005134:	4770      	bx	lr
 8005136:	7803      	ldrb	r3, [r0, #0]
 8005138:	428b      	cmp	r3, r1
 800513a:	d0fb      	beq.n	8005134 <memchr+0xa>
 800513c:	3001      	adds	r0, #1
 800513e:	e7f6      	b.n	800512e <memchr+0x4>

08005140 <quorem>:
 8005140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005142:	6902      	ldr	r2, [r0, #16]
 8005144:	690b      	ldr	r3, [r1, #16]
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	0007      	movs	r7, r0
 800514a:	9104      	str	r1, [sp, #16]
 800514c:	2000      	movs	r0, #0
 800514e:	429a      	cmp	r2, r3
 8005150:	db69      	blt.n	8005226 <quorem+0xe6>
 8005152:	3b01      	subs	r3, #1
 8005154:	009c      	lsls	r4, r3, #2
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	000b      	movs	r3, r1
 800515a:	3314      	adds	r3, #20
 800515c:	9306      	str	r3, [sp, #24]
 800515e:	191b      	adds	r3, r3, r4
 8005160:	9305      	str	r3, [sp, #20]
 8005162:	003b      	movs	r3, r7
 8005164:	3314      	adds	r3, #20
 8005166:	9303      	str	r3, [sp, #12]
 8005168:	191c      	adds	r4, r3, r4
 800516a:	9b05      	ldr	r3, [sp, #20]
 800516c:	6826      	ldr	r6, [r4, #0]
 800516e:	681d      	ldr	r5, [r3, #0]
 8005170:	0030      	movs	r0, r6
 8005172:	3501      	adds	r5, #1
 8005174:	0029      	movs	r1, r5
 8005176:	f7fa ffe3 	bl	8000140 <__udivsi3>
 800517a:	9002      	str	r0, [sp, #8]
 800517c:	42ae      	cmp	r6, r5
 800517e:	d329      	bcc.n	80051d4 <quorem+0x94>
 8005180:	9b06      	ldr	r3, [sp, #24]
 8005182:	2600      	movs	r6, #0
 8005184:	469c      	mov	ip, r3
 8005186:	9d03      	ldr	r5, [sp, #12]
 8005188:	9606      	str	r6, [sp, #24]
 800518a:	4662      	mov	r2, ip
 800518c:	ca08      	ldmia	r2!, {r3}
 800518e:	6828      	ldr	r0, [r5, #0]
 8005190:	4694      	mov	ip, r2
 8005192:	9a02      	ldr	r2, [sp, #8]
 8005194:	b299      	uxth	r1, r3
 8005196:	4351      	muls	r1, r2
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	4353      	muls	r3, r2
 800519c:	1989      	adds	r1, r1, r6
 800519e:	0c0a      	lsrs	r2, r1, #16
 80051a0:	189b      	adds	r3, r3, r2
 80051a2:	9307      	str	r3, [sp, #28]
 80051a4:	0c1e      	lsrs	r6, r3, #16
 80051a6:	9b06      	ldr	r3, [sp, #24]
 80051a8:	b282      	uxth	r2, r0
 80051aa:	18d2      	adds	r2, r2, r3
 80051ac:	466b      	mov	r3, sp
 80051ae:	b289      	uxth	r1, r1
 80051b0:	8b9b      	ldrh	r3, [r3, #28]
 80051b2:	1a52      	subs	r2, r2, r1
 80051b4:	0c01      	lsrs	r1, r0, #16
 80051b6:	1ac9      	subs	r1, r1, r3
 80051b8:	1413      	asrs	r3, r2, #16
 80051ba:	18cb      	adds	r3, r1, r3
 80051bc:	1419      	asrs	r1, r3, #16
 80051be:	b292      	uxth	r2, r2
 80051c0:	041b      	lsls	r3, r3, #16
 80051c2:	4313      	orrs	r3, r2
 80051c4:	c508      	stmia	r5!, {r3}
 80051c6:	9b05      	ldr	r3, [sp, #20]
 80051c8:	9106      	str	r1, [sp, #24]
 80051ca:	4563      	cmp	r3, ip
 80051cc:	d2dd      	bcs.n	800518a <quorem+0x4a>
 80051ce:	6823      	ldr	r3, [r4, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d030      	beq.n	8005236 <quorem+0xf6>
 80051d4:	0038      	movs	r0, r7
 80051d6:	9904      	ldr	r1, [sp, #16]
 80051d8:	f001 f9de 	bl	8006598 <__mcmp>
 80051dc:	2800      	cmp	r0, #0
 80051de:	db21      	blt.n	8005224 <quorem+0xe4>
 80051e0:	0038      	movs	r0, r7
 80051e2:	2600      	movs	r6, #0
 80051e4:	9b02      	ldr	r3, [sp, #8]
 80051e6:	9c04      	ldr	r4, [sp, #16]
 80051e8:	3301      	adds	r3, #1
 80051ea:	9302      	str	r3, [sp, #8]
 80051ec:	3014      	adds	r0, #20
 80051ee:	3414      	adds	r4, #20
 80051f0:	6803      	ldr	r3, [r0, #0]
 80051f2:	cc02      	ldmia	r4!, {r1}
 80051f4:	b29d      	uxth	r5, r3
 80051f6:	19ad      	adds	r5, r5, r6
 80051f8:	b28a      	uxth	r2, r1
 80051fa:	1aaa      	subs	r2, r5, r2
 80051fc:	0c09      	lsrs	r1, r1, #16
 80051fe:	0c1b      	lsrs	r3, r3, #16
 8005200:	1a5b      	subs	r3, r3, r1
 8005202:	1411      	asrs	r1, r2, #16
 8005204:	185b      	adds	r3, r3, r1
 8005206:	141e      	asrs	r6, r3, #16
 8005208:	b292      	uxth	r2, r2
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	4313      	orrs	r3, r2
 800520e:	c008      	stmia	r0!, {r3}
 8005210:	9b05      	ldr	r3, [sp, #20]
 8005212:	42a3      	cmp	r3, r4
 8005214:	d2ec      	bcs.n	80051f0 <quorem+0xb0>
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	9a03      	ldr	r2, [sp, #12]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	18d3      	adds	r3, r2, r3
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	2a00      	cmp	r2, #0
 8005222:	d015      	beq.n	8005250 <quorem+0x110>
 8005224:	9802      	ldr	r0, [sp, #8]
 8005226:	b009      	add	sp, #36	; 0x24
 8005228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <quorem+0xfe>
 8005230:	9b01      	ldr	r3, [sp, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	3c04      	subs	r4, #4
 800523a:	42a3      	cmp	r3, r4
 800523c:	d3f5      	bcc.n	800522a <quorem+0xea>
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e7c7      	b.n	80051d4 <quorem+0x94>
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	2a00      	cmp	r2, #0
 8005248:	d106      	bne.n	8005258 <quorem+0x118>
 800524a:	9a01      	ldr	r2, [sp, #4]
 800524c:	3a01      	subs	r2, #1
 800524e:	9201      	str	r2, [sp, #4]
 8005250:	9a03      	ldr	r2, [sp, #12]
 8005252:	3b04      	subs	r3, #4
 8005254:	429a      	cmp	r2, r3
 8005256:	d3f5      	bcc.n	8005244 <quorem+0x104>
 8005258:	9b01      	ldr	r3, [sp, #4]
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e7e2      	b.n	8005224 <quorem+0xe4>
	...

08005260 <_dtoa_r>:
 8005260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005262:	0014      	movs	r4, r2
 8005264:	001d      	movs	r5, r3
 8005266:	69c6      	ldr	r6, [r0, #28]
 8005268:	b09d      	sub	sp, #116	; 0x74
 800526a:	9408      	str	r4, [sp, #32]
 800526c:	9509      	str	r5, [sp, #36]	; 0x24
 800526e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8005270:	9004      	str	r0, [sp, #16]
 8005272:	2e00      	cmp	r6, #0
 8005274:	d10f      	bne.n	8005296 <_dtoa_r+0x36>
 8005276:	2010      	movs	r0, #16
 8005278:	f000 fe4a 	bl	8005f10 <malloc>
 800527c:	9b04      	ldr	r3, [sp, #16]
 800527e:	1e02      	subs	r2, r0, #0
 8005280:	61d8      	str	r0, [r3, #28]
 8005282:	d104      	bne.n	800528e <_dtoa_r+0x2e>
 8005284:	21ef      	movs	r1, #239	; 0xef
 8005286:	4bc6      	ldr	r3, [pc, #792]	; (80055a0 <_dtoa_r+0x340>)
 8005288:	48c6      	ldr	r0, [pc, #792]	; (80055a4 <_dtoa_r+0x344>)
 800528a:	f001 fd55 	bl	8006d38 <__assert_func>
 800528e:	6046      	str	r6, [r0, #4]
 8005290:	6086      	str	r6, [r0, #8]
 8005292:	6006      	str	r6, [r0, #0]
 8005294:	60c6      	str	r6, [r0, #12]
 8005296:	9b04      	ldr	r3, [sp, #16]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	6819      	ldr	r1, [r3, #0]
 800529c:	2900      	cmp	r1, #0
 800529e:	d00b      	beq.n	80052b8 <_dtoa_r+0x58>
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	2301      	movs	r3, #1
 80052a4:	4093      	lsls	r3, r2
 80052a6:	604a      	str	r2, [r1, #4]
 80052a8:	608b      	str	r3, [r1, #8]
 80052aa:	9804      	ldr	r0, [sp, #16]
 80052ac:	f000 ff32 	bl	8006114 <_Bfree>
 80052b0:	2200      	movs	r2, #0
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	69db      	ldr	r3, [r3, #28]
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	2d00      	cmp	r5, #0
 80052ba:	da1e      	bge.n	80052fa <_dtoa_r+0x9a>
 80052bc:	2301      	movs	r3, #1
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	006b      	lsls	r3, r5, #1
 80052c2:	085b      	lsrs	r3, r3, #1
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80052c8:	4bb7      	ldr	r3, [pc, #732]	; (80055a8 <_dtoa_r+0x348>)
 80052ca:	4ab7      	ldr	r2, [pc, #732]	; (80055a8 <_dtoa_r+0x348>)
 80052cc:	403b      	ands	r3, r7
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d116      	bne.n	8005300 <_dtoa_r+0xa0>
 80052d2:	4bb6      	ldr	r3, [pc, #728]	; (80055ac <_dtoa_r+0x34c>)
 80052d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	033b      	lsls	r3, r7, #12
 80052da:	0b1b      	lsrs	r3, r3, #12
 80052dc:	4323      	orrs	r3, r4
 80052de:	d101      	bne.n	80052e4 <_dtoa_r+0x84>
 80052e0:	f000 fdb5 	bl	8005e4e <_dtoa_r+0xbee>
 80052e4:	4bb2      	ldr	r3, [pc, #712]	; (80055b0 <_dtoa_r+0x350>)
 80052e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052e8:	9306      	str	r3, [sp, #24]
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d002      	beq.n	80052f4 <_dtoa_r+0x94>
 80052ee:	4bb1      	ldr	r3, [pc, #708]	; (80055b4 <_dtoa_r+0x354>)
 80052f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	9806      	ldr	r0, [sp, #24]
 80052f6:	b01d      	add	sp, #116	; 0x74
 80052f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fa:	2300      	movs	r3, #0
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	e7e2      	b.n	80052c6 <_dtoa_r+0x66>
 8005300:	9a08      	ldr	r2, [sp, #32]
 8005302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005304:	9210      	str	r2, [sp, #64]	; 0x40
 8005306:	9311      	str	r3, [sp, #68]	; 0x44
 8005308:	9810      	ldr	r0, [sp, #64]	; 0x40
 800530a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	f7fb f89c 	bl	800044c <__aeabi_dcmpeq>
 8005314:	1e06      	subs	r6, r0, #0
 8005316:	d009      	beq.n	800532c <_dtoa_r+0xcc>
 8005318:	2301      	movs	r3, #1
 800531a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	4ba6      	ldr	r3, [pc, #664]	; (80055b8 <_dtoa_r+0x358>)
 8005320:	9306      	str	r3, [sp, #24]
 8005322:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0e5      	beq.n	80052f4 <_dtoa_r+0x94>
 8005328:	4ba4      	ldr	r3, [pc, #656]	; (80055bc <_dtoa_r+0x35c>)
 800532a:	e7e1      	b.n	80052f0 <_dtoa_r+0x90>
 800532c:	ab1a      	add	r3, sp, #104	; 0x68
 800532e:	9301      	str	r3, [sp, #4]
 8005330:	ab1b      	add	r3, sp, #108	; 0x6c
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	9804      	ldr	r0, [sp, #16]
 8005336:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005338:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800533a:	f001 f9e1 	bl	8006700 <__d2b>
 800533e:	007a      	lsls	r2, r7, #1
 8005340:	9005      	str	r0, [sp, #20]
 8005342:	0d52      	lsrs	r2, r2, #21
 8005344:	d100      	bne.n	8005348 <_dtoa_r+0xe8>
 8005346:	e07b      	b.n	8005440 <_dtoa_r+0x1e0>
 8005348:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800534a:	9617      	str	r6, [sp, #92]	; 0x5c
 800534c:	0319      	lsls	r1, r3, #12
 800534e:	4b9c      	ldr	r3, [pc, #624]	; (80055c0 <_dtoa_r+0x360>)
 8005350:	0b09      	lsrs	r1, r1, #12
 8005352:	430b      	orrs	r3, r1
 8005354:	499b      	ldr	r1, [pc, #620]	; (80055c4 <_dtoa_r+0x364>)
 8005356:	1857      	adds	r7, r2, r1
 8005358:	9810      	ldr	r0, [sp, #64]	; 0x40
 800535a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800535c:	0019      	movs	r1, r3
 800535e:	2200      	movs	r2, #0
 8005360:	4b99      	ldr	r3, [pc, #612]	; (80055c8 <_dtoa_r+0x368>)
 8005362:	f7fc fabd 	bl	80018e0 <__aeabi_dsub>
 8005366:	4a99      	ldr	r2, [pc, #612]	; (80055cc <_dtoa_r+0x36c>)
 8005368:	4b99      	ldr	r3, [pc, #612]	; (80055d0 <_dtoa_r+0x370>)
 800536a:	f7fb fff7 	bl	800135c <__aeabi_dmul>
 800536e:	4a99      	ldr	r2, [pc, #612]	; (80055d4 <_dtoa_r+0x374>)
 8005370:	4b99      	ldr	r3, [pc, #612]	; (80055d8 <_dtoa_r+0x378>)
 8005372:	f7fb f899 	bl	80004a8 <__aeabi_dadd>
 8005376:	0004      	movs	r4, r0
 8005378:	0038      	movs	r0, r7
 800537a:	000d      	movs	r5, r1
 800537c:	f7fc fe86 	bl	800208c <__aeabi_i2d>
 8005380:	4a96      	ldr	r2, [pc, #600]	; (80055dc <_dtoa_r+0x37c>)
 8005382:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <_dtoa_r+0x380>)
 8005384:	f7fb ffea 	bl	800135c <__aeabi_dmul>
 8005388:	0002      	movs	r2, r0
 800538a:	000b      	movs	r3, r1
 800538c:	0020      	movs	r0, r4
 800538e:	0029      	movs	r1, r5
 8005390:	f7fb f88a 	bl	80004a8 <__aeabi_dadd>
 8005394:	0004      	movs	r4, r0
 8005396:	000d      	movs	r5, r1
 8005398:	f7fc fe42 	bl	8002020 <__aeabi_d2iz>
 800539c:	2200      	movs	r2, #0
 800539e:	9003      	str	r0, [sp, #12]
 80053a0:	2300      	movs	r3, #0
 80053a2:	0020      	movs	r0, r4
 80053a4:	0029      	movs	r1, r5
 80053a6:	f7fb f857 	bl	8000458 <__aeabi_dcmplt>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d00b      	beq.n	80053c6 <_dtoa_r+0x166>
 80053ae:	9803      	ldr	r0, [sp, #12]
 80053b0:	f7fc fe6c 	bl	800208c <__aeabi_i2d>
 80053b4:	002b      	movs	r3, r5
 80053b6:	0022      	movs	r2, r4
 80053b8:	f7fb f848 	bl	800044c <__aeabi_dcmpeq>
 80053bc:	4243      	negs	r3, r0
 80053be:	4158      	adcs	r0, r3
 80053c0:	9b03      	ldr	r3, [sp, #12]
 80053c2:	1a1b      	subs	r3, r3, r0
 80053c4:	9303      	str	r3, [sp, #12]
 80053c6:	2301      	movs	r3, #1
 80053c8:	9316      	str	r3, [sp, #88]	; 0x58
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	2b16      	cmp	r3, #22
 80053ce:	d810      	bhi.n	80053f2 <_dtoa_r+0x192>
 80053d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80053d2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80053d4:	9a03      	ldr	r2, [sp, #12]
 80053d6:	4b83      	ldr	r3, [pc, #524]	; (80055e4 <_dtoa_r+0x384>)
 80053d8:	00d2      	lsls	r2, r2, #3
 80053da:	189b      	adds	r3, r3, r2
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f7fb f83a 	bl	8000458 <__aeabi_dcmplt>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d047      	beq.n	8005478 <_dtoa_r+0x218>
 80053e8:	9b03      	ldr	r3, [sp, #12]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9316      	str	r3, [sp, #88]	; 0x58
 80053f2:	2200      	movs	r2, #0
 80053f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80053f6:	920a      	str	r2, [sp, #40]	; 0x28
 80053f8:	1bdb      	subs	r3, r3, r7
 80053fa:	1e5a      	subs	r2, r3, #1
 80053fc:	d53e      	bpl.n	800547c <_dtoa_r+0x21c>
 80053fe:	2201      	movs	r2, #1
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	930a      	str	r3, [sp, #40]	; 0x28
 8005404:	2300      	movs	r3, #0
 8005406:	930c      	str	r3, [sp, #48]	; 0x30
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	db38      	blt.n	8005480 <_dtoa_r+0x220>
 800540e:	9a03      	ldr	r2, [sp, #12]
 8005410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005412:	4694      	mov	ip, r2
 8005414:	4463      	add	r3, ip
 8005416:	930c      	str	r3, [sp, #48]	; 0x30
 8005418:	2300      	movs	r3, #0
 800541a:	9213      	str	r2, [sp, #76]	; 0x4c
 800541c:	930d      	str	r3, [sp, #52]	; 0x34
 800541e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005420:	2401      	movs	r4, #1
 8005422:	2b09      	cmp	r3, #9
 8005424:	d867      	bhi.n	80054f6 <_dtoa_r+0x296>
 8005426:	2b05      	cmp	r3, #5
 8005428:	dd02      	ble.n	8005430 <_dtoa_r+0x1d0>
 800542a:	2400      	movs	r4, #0
 800542c:	3b04      	subs	r3, #4
 800542e:	9322      	str	r3, [sp, #136]	; 0x88
 8005430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005432:	1e98      	subs	r0, r3, #2
 8005434:	2803      	cmp	r0, #3
 8005436:	d867      	bhi.n	8005508 <_dtoa_r+0x2a8>
 8005438:	f7fa fe6e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800543c:	5b383a2b 	.word	0x5b383a2b
 8005440:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005442:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005444:	18f6      	adds	r6, r6, r3
 8005446:	4b68      	ldr	r3, [pc, #416]	; (80055e8 <_dtoa_r+0x388>)
 8005448:	18f2      	adds	r2, r6, r3
 800544a:	2a20      	cmp	r2, #32
 800544c:	dd0f      	ble.n	800546e <_dtoa_r+0x20e>
 800544e:	2340      	movs	r3, #64	; 0x40
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	409f      	lsls	r7, r3
 8005454:	4b65      	ldr	r3, [pc, #404]	; (80055ec <_dtoa_r+0x38c>)
 8005456:	0038      	movs	r0, r7
 8005458:	18f3      	adds	r3, r6, r3
 800545a:	40dc      	lsrs	r4, r3
 800545c:	4320      	orrs	r0, r4
 800545e:	f7fc fe45 	bl	80020ec <__aeabi_ui2d>
 8005462:	2201      	movs	r2, #1
 8005464:	4b62      	ldr	r3, [pc, #392]	; (80055f0 <_dtoa_r+0x390>)
 8005466:	1e77      	subs	r7, r6, #1
 8005468:	18cb      	adds	r3, r1, r3
 800546a:	9217      	str	r2, [sp, #92]	; 0x5c
 800546c:	e776      	b.n	800535c <_dtoa_r+0xfc>
 800546e:	2320      	movs	r3, #32
 8005470:	0020      	movs	r0, r4
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	4098      	lsls	r0, r3
 8005476:	e7f2      	b.n	800545e <_dtoa_r+0x1fe>
 8005478:	9016      	str	r0, [sp, #88]	; 0x58
 800547a:	e7ba      	b.n	80053f2 <_dtoa_r+0x192>
 800547c:	920c      	str	r2, [sp, #48]	; 0x30
 800547e:	e7c3      	b.n	8005408 <_dtoa_r+0x1a8>
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	9a03      	ldr	r2, [sp, #12]
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	930a      	str	r3, [sp, #40]	; 0x28
 8005488:	4253      	negs	r3, r2
 800548a:	930d      	str	r3, [sp, #52]	; 0x34
 800548c:	2300      	movs	r3, #0
 800548e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005490:	e7c5      	b.n	800541e <_dtoa_r+0x1be>
 8005492:	2300      	movs	r3, #0
 8005494:	930f      	str	r3, [sp, #60]	; 0x3c
 8005496:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005498:	930b      	str	r3, [sp, #44]	; 0x2c
 800549a:	9307      	str	r3, [sp, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	dc13      	bgt.n	80054c8 <_dtoa_r+0x268>
 80054a0:	2301      	movs	r3, #1
 80054a2:	001a      	movs	r2, r3
 80054a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80054a6:	9307      	str	r3, [sp, #28]
 80054a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80054aa:	e00d      	b.n	80054c8 <_dtoa_r+0x268>
 80054ac:	2301      	movs	r3, #1
 80054ae:	e7f1      	b.n	8005494 <_dtoa_r+0x234>
 80054b0:	2300      	movs	r3, #0
 80054b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80054b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054b6:	4694      	mov	ip, r2
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	4463      	add	r3, ip
 80054bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054be:	3301      	adds	r3, #1
 80054c0:	9307      	str	r3, [sp, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dc00      	bgt.n	80054c8 <_dtoa_r+0x268>
 80054c6:	2301      	movs	r3, #1
 80054c8:	9a04      	ldr	r2, [sp, #16]
 80054ca:	2100      	movs	r1, #0
 80054cc:	69d0      	ldr	r0, [r2, #28]
 80054ce:	2204      	movs	r2, #4
 80054d0:	0015      	movs	r5, r2
 80054d2:	3514      	adds	r5, #20
 80054d4:	429d      	cmp	r5, r3
 80054d6:	d91b      	bls.n	8005510 <_dtoa_r+0x2b0>
 80054d8:	6041      	str	r1, [r0, #4]
 80054da:	9804      	ldr	r0, [sp, #16]
 80054dc:	f000 fdd6 	bl	800608c <_Balloc>
 80054e0:	9006      	str	r0, [sp, #24]
 80054e2:	2800      	cmp	r0, #0
 80054e4:	d117      	bne.n	8005516 <_dtoa_r+0x2b6>
 80054e6:	21b0      	movs	r1, #176	; 0xb0
 80054e8:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <_dtoa_r+0x394>)
 80054ea:	482e      	ldr	r0, [pc, #184]	; (80055a4 <_dtoa_r+0x344>)
 80054ec:	9a06      	ldr	r2, [sp, #24]
 80054ee:	31ff      	adds	r1, #255	; 0xff
 80054f0:	e6cb      	b.n	800528a <_dtoa_r+0x2a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e7dd      	b.n	80054b2 <_dtoa_r+0x252>
 80054f6:	2300      	movs	r3, #0
 80054f8:	940f      	str	r4, [sp, #60]	; 0x3c
 80054fa:	9322      	str	r3, [sp, #136]	; 0x88
 80054fc:	3b01      	subs	r3, #1
 80054fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8005500:	9307      	str	r3, [sp, #28]
 8005502:	2200      	movs	r2, #0
 8005504:	3313      	adds	r3, #19
 8005506:	e7cf      	b.n	80054a8 <_dtoa_r+0x248>
 8005508:	2301      	movs	r3, #1
 800550a:	930f      	str	r3, [sp, #60]	; 0x3c
 800550c:	3b02      	subs	r3, #2
 800550e:	e7f6      	b.n	80054fe <_dtoa_r+0x29e>
 8005510:	3101      	adds	r1, #1
 8005512:	0052      	lsls	r2, r2, #1
 8005514:	e7dc      	b.n	80054d0 <_dtoa_r+0x270>
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	9a06      	ldr	r2, [sp, #24]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	9b07      	ldr	r3, [sp, #28]
 8005520:	2b0e      	cmp	r3, #14
 8005522:	d900      	bls.n	8005526 <_dtoa_r+0x2c6>
 8005524:	e0e5      	b.n	80056f2 <_dtoa_r+0x492>
 8005526:	2c00      	cmp	r4, #0
 8005528:	d100      	bne.n	800552c <_dtoa_r+0x2cc>
 800552a:	e0e2      	b.n	80056f2 <_dtoa_r+0x492>
 800552c:	9b03      	ldr	r3, [sp, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	dd64      	ble.n	80055fc <_dtoa_r+0x39c>
 8005532:	210f      	movs	r1, #15
 8005534:	9a03      	ldr	r2, [sp, #12]
 8005536:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <_dtoa_r+0x384>)
 8005538:	400a      	ands	r2, r1
 800553a:	00d2      	lsls	r2, r2, #3
 800553c:	189b      	adds	r3, r3, r2
 800553e:	681e      	ldr	r6, [r3, #0]
 8005540:	685f      	ldr	r7, [r3, #4]
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	2402      	movs	r4, #2
 8005546:	111d      	asrs	r5, r3, #4
 8005548:	05db      	lsls	r3, r3, #23
 800554a:	d50a      	bpl.n	8005562 <_dtoa_r+0x302>
 800554c:	4b2a      	ldr	r3, [pc, #168]	; (80055f8 <_dtoa_r+0x398>)
 800554e:	400d      	ands	r5, r1
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005556:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005558:	f7fb fb06 	bl	8000b68 <__aeabi_ddiv>
 800555c:	9008      	str	r0, [sp, #32]
 800555e:	9109      	str	r1, [sp, #36]	; 0x24
 8005560:	3401      	adds	r4, #1
 8005562:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <_dtoa_r+0x398>)
 8005564:	930e      	str	r3, [sp, #56]	; 0x38
 8005566:	2d00      	cmp	r5, #0
 8005568:	d108      	bne.n	800557c <_dtoa_r+0x31c>
 800556a:	9808      	ldr	r0, [sp, #32]
 800556c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800556e:	0032      	movs	r2, r6
 8005570:	003b      	movs	r3, r7
 8005572:	f7fb faf9 	bl	8000b68 <__aeabi_ddiv>
 8005576:	9008      	str	r0, [sp, #32]
 8005578:	9109      	str	r1, [sp, #36]	; 0x24
 800557a:	e05a      	b.n	8005632 <_dtoa_r+0x3d2>
 800557c:	2301      	movs	r3, #1
 800557e:	421d      	tst	r5, r3
 8005580:	d009      	beq.n	8005596 <_dtoa_r+0x336>
 8005582:	18e4      	adds	r4, r4, r3
 8005584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005586:	0030      	movs	r0, r6
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	0039      	movs	r1, r7
 800558e:	f7fb fee5 	bl	800135c <__aeabi_dmul>
 8005592:	0006      	movs	r6, r0
 8005594:	000f      	movs	r7, r1
 8005596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005598:	106d      	asrs	r5, r5, #1
 800559a:	3308      	adds	r3, #8
 800559c:	e7e2      	b.n	8005564 <_dtoa_r+0x304>
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	080070bd 	.word	0x080070bd
 80055a4:	080070d4 	.word	0x080070d4
 80055a8:	7ff00000 	.word	0x7ff00000
 80055ac:	0000270f 	.word	0x0000270f
 80055b0:	080070b9 	.word	0x080070b9
 80055b4:	080070bc 	.word	0x080070bc
 80055b8:	0800708c 	.word	0x0800708c
 80055bc:	0800708d 	.word	0x0800708d
 80055c0:	3ff00000 	.word	0x3ff00000
 80055c4:	fffffc01 	.word	0xfffffc01
 80055c8:	3ff80000 	.word	0x3ff80000
 80055cc:	636f4361 	.word	0x636f4361
 80055d0:	3fd287a7 	.word	0x3fd287a7
 80055d4:	8b60c8b3 	.word	0x8b60c8b3
 80055d8:	3fc68a28 	.word	0x3fc68a28
 80055dc:	509f79fb 	.word	0x509f79fb
 80055e0:	3fd34413 	.word	0x3fd34413
 80055e4:	080071c0 	.word	0x080071c0
 80055e8:	00000432 	.word	0x00000432
 80055ec:	00000412 	.word	0x00000412
 80055f0:	fe100000 	.word	0xfe100000
 80055f4:	0800712c 	.word	0x0800712c
 80055f8:	08007198 	.word	0x08007198
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	2402      	movs	r4, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d016      	beq.n	8005632 <_dtoa_r+0x3d2>
 8005604:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005606:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005608:	220f      	movs	r2, #15
 800560a:	425d      	negs	r5, r3
 800560c:	402a      	ands	r2, r5
 800560e:	4bdd      	ldr	r3, [pc, #884]	; (8005984 <_dtoa_r+0x724>)
 8005610:	00d2      	lsls	r2, r2, #3
 8005612:	189b      	adds	r3, r3, r2
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f7fb fea0 	bl	800135c <__aeabi_dmul>
 800561c:	2701      	movs	r7, #1
 800561e:	2300      	movs	r3, #0
 8005620:	9008      	str	r0, [sp, #32]
 8005622:	9109      	str	r1, [sp, #36]	; 0x24
 8005624:	4ed8      	ldr	r6, [pc, #864]	; (8005988 <_dtoa_r+0x728>)
 8005626:	112d      	asrs	r5, r5, #4
 8005628:	2d00      	cmp	r5, #0
 800562a:	d000      	beq.n	800562e <_dtoa_r+0x3ce>
 800562c:	e091      	b.n	8005752 <_dtoa_r+0x4f2>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1a1      	bne.n	8005576 <_dtoa_r+0x316>
 8005632:	9e08      	ldr	r6, [sp, #32]
 8005634:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005636:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005638:	2b00      	cmp	r3, #0
 800563a:	d100      	bne.n	800563e <_dtoa_r+0x3de>
 800563c:	e094      	b.n	8005768 <_dtoa_r+0x508>
 800563e:	2200      	movs	r2, #0
 8005640:	0030      	movs	r0, r6
 8005642:	0039      	movs	r1, r7
 8005644:	4bd1      	ldr	r3, [pc, #836]	; (800598c <_dtoa_r+0x72c>)
 8005646:	f7fa ff07 	bl	8000458 <__aeabi_dcmplt>
 800564a:	2800      	cmp	r0, #0
 800564c:	d100      	bne.n	8005650 <_dtoa_r+0x3f0>
 800564e:	e08b      	b.n	8005768 <_dtoa_r+0x508>
 8005650:	9b07      	ldr	r3, [sp, #28]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d100      	bne.n	8005658 <_dtoa_r+0x3f8>
 8005656:	e087      	b.n	8005768 <_dtoa_r+0x508>
 8005658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800565a:	2b00      	cmp	r3, #0
 800565c:	dd45      	ble.n	80056ea <_dtoa_r+0x48a>
 800565e:	9b03      	ldr	r3, [sp, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	3b01      	subs	r3, #1
 8005664:	930e      	str	r3, [sp, #56]	; 0x38
 8005666:	0030      	movs	r0, r6
 8005668:	4bc9      	ldr	r3, [pc, #804]	; (8005990 <_dtoa_r+0x730>)
 800566a:	0039      	movs	r1, r7
 800566c:	f7fb fe76 	bl	800135c <__aeabi_dmul>
 8005670:	9008      	str	r0, [sp, #32]
 8005672:	9109      	str	r1, [sp, #36]	; 0x24
 8005674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005676:	3401      	adds	r4, #1
 8005678:	0020      	movs	r0, r4
 800567a:	9e08      	ldr	r6, [sp, #32]
 800567c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800567e:	9312      	str	r3, [sp, #72]	; 0x48
 8005680:	f7fc fd04 	bl	800208c <__aeabi_i2d>
 8005684:	0032      	movs	r2, r6
 8005686:	003b      	movs	r3, r7
 8005688:	f7fb fe68 	bl	800135c <__aeabi_dmul>
 800568c:	2200      	movs	r2, #0
 800568e:	4bc1      	ldr	r3, [pc, #772]	; (8005994 <_dtoa_r+0x734>)
 8005690:	f7fa ff0a 	bl	80004a8 <__aeabi_dadd>
 8005694:	4ac0      	ldr	r2, [pc, #768]	; (8005998 <_dtoa_r+0x738>)
 8005696:	9014      	str	r0, [sp, #80]	; 0x50
 8005698:	9115      	str	r1, [sp, #84]	; 0x54
 800569a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800569c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800569e:	4694      	mov	ip, r2
 80056a0:	9308      	str	r3, [sp, #32]
 80056a2:	9409      	str	r4, [sp, #36]	; 0x24
 80056a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80056a6:	4463      	add	r3, ip
 80056a8:	9318      	str	r3, [sp, #96]	; 0x60
 80056aa:	9309      	str	r3, [sp, #36]	; 0x24
 80056ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d15e      	bne.n	8005770 <_dtoa_r+0x510>
 80056b2:	2200      	movs	r2, #0
 80056b4:	4bb9      	ldr	r3, [pc, #740]	; (800599c <_dtoa_r+0x73c>)
 80056b6:	0030      	movs	r0, r6
 80056b8:	0039      	movs	r1, r7
 80056ba:	f7fc f911 	bl	80018e0 <__aeabi_dsub>
 80056be:	9a08      	ldr	r2, [sp, #32]
 80056c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80056c2:	0004      	movs	r4, r0
 80056c4:	000d      	movs	r5, r1
 80056c6:	f7fa fedb 	bl	8000480 <__aeabi_dcmpgt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d000      	beq.n	80056d0 <_dtoa_r+0x470>
 80056ce:	e2b3      	b.n	8005c38 <_dtoa_r+0x9d8>
 80056d0:	48b3      	ldr	r0, [pc, #716]	; (80059a0 <_dtoa_r+0x740>)
 80056d2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80056d4:	4684      	mov	ip, r0
 80056d6:	4461      	add	r1, ip
 80056d8:	000b      	movs	r3, r1
 80056da:	0020      	movs	r0, r4
 80056dc:	0029      	movs	r1, r5
 80056de:	9a08      	ldr	r2, [sp, #32]
 80056e0:	f7fa feba 	bl	8000458 <__aeabi_dcmplt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d000      	beq.n	80056ea <_dtoa_r+0x48a>
 80056e8:	e2a3      	b.n	8005c32 <_dtoa_r+0x9d2>
 80056ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056ec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80056ee:	9308      	str	r3, [sp, #32]
 80056f0:	9409      	str	r4, [sp, #36]	; 0x24
 80056f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da00      	bge.n	80056fa <_dtoa_r+0x49a>
 80056f8:	e179      	b.n	80059ee <_dtoa_r+0x78e>
 80056fa:	9a03      	ldr	r2, [sp, #12]
 80056fc:	2a0e      	cmp	r2, #14
 80056fe:	dd00      	ble.n	8005702 <_dtoa_r+0x4a2>
 8005700:	e175      	b.n	80059ee <_dtoa_r+0x78e>
 8005702:	4ba0      	ldr	r3, [pc, #640]	; (8005984 <_dtoa_r+0x724>)
 8005704:	00d2      	lsls	r2, r2, #3
 8005706:	189b      	adds	r3, r3, r2
 8005708:	681e      	ldr	r6, [r3, #0]
 800570a:	685f      	ldr	r7, [r3, #4]
 800570c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800570e:	2b00      	cmp	r3, #0
 8005710:	db00      	blt.n	8005714 <_dtoa_r+0x4b4>
 8005712:	e0e5      	b.n	80058e0 <_dtoa_r+0x680>
 8005714:	9b07      	ldr	r3, [sp, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	dd00      	ble.n	800571c <_dtoa_r+0x4bc>
 800571a:	e0e1      	b.n	80058e0 <_dtoa_r+0x680>
 800571c:	d000      	beq.n	8005720 <_dtoa_r+0x4c0>
 800571e:	e288      	b.n	8005c32 <_dtoa_r+0x9d2>
 8005720:	2200      	movs	r2, #0
 8005722:	0030      	movs	r0, r6
 8005724:	0039      	movs	r1, r7
 8005726:	4b9d      	ldr	r3, [pc, #628]	; (800599c <_dtoa_r+0x73c>)
 8005728:	f7fb fe18 	bl	800135c <__aeabi_dmul>
 800572c:	9a08      	ldr	r2, [sp, #32]
 800572e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005730:	f7fa feb0 	bl	8000494 <__aeabi_dcmpge>
 8005734:	9e07      	ldr	r6, [sp, #28]
 8005736:	0037      	movs	r7, r6
 8005738:	2800      	cmp	r0, #0
 800573a:	d000      	beq.n	800573e <_dtoa_r+0x4de>
 800573c:	e25f      	b.n	8005bfe <_dtoa_r+0x99e>
 800573e:	9b06      	ldr	r3, [sp, #24]
 8005740:	9a06      	ldr	r2, [sp, #24]
 8005742:	3301      	adds	r3, #1
 8005744:	9308      	str	r3, [sp, #32]
 8005746:	2331      	movs	r3, #49	; 0x31
 8005748:	7013      	strb	r3, [r2, #0]
 800574a:	9b03      	ldr	r3, [sp, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	e25a      	b.n	8005c08 <_dtoa_r+0x9a8>
 8005752:	423d      	tst	r5, r7
 8005754:	d005      	beq.n	8005762 <_dtoa_r+0x502>
 8005756:	6832      	ldr	r2, [r6, #0]
 8005758:	6873      	ldr	r3, [r6, #4]
 800575a:	f7fb fdff 	bl	800135c <__aeabi_dmul>
 800575e:	003b      	movs	r3, r7
 8005760:	3401      	adds	r4, #1
 8005762:	106d      	asrs	r5, r5, #1
 8005764:	3608      	adds	r6, #8
 8005766:	e75f      	b.n	8005628 <_dtoa_r+0x3c8>
 8005768:	9b03      	ldr	r3, [sp, #12]
 800576a:	930e      	str	r3, [sp, #56]	; 0x38
 800576c:	9b07      	ldr	r3, [sp, #28]
 800576e:	e783      	b.n	8005678 <_dtoa_r+0x418>
 8005770:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005772:	4b84      	ldr	r3, [pc, #528]	; (8005984 <_dtoa_r+0x724>)
 8005774:	3a01      	subs	r2, #1
 8005776:	00d2      	lsls	r2, r2, #3
 8005778:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800577a:	189b      	adds	r3, r3, r2
 800577c:	9c08      	ldr	r4, [sp, #32]
 800577e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2900      	cmp	r1, #0
 8005786:	d051      	beq.n	800582c <_dtoa_r+0x5cc>
 8005788:	2000      	movs	r0, #0
 800578a:	4986      	ldr	r1, [pc, #536]	; (80059a4 <_dtoa_r+0x744>)
 800578c:	f7fb f9ec 	bl	8000b68 <__aeabi_ddiv>
 8005790:	0022      	movs	r2, r4
 8005792:	002b      	movs	r3, r5
 8005794:	f7fc f8a4 	bl	80018e0 <__aeabi_dsub>
 8005798:	9a06      	ldr	r2, [sp, #24]
 800579a:	0004      	movs	r4, r0
 800579c:	4694      	mov	ip, r2
 800579e:	000d      	movs	r5, r1
 80057a0:	9b06      	ldr	r3, [sp, #24]
 80057a2:	9314      	str	r3, [sp, #80]	; 0x50
 80057a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057a6:	4463      	add	r3, ip
 80057a8:	9318      	str	r3, [sp, #96]	; 0x60
 80057aa:	0039      	movs	r1, r7
 80057ac:	0030      	movs	r0, r6
 80057ae:	f7fc fc37 	bl	8002020 <__aeabi_d2iz>
 80057b2:	9012      	str	r0, [sp, #72]	; 0x48
 80057b4:	f7fc fc6a 	bl	800208c <__aeabi_i2d>
 80057b8:	0002      	movs	r2, r0
 80057ba:	000b      	movs	r3, r1
 80057bc:	0030      	movs	r0, r6
 80057be:	0039      	movs	r1, r7
 80057c0:	f7fc f88e 	bl	80018e0 <__aeabi_dsub>
 80057c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80057c8:	3301      	adds	r3, #1
 80057ca:	9308      	str	r3, [sp, #32]
 80057cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ce:	0006      	movs	r6, r0
 80057d0:	3330      	adds	r3, #48	; 0x30
 80057d2:	7013      	strb	r3, [r2, #0]
 80057d4:	0022      	movs	r2, r4
 80057d6:	002b      	movs	r3, r5
 80057d8:	000f      	movs	r7, r1
 80057da:	f7fa fe3d 	bl	8000458 <__aeabi_dcmplt>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d174      	bne.n	80058cc <_dtoa_r+0x66c>
 80057e2:	0032      	movs	r2, r6
 80057e4:	003b      	movs	r3, r7
 80057e6:	2000      	movs	r0, #0
 80057e8:	4968      	ldr	r1, [pc, #416]	; (800598c <_dtoa_r+0x72c>)
 80057ea:	f7fc f879 	bl	80018e0 <__aeabi_dsub>
 80057ee:	0022      	movs	r2, r4
 80057f0:	002b      	movs	r3, r5
 80057f2:	f7fa fe31 	bl	8000458 <__aeabi_dcmplt>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d000      	beq.n	80057fc <_dtoa_r+0x59c>
 80057fa:	e0d7      	b.n	80059ac <_dtoa_r+0x74c>
 80057fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80057fe:	9a08      	ldr	r2, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	d100      	bne.n	8005806 <_dtoa_r+0x5a6>
 8005804:	e771      	b.n	80056ea <_dtoa_r+0x48a>
 8005806:	2200      	movs	r2, #0
 8005808:	0020      	movs	r0, r4
 800580a:	0029      	movs	r1, r5
 800580c:	4b60      	ldr	r3, [pc, #384]	; (8005990 <_dtoa_r+0x730>)
 800580e:	f7fb fda5 	bl	800135c <__aeabi_dmul>
 8005812:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <_dtoa_r+0x730>)
 8005814:	0004      	movs	r4, r0
 8005816:	000d      	movs	r5, r1
 8005818:	0030      	movs	r0, r6
 800581a:	0039      	movs	r1, r7
 800581c:	2200      	movs	r2, #0
 800581e:	f7fb fd9d 	bl	800135c <__aeabi_dmul>
 8005822:	9b08      	ldr	r3, [sp, #32]
 8005824:	0006      	movs	r6, r0
 8005826:	000f      	movs	r7, r1
 8005828:	9314      	str	r3, [sp, #80]	; 0x50
 800582a:	e7be      	b.n	80057aa <_dtoa_r+0x54a>
 800582c:	0020      	movs	r0, r4
 800582e:	0029      	movs	r1, r5
 8005830:	f7fb fd94 	bl	800135c <__aeabi_dmul>
 8005834:	9a06      	ldr	r2, [sp, #24]
 8005836:	9b06      	ldr	r3, [sp, #24]
 8005838:	4694      	mov	ip, r2
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800583e:	9014      	str	r0, [sp, #80]	; 0x50
 8005840:	9115      	str	r1, [sp, #84]	; 0x54
 8005842:	4463      	add	r3, ip
 8005844:	9319      	str	r3, [sp, #100]	; 0x64
 8005846:	0030      	movs	r0, r6
 8005848:	0039      	movs	r1, r7
 800584a:	f7fc fbe9 	bl	8002020 <__aeabi_d2iz>
 800584e:	9018      	str	r0, [sp, #96]	; 0x60
 8005850:	f7fc fc1c 	bl	800208c <__aeabi_i2d>
 8005854:	0002      	movs	r2, r0
 8005856:	000b      	movs	r3, r1
 8005858:	0030      	movs	r0, r6
 800585a:	0039      	movs	r1, r7
 800585c:	f7fc f840 	bl	80018e0 <__aeabi_dsub>
 8005860:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8005862:	9b08      	ldr	r3, [sp, #32]
 8005864:	3630      	adds	r6, #48	; 0x30
 8005866:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005868:	701e      	strb	r6, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	0004      	movs	r4, r0
 800586e:	000d      	movs	r5, r1
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	4293      	cmp	r3, r2
 8005874:	d12d      	bne.n	80058d2 <_dtoa_r+0x672>
 8005876:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005878:	9915      	ldr	r1, [sp, #84]	; 0x54
 800587a:	9a06      	ldr	r2, [sp, #24]
 800587c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800587e:	4694      	mov	ip, r2
 8005880:	4463      	add	r3, ip
 8005882:	2200      	movs	r2, #0
 8005884:	9308      	str	r3, [sp, #32]
 8005886:	4b47      	ldr	r3, [pc, #284]	; (80059a4 <_dtoa_r+0x744>)
 8005888:	f7fa fe0e 	bl	80004a8 <__aeabi_dadd>
 800588c:	0002      	movs	r2, r0
 800588e:	000b      	movs	r3, r1
 8005890:	0020      	movs	r0, r4
 8005892:	0029      	movs	r1, r5
 8005894:	f7fa fdf4 	bl	8000480 <__aeabi_dcmpgt>
 8005898:	2800      	cmp	r0, #0
 800589a:	d000      	beq.n	800589e <_dtoa_r+0x63e>
 800589c:	e086      	b.n	80059ac <_dtoa_r+0x74c>
 800589e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80058a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80058a2:	2000      	movs	r0, #0
 80058a4:	493f      	ldr	r1, [pc, #252]	; (80059a4 <_dtoa_r+0x744>)
 80058a6:	f7fc f81b 	bl	80018e0 <__aeabi_dsub>
 80058aa:	0002      	movs	r2, r0
 80058ac:	000b      	movs	r3, r1
 80058ae:	0020      	movs	r0, r4
 80058b0:	0029      	movs	r1, r5
 80058b2:	f7fa fdd1 	bl	8000458 <__aeabi_dcmplt>
 80058b6:	2800      	cmp	r0, #0
 80058b8:	d100      	bne.n	80058bc <_dtoa_r+0x65c>
 80058ba:	e716      	b.n	80056ea <_dtoa_r+0x48a>
 80058bc:	9b08      	ldr	r3, [sp, #32]
 80058be:	001a      	movs	r2, r3
 80058c0:	3a01      	subs	r2, #1
 80058c2:	9208      	str	r2, [sp, #32]
 80058c4:	7812      	ldrb	r2, [r2, #0]
 80058c6:	2a30      	cmp	r2, #48	; 0x30
 80058c8:	d0f8      	beq.n	80058bc <_dtoa_r+0x65c>
 80058ca:	9308      	str	r3, [sp, #32]
 80058cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ce:	9303      	str	r3, [sp, #12]
 80058d0:	e046      	b.n	8005960 <_dtoa_r+0x700>
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b2e      	ldr	r3, [pc, #184]	; (8005990 <_dtoa_r+0x730>)
 80058d6:	f7fb fd41 	bl	800135c <__aeabi_dmul>
 80058da:	0006      	movs	r6, r0
 80058dc:	000f      	movs	r7, r1
 80058de:	e7b2      	b.n	8005846 <_dtoa_r+0x5e6>
 80058e0:	9b06      	ldr	r3, [sp, #24]
 80058e2:	9a06      	ldr	r2, [sp, #24]
 80058e4:	930a      	str	r3, [sp, #40]	; 0x28
 80058e6:	9b07      	ldr	r3, [sp, #28]
 80058e8:	9c08      	ldr	r4, [sp, #32]
 80058ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058ec:	3b01      	subs	r3, #1
 80058ee:	189b      	adds	r3, r3, r2
 80058f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f2:	0032      	movs	r2, r6
 80058f4:	003b      	movs	r3, r7
 80058f6:	0020      	movs	r0, r4
 80058f8:	0029      	movs	r1, r5
 80058fa:	f7fb f935 	bl	8000b68 <__aeabi_ddiv>
 80058fe:	f7fc fb8f 	bl	8002020 <__aeabi_d2iz>
 8005902:	9007      	str	r0, [sp, #28]
 8005904:	f7fc fbc2 	bl	800208c <__aeabi_i2d>
 8005908:	0032      	movs	r2, r6
 800590a:	003b      	movs	r3, r7
 800590c:	f7fb fd26 	bl	800135c <__aeabi_dmul>
 8005910:	0002      	movs	r2, r0
 8005912:	000b      	movs	r3, r1
 8005914:	0020      	movs	r0, r4
 8005916:	0029      	movs	r1, r5
 8005918:	f7fb ffe2 	bl	80018e0 <__aeabi_dsub>
 800591c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800591e:	001a      	movs	r2, r3
 8005920:	3201      	adds	r2, #1
 8005922:	920a      	str	r2, [sp, #40]	; 0x28
 8005924:	9208      	str	r2, [sp, #32]
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	3230      	adds	r2, #48	; 0x30
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800592e:	429a      	cmp	r2, r3
 8005930:	d14f      	bne.n	80059d2 <_dtoa_r+0x772>
 8005932:	0002      	movs	r2, r0
 8005934:	000b      	movs	r3, r1
 8005936:	f7fa fdb7 	bl	80004a8 <__aeabi_dadd>
 800593a:	0032      	movs	r2, r6
 800593c:	003b      	movs	r3, r7
 800593e:	0004      	movs	r4, r0
 8005940:	000d      	movs	r5, r1
 8005942:	f7fa fd9d 	bl	8000480 <__aeabi_dcmpgt>
 8005946:	2800      	cmp	r0, #0
 8005948:	d12e      	bne.n	80059a8 <_dtoa_r+0x748>
 800594a:	0032      	movs	r2, r6
 800594c:	003b      	movs	r3, r7
 800594e:	0020      	movs	r0, r4
 8005950:	0029      	movs	r1, r5
 8005952:	f7fa fd7b 	bl	800044c <__aeabi_dcmpeq>
 8005956:	2800      	cmp	r0, #0
 8005958:	d002      	beq.n	8005960 <_dtoa_r+0x700>
 800595a:	9b07      	ldr	r3, [sp, #28]
 800595c:	07de      	lsls	r6, r3, #31
 800595e:	d423      	bmi.n	80059a8 <_dtoa_r+0x748>
 8005960:	9905      	ldr	r1, [sp, #20]
 8005962:	9804      	ldr	r0, [sp, #16]
 8005964:	f000 fbd6 	bl	8006114 <_Bfree>
 8005968:	2300      	movs	r3, #0
 800596a:	9a08      	ldr	r2, [sp, #32]
 800596c:	7013      	strb	r3, [r2, #0]
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005972:	3301      	adds	r3, #1
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005978:	2b00      	cmp	r3, #0
 800597a:	d100      	bne.n	800597e <_dtoa_r+0x71e>
 800597c:	e4ba      	b.n	80052f4 <_dtoa_r+0x94>
 800597e:	9a08      	ldr	r2, [sp, #32]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e4b7      	b.n	80052f4 <_dtoa_r+0x94>
 8005984:	080071c0 	.word	0x080071c0
 8005988:	08007198 	.word	0x08007198
 800598c:	3ff00000 	.word	0x3ff00000
 8005990:	40240000 	.word	0x40240000
 8005994:	401c0000 	.word	0x401c0000
 8005998:	fcc00000 	.word	0xfcc00000
 800599c:	40140000 	.word	0x40140000
 80059a0:	7cc00000 	.word	0x7cc00000
 80059a4:	3fe00000 	.word	0x3fe00000
 80059a8:	9b03      	ldr	r3, [sp, #12]
 80059aa:	930e      	str	r3, [sp, #56]	; 0x38
 80059ac:	9b08      	ldr	r3, [sp, #32]
 80059ae:	9308      	str	r3, [sp, #32]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	781a      	ldrb	r2, [r3, #0]
 80059b4:	2a39      	cmp	r2, #57	; 0x39
 80059b6:	d108      	bne.n	80059ca <_dtoa_r+0x76a>
 80059b8:	9a06      	ldr	r2, [sp, #24]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d1f7      	bne.n	80059ae <_dtoa_r+0x74e>
 80059be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059c0:	9906      	ldr	r1, [sp, #24]
 80059c2:	3201      	adds	r2, #1
 80059c4:	920e      	str	r2, [sp, #56]	; 0x38
 80059c6:	2230      	movs	r2, #48	; 0x30
 80059c8:	700a      	strb	r2, [r1, #0]
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	3201      	adds	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	e77c      	b.n	80058cc <_dtoa_r+0x66c>
 80059d2:	2200      	movs	r2, #0
 80059d4:	4ba9      	ldr	r3, [pc, #676]	; (8005c7c <_dtoa_r+0xa1c>)
 80059d6:	f7fb fcc1 	bl	800135c <__aeabi_dmul>
 80059da:	2200      	movs	r2, #0
 80059dc:	2300      	movs	r3, #0
 80059de:	0004      	movs	r4, r0
 80059e0:	000d      	movs	r5, r1
 80059e2:	f7fa fd33 	bl	800044c <__aeabi_dcmpeq>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d100      	bne.n	80059ec <_dtoa_r+0x78c>
 80059ea:	e782      	b.n	80058f2 <_dtoa_r+0x692>
 80059ec:	e7b8      	b.n	8005960 <_dtoa_r+0x700>
 80059ee:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80059f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80059f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059f4:	2f00      	cmp	r7, #0
 80059f6:	d012      	beq.n	8005a1e <_dtoa_r+0x7be>
 80059f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059fa:	2a01      	cmp	r2, #1
 80059fc:	dc6e      	bgt.n	8005adc <_dtoa_r+0x87c>
 80059fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005a00:	2a00      	cmp	r2, #0
 8005a02:	d065      	beq.n	8005ad0 <_dtoa_r+0x870>
 8005a04:	4a9e      	ldr	r2, [pc, #632]	; (8005c80 <_dtoa_r+0xa20>)
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	18d2      	adds	r2, r2, r3
 8005a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8005a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a12:	9804      	ldr	r0, [sp, #16]
 8005a14:	18d3      	adds	r3, r2, r3
 8005a16:	930c      	str	r3, [sp, #48]	; 0x30
 8005a18:	f000 fc2c 	bl	8006274 <__i2b>
 8005a1c:	0007      	movs	r7, r0
 8005a1e:	2c00      	cmp	r4, #0
 8005a20:	d00e      	beq.n	8005a40 <_dtoa_r+0x7e0>
 8005a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	dd0b      	ble.n	8005a40 <_dtoa_r+0x7e0>
 8005a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a2a:	0023      	movs	r3, r4
 8005a2c:	4294      	cmp	r4, r2
 8005a2e:	dd00      	ble.n	8005a32 <_dtoa_r+0x7d2>
 8005a30:	0013      	movs	r3, r2
 8005a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a34:	1ae4      	subs	r4, r4, r3
 8005a36:	1ad2      	subs	r2, r2, r3
 8005a38:	920a      	str	r2, [sp, #40]	; 0x28
 8005a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	930c      	str	r3, [sp, #48]	; 0x30
 8005a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01e      	beq.n	8005a84 <_dtoa_r+0x824>
 8005a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05c      	beq.n	8005b06 <_dtoa_r+0x8a6>
 8005a4c:	2d00      	cmp	r5, #0
 8005a4e:	dd10      	ble.n	8005a72 <_dtoa_r+0x812>
 8005a50:	0039      	movs	r1, r7
 8005a52:	002a      	movs	r2, r5
 8005a54:	9804      	ldr	r0, [sp, #16]
 8005a56:	f000 fcd5 	bl	8006404 <__pow5mult>
 8005a5a:	9a05      	ldr	r2, [sp, #20]
 8005a5c:	0001      	movs	r1, r0
 8005a5e:	0007      	movs	r7, r0
 8005a60:	9804      	ldr	r0, [sp, #16]
 8005a62:	f000 fc1f 	bl	80062a4 <__multiply>
 8005a66:	0006      	movs	r6, r0
 8005a68:	9905      	ldr	r1, [sp, #20]
 8005a6a:	9804      	ldr	r0, [sp, #16]
 8005a6c:	f000 fb52 	bl	8006114 <_Bfree>
 8005a70:	9605      	str	r6, [sp, #20]
 8005a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a74:	1b5a      	subs	r2, r3, r5
 8005a76:	42ab      	cmp	r3, r5
 8005a78:	d004      	beq.n	8005a84 <_dtoa_r+0x824>
 8005a7a:	9905      	ldr	r1, [sp, #20]
 8005a7c:	9804      	ldr	r0, [sp, #16]
 8005a7e:	f000 fcc1 	bl	8006404 <__pow5mult>
 8005a82:	9005      	str	r0, [sp, #20]
 8005a84:	2101      	movs	r1, #1
 8005a86:	9804      	ldr	r0, [sp, #16]
 8005a88:	f000 fbf4 	bl	8006274 <__i2b>
 8005a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a8e:	0006      	movs	r6, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dd3a      	ble.n	8005b0a <_dtoa_r+0x8aa>
 8005a94:	001a      	movs	r2, r3
 8005a96:	0001      	movs	r1, r0
 8005a98:	9804      	ldr	r0, [sp, #16]
 8005a9a:	f000 fcb3 	bl	8006404 <__pow5mult>
 8005a9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aa0:	0006      	movs	r6, r0
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	dc38      	bgt.n	8005b1a <_dtoa_r+0x8ba>
 8005aa8:	2500      	movs	r5, #0
 8005aaa:	9b08      	ldr	r3, [sp, #32]
 8005aac:	42ab      	cmp	r3, r5
 8005aae:	d130      	bne.n	8005b12 <_dtoa_r+0x8b2>
 8005ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab2:	031b      	lsls	r3, r3, #12
 8005ab4:	42ab      	cmp	r3, r5
 8005ab6:	d12c      	bne.n	8005b12 <_dtoa_r+0x8b2>
 8005ab8:	4b72      	ldr	r3, [pc, #456]	; (8005c84 <_dtoa_r+0xa24>)
 8005aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005abc:	4213      	tst	r3, r2
 8005abe:	d028      	beq.n	8005b12 <_dtoa_r+0x8b2>
 8005ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005aca:	3301      	adds	r3, #1
 8005acc:	930c      	str	r3, [sp, #48]	; 0x30
 8005ace:	e020      	b.n	8005b12 <_dtoa_r+0x8b2>
 8005ad0:	2336      	movs	r3, #54	; 0x36
 8005ad2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ad4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8005ad6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ad8:	1a9b      	subs	r3, r3, r2
 8005ada:	e795      	b.n	8005a08 <_dtoa_r+0x7a8>
 8005adc:	9b07      	ldr	r3, [sp, #28]
 8005ade:	1e5d      	subs	r5, r3, #1
 8005ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ae2:	42ab      	cmp	r3, r5
 8005ae4:	db07      	blt.n	8005af6 <_dtoa_r+0x896>
 8005ae6:	1b5d      	subs	r5, r3, r5
 8005ae8:	9b07      	ldr	r3, [sp, #28]
 8005aea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da8b      	bge.n	8005a08 <_dtoa_r+0x7a8>
 8005af0:	1ae4      	subs	r4, r4, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	e788      	b.n	8005a08 <_dtoa_r+0x7a8>
 8005af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005afa:	1aeb      	subs	r3, r5, r3
 8005afc:	18d3      	adds	r3, r2, r3
 8005afe:	950d      	str	r5, [sp, #52]	; 0x34
 8005b00:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b02:	2500      	movs	r5, #0
 8005b04:	e7f0      	b.n	8005ae8 <_dtoa_r+0x888>
 8005b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b08:	e7b7      	b.n	8005a7a <_dtoa_r+0x81a>
 8005b0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b0c:	2500      	movs	r5, #0
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	ddca      	ble.n	8005aa8 <_dtoa_r+0x848>
 8005b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005b14:	2001      	movs	r0, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <_dtoa_r+0x8cc>
 8005b1a:	6933      	ldr	r3, [r6, #16]
 8005b1c:	3303      	adds	r3, #3
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	18f3      	adds	r3, r6, r3
 8005b22:	6858      	ldr	r0, [r3, #4]
 8005b24:	f000 fb5e 	bl	80061e4 <__hi0bits>
 8005b28:	2320      	movs	r3, #32
 8005b2a:	1a18      	subs	r0, r3, r0
 8005b2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b2e:	1818      	adds	r0, r3, r0
 8005b30:	0002      	movs	r2, r0
 8005b32:	231f      	movs	r3, #31
 8005b34:	401a      	ands	r2, r3
 8005b36:	4218      	tst	r0, r3
 8005b38:	d047      	beq.n	8005bca <_dtoa_r+0x96a>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	dd3f      	ble.n	8005bc2 <_dtoa_r+0x962>
 8005b42:	231c      	movs	r3, #28
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b48:	18e4      	adds	r4, r4, r3
 8005b4a:	18d2      	adds	r2, r2, r3
 8005b4c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b50:	18d3      	adds	r3, r2, r3
 8005b52:	930c      	str	r3, [sp, #48]	; 0x30
 8005b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dd05      	ble.n	8005b66 <_dtoa_r+0x906>
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	9905      	ldr	r1, [sp, #20]
 8005b5e:	9804      	ldr	r0, [sp, #16]
 8005b60:	f000 fcac 	bl	80064bc <__lshift>
 8005b64:	9005      	str	r0, [sp, #20]
 8005b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	dd05      	ble.n	8005b78 <_dtoa_r+0x918>
 8005b6c:	0031      	movs	r1, r6
 8005b6e:	001a      	movs	r2, r3
 8005b70:	9804      	ldr	r0, [sp, #16]
 8005b72:	f000 fca3 	bl	80064bc <__lshift>
 8005b76:	0006      	movs	r6, r0
 8005b78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d027      	beq.n	8005bce <_dtoa_r+0x96e>
 8005b7e:	0031      	movs	r1, r6
 8005b80:	9805      	ldr	r0, [sp, #20]
 8005b82:	f000 fd09 	bl	8006598 <__mcmp>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	da21      	bge.n	8005bce <_dtoa_r+0x96e>
 8005b8a:	9b03      	ldr	r3, [sp, #12]
 8005b8c:	220a      	movs	r2, #10
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	9303      	str	r3, [sp, #12]
 8005b92:	9905      	ldr	r1, [sp, #20]
 8005b94:	2300      	movs	r3, #0
 8005b96:	9804      	ldr	r0, [sp, #16]
 8005b98:	f000 fae0 	bl	800615c <__multadd>
 8005b9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b9e:	9005      	str	r0, [sp, #20]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d100      	bne.n	8005ba6 <_dtoa_r+0x946>
 8005ba4:	e15d      	b.n	8005e62 <_dtoa_r+0xc02>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	0039      	movs	r1, r7
 8005baa:	220a      	movs	r2, #10
 8005bac:	9804      	ldr	r0, [sp, #16]
 8005bae:	f000 fad5 	bl	800615c <__multadd>
 8005bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bb4:	0007      	movs	r7, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dc49      	bgt.n	8005c4e <_dtoa_r+0x9ee>
 8005bba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	dc0e      	bgt.n	8005bde <_dtoa_r+0x97e>
 8005bc0:	e045      	b.n	8005c4e <_dtoa_r+0x9ee>
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d0c6      	beq.n	8005b54 <_dtoa_r+0x8f4>
 8005bc6:	331c      	adds	r3, #28
 8005bc8:	e7bd      	b.n	8005b46 <_dtoa_r+0x8e6>
 8005bca:	0013      	movs	r3, r2
 8005bcc:	e7fb      	b.n	8005bc6 <_dtoa_r+0x966>
 8005bce:	9b07      	ldr	r3, [sp, #28]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dc36      	bgt.n	8005c42 <_dtoa_r+0x9e2>
 8005bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd6:	2b02      	cmp	r3, #2
 8005bd8:	dd33      	ble.n	8005c42 <_dtoa_r+0x9e2>
 8005bda:	9b07      	ldr	r3, [sp, #28]
 8005bdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10c      	bne.n	8005bfe <_dtoa_r+0x99e>
 8005be4:	0031      	movs	r1, r6
 8005be6:	2205      	movs	r2, #5
 8005be8:	9804      	ldr	r0, [sp, #16]
 8005bea:	f000 fab7 	bl	800615c <__multadd>
 8005bee:	0006      	movs	r6, r0
 8005bf0:	0001      	movs	r1, r0
 8005bf2:	9805      	ldr	r0, [sp, #20]
 8005bf4:	f000 fcd0 	bl	8006598 <__mcmp>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	dd00      	ble.n	8005bfe <_dtoa_r+0x99e>
 8005bfc:	e59f      	b.n	800573e <_dtoa_r+0x4de>
 8005bfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c00:	43db      	mvns	r3, r3
 8005c02:	9303      	str	r3, [sp, #12]
 8005c04:	9b06      	ldr	r3, [sp, #24]
 8005c06:	9308      	str	r3, [sp, #32]
 8005c08:	2500      	movs	r5, #0
 8005c0a:	0031      	movs	r1, r6
 8005c0c:	9804      	ldr	r0, [sp, #16]
 8005c0e:	f000 fa81 	bl	8006114 <_Bfree>
 8005c12:	2f00      	cmp	r7, #0
 8005c14:	d100      	bne.n	8005c18 <_dtoa_r+0x9b8>
 8005c16:	e6a3      	b.n	8005960 <_dtoa_r+0x700>
 8005c18:	2d00      	cmp	r5, #0
 8005c1a:	d005      	beq.n	8005c28 <_dtoa_r+0x9c8>
 8005c1c:	42bd      	cmp	r5, r7
 8005c1e:	d003      	beq.n	8005c28 <_dtoa_r+0x9c8>
 8005c20:	0029      	movs	r1, r5
 8005c22:	9804      	ldr	r0, [sp, #16]
 8005c24:	f000 fa76 	bl	8006114 <_Bfree>
 8005c28:	0039      	movs	r1, r7
 8005c2a:	9804      	ldr	r0, [sp, #16]
 8005c2c:	f000 fa72 	bl	8006114 <_Bfree>
 8005c30:	e696      	b.n	8005960 <_dtoa_r+0x700>
 8005c32:	2600      	movs	r6, #0
 8005c34:	0037      	movs	r7, r6
 8005c36:	e7e2      	b.n	8005bfe <_dtoa_r+0x99e>
 8005c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c3a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005c3c:	9303      	str	r3, [sp, #12]
 8005c3e:	0037      	movs	r7, r6
 8005c40:	e57d      	b.n	800573e <_dtoa_r+0x4de>
 8005c42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d100      	bne.n	8005c4a <_dtoa_r+0x9ea>
 8005c48:	e0c3      	b.n	8005dd2 <_dtoa_r+0xb72>
 8005c4a:	9b07      	ldr	r3, [sp, #28]
 8005c4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c4e:	2c00      	cmp	r4, #0
 8005c50:	dd05      	ble.n	8005c5e <_dtoa_r+0x9fe>
 8005c52:	0039      	movs	r1, r7
 8005c54:	0022      	movs	r2, r4
 8005c56:	9804      	ldr	r0, [sp, #16]
 8005c58:	f000 fc30 	bl	80064bc <__lshift>
 8005c5c:	0007      	movs	r7, r0
 8005c5e:	0038      	movs	r0, r7
 8005c60:	2d00      	cmp	r5, #0
 8005c62:	d024      	beq.n	8005cae <_dtoa_r+0xa4e>
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	9804      	ldr	r0, [sp, #16]
 8005c68:	f000 fa10 	bl	800608c <_Balloc>
 8005c6c:	1e04      	subs	r4, r0, #0
 8005c6e:	d111      	bne.n	8005c94 <_dtoa_r+0xa34>
 8005c70:	0022      	movs	r2, r4
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <_dtoa_r+0xa28>)
 8005c74:	4805      	ldr	r0, [pc, #20]	; (8005c8c <_dtoa_r+0xa2c>)
 8005c76:	4906      	ldr	r1, [pc, #24]	; (8005c90 <_dtoa_r+0xa30>)
 8005c78:	f7ff fb07 	bl	800528a <_dtoa_r+0x2a>
 8005c7c:	40240000 	.word	0x40240000
 8005c80:	00000433 	.word	0x00000433
 8005c84:	7ff00000 	.word	0x7ff00000
 8005c88:	0800712c 	.word	0x0800712c
 8005c8c:	080070d4 	.word	0x080070d4
 8005c90:	000002ef 	.word	0x000002ef
 8005c94:	0039      	movs	r1, r7
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	310c      	adds	r1, #12
 8005c9a:	3202      	adds	r2, #2
 8005c9c:	0092      	lsls	r2, r2, #2
 8005c9e:	300c      	adds	r0, #12
 8005ca0:	f001 f840 	bl	8006d24 <memcpy>
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	0021      	movs	r1, r4
 8005ca8:	9804      	ldr	r0, [sp, #16]
 8005caa:	f000 fc07 	bl	80064bc <__lshift>
 8005cae:	9b06      	ldr	r3, [sp, #24]
 8005cb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cb2:	9307      	str	r3, [sp, #28]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	189b      	adds	r3, r3, r2
 8005cb8:	2201      	movs	r2, #1
 8005cba:	003d      	movs	r5, r7
 8005cbc:	0007      	movs	r7, r0
 8005cbe:	930e      	str	r3, [sp, #56]	; 0x38
 8005cc0:	9b08      	ldr	r3, [sp, #32]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8005cc6:	0031      	movs	r1, r6
 8005cc8:	9805      	ldr	r0, [sp, #20]
 8005cca:	f7ff fa39 	bl	8005140 <quorem>
 8005cce:	0029      	movs	r1, r5
 8005cd0:	0004      	movs	r4, r0
 8005cd2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cd4:	9805      	ldr	r0, [sp, #20]
 8005cd6:	f000 fc5f 	bl	8006598 <__mcmp>
 8005cda:	003a      	movs	r2, r7
 8005cdc:	900c      	str	r0, [sp, #48]	; 0x30
 8005cde:	0031      	movs	r1, r6
 8005ce0:	9804      	ldr	r0, [sp, #16]
 8005ce2:	f000 fc75 	bl	80065d0 <__mdiff>
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	68c3      	ldr	r3, [r0, #12]
 8005cea:	3430      	adds	r4, #48	; 0x30
 8005cec:	9008      	str	r0, [sp, #32]
 8005cee:	920a      	str	r2, [sp, #40]	; 0x28
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d104      	bne.n	8005cfe <_dtoa_r+0xa9e>
 8005cf4:	0001      	movs	r1, r0
 8005cf6:	9805      	ldr	r0, [sp, #20]
 8005cf8:	f000 fc4e 	bl	8006598 <__mcmp>
 8005cfc:	900a      	str	r0, [sp, #40]	; 0x28
 8005cfe:	9908      	ldr	r1, [sp, #32]
 8005d00:	9804      	ldr	r0, [sp, #16]
 8005d02:	f000 fa07 	bl	8006114 <_Bfree>
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	9308      	str	r3, [sp, #32]
 8005d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d10:	4313      	orrs	r3, r2
 8005d12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d14:	4313      	orrs	r3, r2
 8005d16:	d109      	bne.n	8005d2c <_dtoa_r+0xacc>
 8005d18:	2c39      	cmp	r4, #57	; 0x39
 8005d1a:	d022      	beq.n	8005d62 <_dtoa_r+0xb02>
 8005d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	dd01      	ble.n	8005d26 <_dtoa_r+0xac6>
 8005d22:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8005d24:	3431      	adds	r4, #49	; 0x31
 8005d26:	9b07      	ldr	r3, [sp, #28]
 8005d28:	701c      	strb	r4, [r3, #0]
 8005d2a:	e76e      	b.n	8005c0a <_dtoa_r+0x9aa>
 8005d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	db04      	blt.n	8005d3c <_dtoa_r+0xadc>
 8005d32:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d34:	4313      	orrs	r3, r2
 8005d36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d11e      	bne.n	8005d7a <_dtoa_r+0xb1a>
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	ddf1      	ble.n	8005d26 <_dtoa_r+0xac6>
 8005d42:	9905      	ldr	r1, [sp, #20]
 8005d44:	2201      	movs	r2, #1
 8005d46:	9804      	ldr	r0, [sp, #16]
 8005d48:	f000 fbb8 	bl	80064bc <__lshift>
 8005d4c:	0031      	movs	r1, r6
 8005d4e:	9005      	str	r0, [sp, #20]
 8005d50:	f000 fc22 	bl	8006598 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	dc02      	bgt.n	8005d5e <_dtoa_r+0xafe>
 8005d58:	d1e5      	bne.n	8005d26 <_dtoa_r+0xac6>
 8005d5a:	07e3      	lsls	r3, r4, #31
 8005d5c:	d5e3      	bpl.n	8005d26 <_dtoa_r+0xac6>
 8005d5e:	2c39      	cmp	r4, #57	; 0x39
 8005d60:	d1df      	bne.n	8005d22 <_dtoa_r+0xac2>
 8005d62:	2339      	movs	r3, #57	; 0x39
 8005d64:	9a07      	ldr	r2, [sp, #28]
 8005d66:	7013      	strb	r3, [r2, #0]
 8005d68:	9b08      	ldr	r3, [sp, #32]
 8005d6a:	9308      	str	r3, [sp, #32]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	781a      	ldrb	r2, [r3, #0]
 8005d70:	2a39      	cmp	r2, #57	; 0x39
 8005d72:	d063      	beq.n	8005e3c <_dtoa_r+0xbdc>
 8005d74:	3201      	adds	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e747      	b.n	8005c0a <_dtoa_r+0x9aa>
 8005d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	dd03      	ble.n	8005d88 <_dtoa_r+0xb28>
 8005d80:	2c39      	cmp	r4, #57	; 0x39
 8005d82:	d0ee      	beq.n	8005d62 <_dtoa_r+0xb02>
 8005d84:	3401      	adds	r4, #1
 8005d86:	e7ce      	b.n	8005d26 <_dtoa_r+0xac6>
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	9a07      	ldr	r2, [sp, #28]
 8005d8c:	701c      	strb	r4, [r3, #0]
 8005d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d03e      	beq.n	8005e12 <_dtoa_r+0xbb2>
 8005d94:	2300      	movs	r3, #0
 8005d96:	220a      	movs	r2, #10
 8005d98:	9905      	ldr	r1, [sp, #20]
 8005d9a:	9804      	ldr	r0, [sp, #16]
 8005d9c:	f000 f9de 	bl	800615c <__multadd>
 8005da0:	2300      	movs	r3, #0
 8005da2:	9005      	str	r0, [sp, #20]
 8005da4:	220a      	movs	r2, #10
 8005da6:	0029      	movs	r1, r5
 8005da8:	9804      	ldr	r0, [sp, #16]
 8005daa:	42bd      	cmp	r5, r7
 8005dac:	d106      	bne.n	8005dbc <_dtoa_r+0xb5c>
 8005dae:	f000 f9d5 	bl	800615c <__multadd>
 8005db2:	0005      	movs	r5, r0
 8005db4:	0007      	movs	r7, r0
 8005db6:	9b08      	ldr	r3, [sp, #32]
 8005db8:	9307      	str	r3, [sp, #28]
 8005dba:	e784      	b.n	8005cc6 <_dtoa_r+0xa66>
 8005dbc:	f000 f9ce 	bl	800615c <__multadd>
 8005dc0:	0039      	movs	r1, r7
 8005dc2:	0005      	movs	r5, r0
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	9804      	ldr	r0, [sp, #16]
 8005dca:	f000 f9c7 	bl	800615c <__multadd>
 8005dce:	0007      	movs	r7, r0
 8005dd0:	e7f1      	b.n	8005db6 <_dtoa_r+0xb56>
 8005dd2:	9b07      	ldr	r3, [sp, #28]
 8005dd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd6:	2500      	movs	r5, #0
 8005dd8:	0031      	movs	r1, r6
 8005dda:	9805      	ldr	r0, [sp, #20]
 8005ddc:	f7ff f9b0 	bl	8005140 <quorem>
 8005de0:	9b06      	ldr	r3, [sp, #24]
 8005de2:	3030      	adds	r0, #48	; 0x30
 8005de4:	5558      	strb	r0, [r3, r5]
 8005de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de8:	3501      	adds	r5, #1
 8005dea:	0004      	movs	r4, r0
 8005dec:	42ab      	cmp	r3, r5
 8005dee:	dd07      	ble.n	8005e00 <_dtoa_r+0xba0>
 8005df0:	2300      	movs	r3, #0
 8005df2:	220a      	movs	r2, #10
 8005df4:	9905      	ldr	r1, [sp, #20]
 8005df6:	9804      	ldr	r0, [sp, #16]
 8005df8:	f000 f9b0 	bl	800615c <__multadd>
 8005dfc:	9005      	str	r0, [sp, #20]
 8005dfe:	e7eb      	b.n	8005dd8 <_dtoa_r+0xb78>
 8005e00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e02:	2301      	movs	r3, #1
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	dd00      	ble.n	8005e0a <_dtoa_r+0xbaa>
 8005e08:	0013      	movs	r3, r2
 8005e0a:	2500      	movs	r5, #0
 8005e0c:	9a06      	ldr	r2, [sp, #24]
 8005e0e:	18d3      	adds	r3, r2, r3
 8005e10:	9308      	str	r3, [sp, #32]
 8005e12:	9905      	ldr	r1, [sp, #20]
 8005e14:	2201      	movs	r2, #1
 8005e16:	9804      	ldr	r0, [sp, #16]
 8005e18:	f000 fb50 	bl	80064bc <__lshift>
 8005e1c:	0031      	movs	r1, r6
 8005e1e:	9005      	str	r0, [sp, #20]
 8005e20:	f000 fbba 	bl	8006598 <__mcmp>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dc9f      	bgt.n	8005d68 <_dtoa_r+0xb08>
 8005e28:	d101      	bne.n	8005e2e <_dtoa_r+0xbce>
 8005e2a:	07e4      	lsls	r4, r4, #31
 8005e2c:	d49c      	bmi.n	8005d68 <_dtoa_r+0xb08>
 8005e2e:	9b08      	ldr	r3, [sp, #32]
 8005e30:	9308      	str	r3, [sp, #32]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	2a30      	cmp	r2, #48	; 0x30
 8005e38:	d0fa      	beq.n	8005e30 <_dtoa_r+0xbd0>
 8005e3a:	e6e6      	b.n	8005c0a <_dtoa_r+0x9aa>
 8005e3c:	9a06      	ldr	r2, [sp, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d193      	bne.n	8005d6a <_dtoa_r+0xb0a>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	9303      	str	r3, [sp, #12]
 8005e48:	2331      	movs	r3, #49	; 0x31
 8005e4a:	7013      	strb	r3, [r2, #0]
 8005e4c:	e6dd      	b.n	8005c0a <_dtoa_r+0x9aa>
 8005e4e:	4b09      	ldr	r3, [pc, #36]	; (8005e74 <_dtoa_r+0xc14>)
 8005e50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e52:	9306      	str	r3, [sp, #24]
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <_dtoa_r+0xc18>)
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d001      	beq.n	8005e5e <_dtoa_r+0xbfe>
 8005e5a:	f7ff fa49 	bl	80052f0 <_dtoa_r+0x90>
 8005e5e:	f7ff fa49 	bl	80052f4 <_dtoa_r+0x94>
 8005e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dcb6      	bgt.n	8005dd6 <_dtoa_r+0xb76>
 8005e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	dd00      	ble.n	8005e70 <_dtoa_r+0xc10>
 8005e6e:	e6b6      	b.n	8005bde <_dtoa_r+0x97e>
 8005e70:	e7b1      	b.n	8005dd6 <_dtoa_r+0xb76>
 8005e72:	46c0      	nop			; (mov r8, r8)
 8005e74:	080070b0 	.word	0x080070b0
 8005e78:	080070b8 	.word	0x080070b8

08005e7c <_free_r>:
 8005e7c:	b570      	push	{r4, r5, r6, lr}
 8005e7e:	0005      	movs	r5, r0
 8005e80:	2900      	cmp	r1, #0
 8005e82:	d010      	beq.n	8005ea6 <_free_r+0x2a>
 8005e84:	1f0c      	subs	r4, r1, #4
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	da00      	bge.n	8005e8e <_free_r+0x12>
 8005e8c:	18e4      	adds	r4, r4, r3
 8005e8e:	0028      	movs	r0, r5
 8005e90:	f000 f8ec 	bl	800606c <__malloc_lock>
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <_free_r+0x90>)
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <_free_r+0x2c>
 8005e9c:	6063      	str	r3, [r4, #4]
 8005e9e:	6014      	str	r4, [r2, #0]
 8005ea0:	0028      	movs	r0, r5
 8005ea2:	f000 f8eb 	bl	800607c <__malloc_unlock>
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d908      	bls.n	8005ebe <_free_r+0x42>
 8005eac:	6820      	ldr	r0, [r4, #0]
 8005eae:	1821      	adds	r1, r4, r0
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	d1f3      	bne.n	8005e9c <_free_r+0x20>
 8005eb4:	6819      	ldr	r1, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	1809      	adds	r1, r1, r0
 8005eba:	6021      	str	r1, [r4, #0]
 8005ebc:	e7ee      	b.n	8005e9c <_free_r+0x20>
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <_free_r+0x4e>
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d9f9      	bls.n	8005ebe <_free_r+0x42>
 8005eca:	6811      	ldr	r1, [r2, #0]
 8005ecc:	1850      	adds	r0, r2, r1
 8005ece:	42a0      	cmp	r0, r4
 8005ed0:	d10b      	bne.n	8005eea <_free_r+0x6e>
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	1809      	adds	r1, r1, r0
 8005ed6:	1850      	adds	r0, r2, r1
 8005ed8:	6011      	str	r1, [r2, #0]
 8005eda:	4283      	cmp	r3, r0
 8005edc:	d1e0      	bne.n	8005ea0 <_free_r+0x24>
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	1841      	adds	r1, r0, r1
 8005ee4:	6011      	str	r1, [r2, #0]
 8005ee6:	6053      	str	r3, [r2, #4]
 8005ee8:	e7da      	b.n	8005ea0 <_free_r+0x24>
 8005eea:	42a0      	cmp	r0, r4
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x78>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d5      	b.n	8005ea0 <_free_r+0x24>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	d103      	bne.n	8005f04 <_free_r+0x88>
 8005efc:	6819      	ldr	r1, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	1809      	adds	r1, r1, r0
 8005f02:	6021      	str	r1, [r4, #0]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6054      	str	r4, [r2, #4]
 8005f08:	e7ca      	b.n	8005ea0 <_free_r+0x24>
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	200003c8 	.word	0x200003c8

08005f10 <malloc>:
 8005f10:	b510      	push	{r4, lr}
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <malloc+0x10>)
 8005f14:	0001      	movs	r1, r0
 8005f16:	6818      	ldr	r0, [r3, #0]
 8005f18:	f000 f826 	bl	8005f68 <_malloc_r>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	20000074 	.word	0x20000074

08005f24 <sbrk_aligned>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	4e0f      	ldr	r6, [pc, #60]	; (8005f64 <sbrk_aligned+0x40>)
 8005f28:	000d      	movs	r5, r1
 8005f2a:	6831      	ldr	r1, [r6, #0]
 8005f2c:	0004      	movs	r4, r0
 8005f2e:	2900      	cmp	r1, #0
 8005f30:	d102      	bne.n	8005f38 <sbrk_aligned+0x14>
 8005f32:	f000 fee5 	bl	8006d00 <_sbrk_r>
 8005f36:	6030      	str	r0, [r6, #0]
 8005f38:	0029      	movs	r1, r5
 8005f3a:	0020      	movs	r0, r4
 8005f3c:	f000 fee0 	bl	8006d00 <_sbrk_r>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d00a      	beq.n	8005f5a <sbrk_aligned+0x36>
 8005f44:	2303      	movs	r3, #3
 8005f46:	1cc5      	adds	r5, r0, #3
 8005f48:	439d      	bics	r5, r3
 8005f4a:	42a8      	cmp	r0, r5
 8005f4c:	d007      	beq.n	8005f5e <sbrk_aligned+0x3a>
 8005f4e:	1a29      	subs	r1, r5, r0
 8005f50:	0020      	movs	r0, r4
 8005f52:	f000 fed5 	bl	8006d00 <_sbrk_r>
 8005f56:	3001      	adds	r0, #1
 8005f58:	d101      	bne.n	8005f5e <sbrk_aligned+0x3a>
 8005f5a:	2501      	movs	r5, #1
 8005f5c:	426d      	negs	r5, r5
 8005f5e:	0028      	movs	r0, r5
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	200003cc 	.word	0x200003cc

08005f68 <_malloc_r>:
 8005f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	1ccb      	adds	r3, r1, #3
 8005f6e:	4393      	bics	r3, r2
 8005f70:	3308      	adds	r3, #8
 8005f72:	0006      	movs	r6, r0
 8005f74:	001f      	movs	r7, r3
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d238      	bcs.n	8005fec <_malloc_r+0x84>
 8005f7a:	270c      	movs	r7, #12
 8005f7c:	42b9      	cmp	r1, r7
 8005f7e:	d837      	bhi.n	8005ff0 <_malloc_r+0x88>
 8005f80:	0030      	movs	r0, r6
 8005f82:	f000 f873 	bl	800606c <__malloc_lock>
 8005f86:	4b38      	ldr	r3, [pc, #224]	; (8006068 <_malloc_r+0x100>)
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	001c      	movs	r4, r3
 8005f8e:	2c00      	cmp	r4, #0
 8005f90:	d133      	bne.n	8005ffa <_malloc_r+0x92>
 8005f92:	0039      	movs	r1, r7
 8005f94:	0030      	movs	r0, r6
 8005f96:	f7ff ffc5 	bl	8005f24 <sbrk_aligned>
 8005f9a:	0004      	movs	r4, r0
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d15e      	bne.n	800605e <_malloc_r+0xf6>
 8005fa0:	9b00      	ldr	r3, [sp, #0]
 8005fa2:	681c      	ldr	r4, [r3, #0]
 8005fa4:	0025      	movs	r5, r4
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	d14e      	bne.n	8006048 <_malloc_r+0xe0>
 8005faa:	2c00      	cmp	r4, #0
 8005fac:	d051      	beq.n	8006052 <_malloc_r+0xea>
 8005fae:	6823      	ldr	r3, [r4, #0]
 8005fb0:	0029      	movs	r1, r5
 8005fb2:	18e3      	adds	r3, r4, r3
 8005fb4:	0030      	movs	r0, r6
 8005fb6:	9301      	str	r3, [sp, #4]
 8005fb8:	f000 fea2 	bl	8006d00 <_sbrk_r>
 8005fbc:	9b01      	ldr	r3, [sp, #4]
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	d147      	bne.n	8006052 <_malloc_r+0xea>
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	0030      	movs	r0, r6
 8005fc6:	1aff      	subs	r7, r7, r3
 8005fc8:	0039      	movs	r1, r7
 8005fca:	f7ff ffab 	bl	8005f24 <sbrk_aligned>
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d03f      	beq.n	8006052 <_malloc_r+0xea>
 8005fd2:	6823      	ldr	r3, [r4, #0]
 8005fd4:	19db      	adds	r3, r3, r7
 8005fd6:	6023      	str	r3, [r4, #0]
 8005fd8:	9b00      	ldr	r3, [sp, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d040      	beq.n	8006062 <_malloc_r+0xfa>
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	42a2      	cmp	r2, r4
 8005fe4:	d133      	bne.n	800604e <_malloc_r+0xe6>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	605a      	str	r2, [r3, #4]
 8005fea:	e014      	b.n	8006016 <_malloc_r+0xae>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dac5      	bge.n	8005f7c <_malloc_r+0x14>
 8005ff0:	230c      	movs	r3, #12
 8005ff2:	2500      	movs	r5, #0
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	0028      	movs	r0, r5
 8005ff8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ffa:	6821      	ldr	r1, [r4, #0]
 8005ffc:	1bc9      	subs	r1, r1, r7
 8005ffe:	d420      	bmi.n	8006042 <_malloc_r+0xda>
 8006000:	290b      	cmp	r1, #11
 8006002:	d918      	bls.n	8006036 <_malloc_r+0xce>
 8006004:	19e2      	adds	r2, r4, r7
 8006006:	6027      	str	r7, [r4, #0]
 8006008:	42a3      	cmp	r3, r4
 800600a:	d112      	bne.n	8006032 <_malloc_r+0xca>
 800600c:	9b00      	ldr	r3, [sp, #0]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	6863      	ldr	r3, [r4, #4]
 8006012:	6011      	str	r1, [r2, #0]
 8006014:	6053      	str	r3, [r2, #4]
 8006016:	0030      	movs	r0, r6
 8006018:	0025      	movs	r5, r4
 800601a:	f000 f82f 	bl	800607c <__malloc_unlock>
 800601e:	2207      	movs	r2, #7
 8006020:	350b      	adds	r5, #11
 8006022:	1d23      	adds	r3, r4, #4
 8006024:	4395      	bics	r5, r2
 8006026:	1aea      	subs	r2, r5, r3
 8006028:	429d      	cmp	r5, r3
 800602a:	d0e4      	beq.n	8005ff6 <_malloc_r+0x8e>
 800602c:	1b5b      	subs	r3, r3, r5
 800602e:	50a3      	str	r3, [r4, r2]
 8006030:	e7e1      	b.n	8005ff6 <_malloc_r+0x8e>
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	e7ec      	b.n	8006010 <_malloc_r+0xa8>
 8006036:	6862      	ldr	r2, [r4, #4]
 8006038:	42a3      	cmp	r3, r4
 800603a:	d1d5      	bne.n	8005fe8 <_malloc_r+0x80>
 800603c:	9b00      	ldr	r3, [sp, #0]
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e7e9      	b.n	8006016 <_malloc_r+0xae>
 8006042:	0023      	movs	r3, r4
 8006044:	6864      	ldr	r4, [r4, #4]
 8006046:	e7a2      	b.n	8005f8e <_malloc_r+0x26>
 8006048:	002c      	movs	r4, r5
 800604a:	686d      	ldr	r5, [r5, #4]
 800604c:	e7ab      	b.n	8005fa6 <_malloc_r+0x3e>
 800604e:	0013      	movs	r3, r2
 8006050:	e7c4      	b.n	8005fdc <_malloc_r+0x74>
 8006052:	230c      	movs	r3, #12
 8006054:	0030      	movs	r0, r6
 8006056:	6033      	str	r3, [r6, #0]
 8006058:	f000 f810 	bl	800607c <__malloc_unlock>
 800605c:	e7cb      	b.n	8005ff6 <_malloc_r+0x8e>
 800605e:	6027      	str	r7, [r4, #0]
 8006060:	e7d9      	b.n	8006016 <_malloc_r+0xae>
 8006062:	605b      	str	r3, [r3, #4]
 8006064:	deff      	udf	#255	; 0xff
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	200003c8 	.word	0x200003c8

0800606c <__malloc_lock>:
 800606c:	b510      	push	{r4, lr}
 800606e:	4802      	ldr	r0, [pc, #8]	; (8006078 <__malloc_lock+0xc>)
 8006070:	f7ff f859 	bl	8005126 <__retarget_lock_acquire_recursive>
 8006074:	bd10      	pop	{r4, pc}
 8006076:	46c0      	nop			; (mov r8, r8)
 8006078:	200003c4 	.word	0x200003c4

0800607c <__malloc_unlock>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4802      	ldr	r0, [pc, #8]	; (8006088 <__malloc_unlock+0xc>)
 8006080:	f7ff f852 	bl	8005128 <__retarget_lock_release_recursive>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	200003c4 	.word	0x200003c4

0800608c <_Balloc>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	69c5      	ldr	r5, [r0, #28]
 8006090:	0006      	movs	r6, r0
 8006092:	000c      	movs	r4, r1
 8006094:	2d00      	cmp	r5, #0
 8006096:	d10e      	bne.n	80060b6 <_Balloc+0x2a>
 8006098:	2010      	movs	r0, #16
 800609a:	f7ff ff39 	bl	8005f10 <malloc>
 800609e:	1e02      	subs	r2, r0, #0
 80060a0:	61f0      	str	r0, [r6, #28]
 80060a2:	d104      	bne.n	80060ae <_Balloc+0x22>
 80060a4:	216b      	movs	r1, #107	; 0x6b
 80060a6:	4b19      	ldr	r3, [pc, #100]	; (800610c <_Balloc+0x80>)
 80060a8:	4819      	ldr	r0, [pc, #100]	; (8006110 <_Balloc+0x84>)
 80060aa:	f000 fe45 	bl	8006d38 <__assert_func>
 80060ae:	6045      	str	r5, [r0, #4]
 80060b0:	6085      	str	r5, [r0, #8]
 80060b2:	6005      	str	r5, [r0, #0]
 80060b4:	60c5      	str	r5, [r0, #12]
 80060b6:	69f5      	ldr	r5, [r6, #28]
 80060b8:	68eb      	ldr	r3, [r5, #12]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d013      	beq.n	80060e6 <_Balloc+0x5a>
 80060be:	69f3      	ldr	r3, [r6, #28]
 80060c0:	00a2      	lsls	r2, r4, #2
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	6818      	ldr	r0, [r3, #0]
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d118      	bne.n	80060fe <_Balloc+0x72>
 80060cc:	2101      	movs	r1, #1
 80060ce:	000d      	movs	r5, r1
 80060d0:	40a5      	lsls	r5, r4
 80060d2:	1d6a      	adds	r2, r5, #5
 80060d4:	0030      	movs	r0, r6
 80060d6:	0092      	lsls	r2, r2, #2
 80060d8:	f000 fe4c 	bl	8006d74 <_calloc_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d00c      	beq.n	80060fa <_Balloc+0x6e>
 80060e0:	6044      	str	r4, [r0, #4]
 80060e2:	6085      	str	r5, [r0, #8]
 80060e4:	e00d      	b.n	8006102 <_Balloc+0x76>
 80060e6:	2221      	movs	r2, #33	; 0x21
 80060e8:	2104      	movs	r1, #4
 80060ea:	0030      	movs	r0, r6
 80060ec:	f000 fe42 	bl	8006d74 <_calloc_r>
 80060f0:	69f3      	ldr	r3, [r6, #28]
 80060f2:	60e8      	str	r0, [r5, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e1      	bne.n	80060be <_Balloc+0x32>
 80060fa:	2000      	movs	r0, #0
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	6802      	ldr	r2, [r0, #0]
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	6103      	str	r3, [r0, #16]
 8006106:	60c3      	str	r3, [r0, #12]
 8006108:	e7f8      	b.n	80060fc <_Balloc+0x70>
 800610a:	46c0      	nop			; (mov r8, r8)
 800610c:	080070bd 	.word	0x080070bd
 8006110:	0800713d 	.word	0x0800713d

08006114 <_Bfree>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	69c6      	ldr	r6, [r0, #28]
 8006118:	0005      	movs	r5, r0
 800611a:	000c      	movs	r4, r1
 800611c:	2e00      	cmp	r6, #0
 800611e:	d10e      	bne.n	800613e <_Bfree+0x2a>
 8006120:	2010      	movs	r0, #16
 8006122:	f7ff fef5 	bl	8005f10 <malloc>
 8006126:	1e02      	subs	r2, r0, #0
 8006128:	61e8      	str	r0, [r5, #28]
 800612a:	d104      	bne.n	8006136 <_Bfree+0x22>
 800612c:	218f      	movs	r1, #143	; 0x8f
 800612e:	4b09      	ldr	r3, [pc, #36]	; (8006154 <_Bfree+0x40>)
 8006130:	4809      	ldr	r0, [pc, #36]	; (8006158 <_Bfree+0x44>)
 8006132:	f000 fe01 	bl	8006d38 <__assert_func>
 8006136:	6046      	str	r6, [r0, #4]
 8006138:	6086      	str	r6, [r0, #8]
 800613a:	6006      	str	r6, [r0, #0]
 800613c:	60c6      	str	r6, [r0, #12]
 800613e:	2c00      	cmp	r4, #0
 8006140:	d007      	beq.n	8006152 <_Bfree+0x3e>
 8006142:	69eb      	ldr	r3, [r5, #28]
 8006144:	6862      	ldr	r2, [r4, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	0092      	lsls	r2, r2, #2
 800614a:	189b      	adds	r3, r3, r2
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	601c      	str	r4, [r3, #0]
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	080070bd 	.word	0x080070bd
 8006158:	0800713d 	.word	0x0800713d

0800615c <__multadd>:
 800615c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800615e:	000e      	movs	r6, r1
 8006160:	9001      	str	r0, [sp, #4]
 8006162:	000c      	movs	r4, r1
 8006164:	001d      	movs	r5, r3
 8006166:	2000      	movs	r0, #0
 8006168:	690f      	ldr	r7, [r1, #16]
 800616a:	3614      	adds	r6, #20
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	3001      	adds	r0, #1
 8006170:	b299      	uxth	r1, r3
 8006172:	4351      	muls	r1, r2
 8006174:	0c1b      	lsrs	r3, r3, #16
 8006176:	4353      	muls	r3, r2
 8006178:	1949      	adds	r1, r1, r5
 800617a:	0c0d      	lsrs	r5, r1, #16
 800617c:	195b      	adds	r3, r3, r5
 800617e:	0c1d      	lsrs	r5, r3, #16
 8006180:	b289      	uxth	r1, r1
 8006182:	041b      	lsls	r3, r3, #16
 8006184:	185b      	adds	r3, r3, r1
 8006186:	c608      	stmia	r6!, {r3}
 8006188:	4287      	cmp	r7, r0
 800618a:	dcef      	bgt.n	800616c <__multadd+0x10>
 800618c:	2d00      	cmp	r5, #0
 800618e:	d022      	beq.n	80061d6 <__multadd+0x7a>
 8006190:	68a3      	ldr	r3, [r4, #8]
 8006192:	42bb      	cmp	r3, r7
 8006194:	dc19      	bgt.n	80061ca <__multadd+0x6e>
 8006196:	6861      	ldr	r1, [r4, #4]
 8006198:	9801      	ldr	r0, [sp, #4]
 800619a:	3101      	adds	r1, #1
 800619c:	f7ff ff76 	bl	800608c <_Balloc>
 80061a0:	1e06      	subs	r6, r0, #0
 80061a2:	d105      	bne.n	80061b0 <__multadd+0x54>
 80061a4:	0032      	movs	r2, r6
 80061a6:	21ba      	movs	r1, #186	; 0xba
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <__multadd+0x80>)
 80061aa:	480d      	ldr	r0, [pc, #52]	; (80061e0 <__multadd+0x84>)
 80061ac:	f000 fdc4 	bl	8006d38 <__assert_func>
 80061b0:	0021      	movs	r1, r4
 80061b2:	6922      	ldr	r2, [r4, #16]
 80061b4:	310c      	adds	r1, #12
 80061b6:	3202      	adds	r2, #2
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	300c      	adds	r0, #12
 80061bc:	f000 fdb2 	bl	8006d24 <memcpy>
 80061c0:	0021      	movs	r1, r4
 80061c2:	9801      	ldr	r0, [sp, #4]
 80061c4:	f7ff ffa6 	bl	8006114 <_Bfree>
 80061c8:	0034      	movs	r4, r6
 80061ca:	1d3b      	adds	r3, r7, #4
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	18e3      	adds	r3, r4, r3
 80061d0:	605d      	str	r5, [r3, #4]
 80061d2:	1c7b      	adds	r3, r7, #1
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	0020      	movs	r0, r4
 80061d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	0800712c 	.word	0x0800712c
 80061e0:	0800713d 	.word	0x0800713d

080061e4 <__hi0bits>:
 80061e4:	0003      	movs	r3, r0
 80061e6:	0c02      	lsrs	r2, r0, #16
 80061e8:	2000      	movs	r0, #0
 80061ea:	4282      	cmp	r2, r0
 80061ec:	d101      	bne.n	80061f2 <__hi0bits+0xe>
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	3010      	adds	r0, #16
 80061f2:	0e1a      	lsrs	r2, r3, #24
 80061f4:	d101      	bne.n	80061fa <__hi0bits+0x16>
 80061f6:	3008      	adds	r0, #8
 80061f8:	021b      	lsls	r3, r3, #8
 80061fa:	0f1a      	lsrs	r2, r3, #28
 80061fc:	d101      	bne.n	8006202 <__hi0bits+0x1e>
 80061fe:	3004      	adds	r0, #4
 8006200:	011b      	lsls	r3, r3, #4
 8006202:	0f9a      	lsrs	r2, r3, #30
 8006204:	d101      	bne.n	800620a <__hi0bits+0x26>
 8006206:	3002      	adds	r0, #2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	db03      	blt.n	8006216 <__hi0bits+0x32>
 800620e:	3001      	adds	r0, #1
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	d400      	bmi.n	8006216 <__hi0bits+0x32>
 8006214:	2020      	movs	r0, #32
 8006216:	4770      	bx	lr

08006218 <__lo0bits>:
 8006218:	6803      	ldr	r3, [r0, #0]
 800621a:	0001      	movs	r1, r0
 800621c:	2207      	movs	r2, #7
 800621e:	0018      	movs	r0, r3
 8006220:	4010      	ands	r0, r2
 8006222:	4213      	tst	r3, r2
 8006224:	d00d      	beq.n	8006242 <__lo0bits+0x2a>
 8006226:	3a06      	subs	r2, #6
 8006228:	2000      	movs	r0, #0
 800622a:	4213      	tst	r3, r2
 800622c:	d105      	bne.n	800623a <__lo0bits+0x22>
 800622e:	3002      	adds	r0, #2
 8006230:	4203      	tst	r3, r0
 8006232:	d003      	beq.n	800623c <__lo0bits+0x24>
 8006234:	40d3      	lsrs	r3, r2
 8006236:	0010      	movs	r0, r2
 8006238:	600b      	str	r3, [r1, #0]
 800623a:	4770      	bx	lr
 800623c:	089b      	lsrs	r3, r3, #2
 800623e:	600b      	str	r3, [r1, #0]
 8006240:	e7fb      	b.n	800623a <__lo0bits+0x22>
 8006242:	b29a      	uxth	r2, r3
 8006244:	2a00      	cmp	r2, #0
 8006246:	d101      	bne.n	800624c <__lo0bits+0x34>
 8006248:	2010      	movs	r0, #16
 800624a:	0c1b      	lsrs	r3, r3, #16
 800624c:	b2da      	uxtb	r2, r3
 800624e:	2a00      	cmp	r2, #0
 8006250:	d101      	bne.n	8006256 <__lo0bits+0x3e>
 8006252:	3008      	adds	r0, #8
 8006254:	0a1b      	lsrs	r3, r3, #8
 8006256:	071a      	lsls	r2, r3, #28
 8006258:	d101      	bne.n	800625e <__lo0bits+0x46>
 800625a:	3004      	adds	r0, #4
 800625c:	091b      	lsrs	r3, r3, #4
 800625e:	079a      	lsls	r2, r3, #30
 8006260:	d101      	bne.n	8006266 <__lo0bits+0x4e>
 8006262:	3002      	adds	r0, #2
 8006264:	089b      	lsrs	r3, r3, #2
 8006266:	07da      	lsls	r2, r3, #31
 8006268:	d4e9      	bmi.n	800623e <__lo0bits+0x26>
 800626a:	3001      	adds	r0, #1
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	d1e6      	bne.n	800623e <__lo0bits+0x26>
 8006270:	2020      	movs	r0, #32
 8006272:	e7e2      	b.n	800623a <__lo0bits+0x22>

08006274 <__i2b>:
 8006274:	b510      	push	{r4, lr}
 8006276:	000c      	movs	r4, r1
 8006278:	2101      	movs	r1, #1
 800627a:	f7ff ff07 	bl	800608c <_Balloc>
 800627e:	2800      	cmp	r0, #0
 8006280:	d107      	bne.n	8006292 <__i2b+0x1e>
 8006282:	2146      	movs	r1, #70	; 0x46
 8006284:	4c05      	ldr	r4, [pc, #20]	; (800629c <__i2b+0x28>)
 8006286:	0002      	movs	r2, r0
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <__i2b+0x2c>)
 800628a:	0020      	movs	r0, r4
 800628c:	31ff      	adds	r1, #255	; 0xff
 800628e:	f000 fd53 	bl	8006d38 <__assert_func>
 8006292:	2301      	movs	r3, #1
 8006294:	6144      	str	r4, [r0, #20]
 8006296:	6103      	str	r3, [r0, #16]
 8006298:	bd10      	pop	{r4, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	0800713d 	.word	0x0800713d
 80062a0:	0800712c 	.word	0x0800712c

080062a4 <__multiply>:
 80062a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a6:	0015      	movs	r5, r2
 80062a8:	690a      	ldr	r2, [r1, #16]
 80062aa:	692b      	ldr	r3, [r5, #16]
 80062ac:	000c      	movs	r4, r1
 80062ae:	b08b      	sub	sp, #44	; 0x2c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	da01      	bge.n	80062b8 <__multiply+0x14>
 80062b4:	002c      	movs	r4, r5
 80062b6:	000d      	movs	r5, r1
 80062b8:	6927      	ldr	r7, [r4, #16]
 80062ba:	692e      	ldr	r6, [r5, #16]
 80062bc:	6861      	ldr	r1, [r4, #4]
 80062be:	19bb      	adds	r3, r7, r6
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	19ba      	adds	r2, r7, r6
 80062c6:	4293      	cmp	r3, r2
 80062c8:	da00      	bge.n	80062cc <__multiply+0x28>
 80062ca:	3101      	adds	r1, #1
 80062cc:	f7ff fede 	bl	800608c <_Balloc>
 80062d0:	9002      	str	r0, [sp, #8]
 80062d2:	2800      	cmp	r0, #0
 80062d4:	d106      	bne.n	80062e4 <__multiply+0x40>
 80062d6:	21b1      	movs	r1, #177	; 0xb1
 80062d8:	4b48      	ldr	r3, [pc, #288]	; (80063fc <__multiply+0x158>)
 80062da:	4849      	ldr	r0, [pc, #292]	; (8006400 <__multiply+0x15c>)
 80062dc:	9a02      	ldr	r2, [sp, #8]
 80062de:	0049      	lsls	r1, r1, #1
 80062e0:	f000 fd2a 	bl	8006d38 <__assert_func>
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	3314      	adds	r3, #20
 80062ea:	469c      	mov	ip, r3
 80062ec:	19bb      	adds	r3, r7, r6
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4463      	add	r3, ip
 80062f2:	9304      	str	r3, [sp, #16]
 80062f4:	4663      	mov	r3, ip
 80062f6:	9904      	ldr	r1, [sp, #16]
 80062f8:	428b      	cmp	r3, r1
 80062fa:	d32a      	bcc.n	8006352 <__multiply+0xae>
 80062fc:	0023      	movs	r3, r4
 80062fe:	00bf      	lsls	r7, r7, #2
 8006300:	3314      	adds	r3, #20
 8006302:	3514      	adds	r5, #20
 8006304:	9308      	str	r3, [sp, #32]
 8006306:	00b6      	lsls	r6, r6, #2
 8006308:	19db      	adds	r3, r3, r7
 800630a:	9305      	str	r3, [sp, #20]
 800630c:	19ab      	adds	r3, r5, r6
 800630e:	9309      	str	r3, [sp, #36]	; 0x24
 8006310:	2304      	movs	r3, #4
 8006312:	9306      	str	r3, [sp, #24]
 8006314:	0023      	movs	r3, r4
 8006316:	9a05      	ldr	r2, [sp, #20]
 8006318:	3315      	adds	r3, #21
 800631a:	9501      	str	r5, [sp, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d305      	bcc.n	800632c <__multiply+0x88>
 8006320:	1b13      	subs	r3, r2, r4
 8006322:	3b15      	subs	r3, #21
 8006324:	089b      	lsrs	r3, r3, #2
 8006326:	3301      	adds	r3, #1
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	9306      	str	r3, [sp, #24]
 800632c:	9b01      	ldr	r3, [sp, #4]
 800632e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006330:	4293      	cmp	r3, r2
 8006332:	d310      	bcc.n	8006356 <__multiply+0xb2>
 8006334:	9b03      	ldr	r3, [sp, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	dd05      	ble.n	8006346 <__multiply+0xa2>
 800633a:	9b04      	ldr	r3, [sp, #16]
 800633c:	3b04      	subs	r3, #4
 800633e:	9304      	str	r3, [sp, #16]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d056      	beq.n	80063f4 <__multiply+0x150>
 8006346:	9b02      	ldr	r3, [sp, #8]
 8006348:	9a03      	ldr	r2, [sp, #12]
 800634a:	0018      	movs	r0, r3
 800634c:	611a      	str	r2, [r3, #16]
 800634e:	b00b      	add	sp, #44	; 0x2c
 8006350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006352:	c304      	stmia	r3!, {r2}
 8006354:	e7cf      	b.n	80062f6 <__multiply+0x52>
 8006356:	9b01      	ldr	r3, [sp, #4]
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	b280      	uxth	r0, r0
 800635c:	2800      	cmp	r0, #0
 800635e:	d01e      	beq.n	800639e <__multiply+0xfa>
 8006360:	4667      	mov	r7, ip
 8006362:	2500      	movs	r5, #0
 8006364:	9e08      	ldr	r6, [sp, #32]
 8006366:	ce02      	ldmia	r6!, {r1}
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	9307      	str	r3, [sp, #28]
 800636c:	b28b      	uxth	r3, r1
 800636e:	4343      	muls	r3, r0
 8006370:	001a      	movs	r2, r3
 8006372:	466b      	mov	r3, sp
 8006374:	8b9b      	ldrh	r3, [r3, #28]
 8006376:	18d3      	adds	r3, r2, r3
 8006378:	195b      	adds	r3, r3, r5
 800637a:	0c0d      	lsrs	r5, r1, #16
 800637c:	4345      	muls	r5, r0
 800637e:	9a07      	ldr	r2, [sp, #28]
 8006380:	0c11      	lsrs	r1, r2, #16
 8006382:	1869      	adds	r1, r5, r1
 8006384:	0c1a      	lsrs	r2, r3, #16
 8006386:	188a      	adds	r2, r1, r2
 8006388:	b29b      	uxth	r3, r3
 800638a:	0c15      	lsrs	r5, r2, #16
 800638c:	0412      	lsls	r2, r2, #16
 800638e:	431a      	orrs	r2, r3
 8006390:	9b05      	ldr	r3, [sp, #20]
 8006392:	c704      	stmia	r7!, {r2}
 8006394:	42b3      	cmp	r3, r6
 8006396:	d8e6      	bhi.n	8006366 <__multiply+0xc2>
 8006398:	4663      	mov	r3, ip
 800639a:	9a06      	ldr	r2, [sp, #24]
 800639c:	509d      	str	r5, [r3, r2]
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	6818      	ldr	r0, [r3, #0]
 80063a2:	0c00      	lsrs	r0, r0, #16
 80063a4:	d020      	beq.n	80063e8 <__multiply+0x144>
 80063a6:	4663      	mov	r3, ip
 80063a8:	0025      	movs	r5, r4
 80063aa:	4661      	mov	r1, ip
 80063ac:	2700      	movs	r7, #0
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	3514      	adds	r5, #20
 80063b2:	682a      	ldr	r2, [r5, #0]
 80063b4:	680e      	ldr	r6, [r1, #0]
 80063b6:	b292      	uxth	r2, r2
 80063b8:	4342      	muls	r2, r0
 80063ba:	0c36      	lsrs	r6, r6, #16
 80063bc:	1992      	adds	r2, r2, r6
 80063be:	19d2      	adds	r2, r2, r7
 80063c0:	0416      	lsls	r6, r2, #16
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	431e      	orrs	r6, r3
 80063c6:	600e      	str	r6, [r1, #0]
 80063c8:	cd40      	ldmia	r5!, {r6}
 80063ca:	684b      	ldr	r3, [r1, #4]
 80063cc:	0c36      	lsrs	r6, r6, #16
 80063ce:	4346      	muls	r6, r0
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	0c12      	lsrs	r2, r2, #16
 80063d4:	18f3      	adds	r3, r6, r3
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	9a05      	ldr	r2, [sp, #20]
 80063da:	0c1f      	lsrs	r7, r3, #16
 80063dc:	3104      	adds	r1, #4
 80063de:	42aa      	cmp	r2, r5
 80063e0:	d8e7      	bhi.n	80063b2 <__multiply+0x10e>
 80063e2:	4662      	mov	r2, ip
 80063e4:	9906      	ldr	r1, [sp, #24]
 80063e6:	5053      	str	r3, [r2, r1]
 80063e8:	9b01      	ldr	r3, [sp, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	2304      	movs	r3, #4
 80063f0:	449c      	add	ip, r3
 80063f2:	e79b      	b.n	800632c <__multiply+0x88>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	9303      	str	r3, [sp, #12]
 80063fa:	e79b      	b.n	8006334 <__multiply+0x90>
 80063fc:	0800712c 	.word	0x0800712c
 8006400:	0800713d 	.word	0x0800713d

08006404 <__pow5mult>:
 8006404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006406:	2303      	movs	r3, #3
 8006408:	0015      	movs	r5, r2
 800640a:	0007      	movs	r7, r0
 800640c:	000e      	movs	r6, r1
 800640e:	401a      	ands	r2, r3
 8006410:	421d      	tst	r5, r3
 8006412:	d008      	beq.n	8006426 <__pow5mult+0x22>
 8006414:	4925      	ldr	r1, [pc, #148]	; (80064ac <__pow5mult+0xa8>)
 8006416:	3a01      	subs	r2, #1
 8006418:	0092      	lsls	r2, r2, #2
 800641a:	5852      	ldr	r2, [r2, r1]
 800641c:	2300      	movs	r3, #0
 800641e:	0031      	movs	r1, r6
 8006420:	f7ff fe9c 	bl	800615c <__multadd>
 8006424:	0006      	movs	r6, r0
 8006426:	10ad      	asrs	r5, r5, #2
 8006428:	d03d      	beq.n	80064a6 <__pow5mult+0xa2>
 800642a:	69fc      	ldr	r4, [r7, #28]
 800642c:	2c00      	cmp	r4, #0
 800642e:	d10f      	bne.n	8006450 <__pow5mult+0x4c>
 8006430:	2010      	movs	r0, #16
 8006432:	f7ff fd6d 	bl	8005f10 <malloc>
 8006436:	1e02      	subs	r2, r0, #0
 8006438:	61f8      	str	r0, [r7, #28]
 800643a:	d105      	bne.n	8006448 <__pow5mult+0x44>
 800643c:	21b4      	movs	r1, #180	; 0xb4
 800643e:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <__pow5mult+0xac>)
 8006440:	481c      	ldr	r0, [pc, #112]	; (80064b4 <__pow5mult+0xb0>)
 8006442:	31ff      	adds	r1, #255	; 0xff
 8006444:	f000 fc78 	bl	8006d38 <__assert_func>
 8006448:	6044      	str	r4, [r0, #4]
 800644a:	6084      	str	r4, [r0, #8]
 800644c:	6004      	str	r4, [r0, #0]
 800644e:	60c4      	str	r4, [r0, #12]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	689c      	ldr	r4, [r3, #8]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	2c00      	cmp	r4, #0
 8006458:	d108      	bne.n	800646c <__pow5mult+0x68>
 800645a:	0038      	movs	r0, r7
 800645c:	4916      	ldr	r1, [pc, #88]	; (80064b8 <__pow5mult+0xb4>)
 800645e:	f7ff ff09 	bl	8006274 <__i2b>
 8006462:	9b01      	ldr	r3, [sp, #4]
 8006464:	0004      	movs	r4, r0
 8006466:	6098      	str	r0, [r3, #8]
 8006468:	2300      	movs	r3, #0
 800646a:	6003      	str	r3, [r0, #0]
 800646c:	2301      	movs	r3, #1
 800646e:	421d      	tst	r5, r3
 8006470:	d00a      	beq.n	8006488 <__pow5mult+0x84>
 8006472:	0031      	movs	r1, r6
 8006474:	0022      	movs	r2, r4
 8006476:	0038      	movs	r0, r7
 8006478:	f7ff ff14 	bl	80062a4 <__multiply>
 800647c:	0031      	movs	r1, r6
 800647e:	9001      	str	r0, [sp, #4]
 8006480:	0038      	movs	r0, r7
 8006482:	f7ff fe47 	bl	8006114 <_Bfree>
 8006486:	9e01      	ldr	r6, [sp, #4]
 8006488:	106d      	asrs	r5, r5, #1
 800648a:	d00c      	beq.n	80064a6 <__pow5mult+0xa2>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	2800      	cmp	r0, #0
 8006490:	d107      	bne.n	80064a2 <__pow5mult+0x9e>
 8006492:	0022      	movs	r2, r4
 8006494:	0021      	movs	r1, r4
 8006496:	0038      	movs	r0, r7
 8006498:	f7ff ff04 	bl	80062a4 <__multiply>
 800649c:	2300      	movs	r3, #0
 800649e:	6020      	str	r0, [r4, #0]
 80064a0:	6003      	str	r3, [r0, #0]
 80064a2:	0004      	movs	r4, r0
 80064a4:	e7e2      	b.n	800646c <__pow5mult+0x68>
 80064a6:	0030      	movs	r0, r6
 80064a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064aa:	46c0      	nop			; (mov r8, r8)
 80064ac:	08007288 	.word	0x08007288
 80064b0:	080070bd 	.word	0x080070bd
 80064b4:	0800713d 	.word	0x0800713d
 80064b8:	00000271 	.word	0x00000271

080064bc <__lshift>:
 80064bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064be:	000c      	movs	r4, r1
 80064c0:	0017      	movs	r7, r2
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	1155      	asrs	r5, r2, #5
 80064c6:	b087      	sub	sp, #28
 80064c8:	18eb      	adds	r3, r5, r3
 80064ca:	9302      	str	r3, [sp, #8]
 80064cc:	3301      	adds	r3, #1
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	6849      	ldr	r1, [r1, #4]
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	9004      	str	r0, [sp, #16]
 80064d6:	9a01      	ldr	r2, [sp, #4]
 80064d8:	4293      	cmp	r3, r2
 80064da:	db10      	blt.n	80064fe <__lshift+0x42>
 80064dc:	9804      	ldr	r0, [sp, #16]
 80064de:	f7ff fdd5 	bl	800608c <_Balloc>
 80064e2:	2300      	movs	r3, #0
 80064e4:	0002      	movs	r2, r0
 80064e6:	0006      	movs	r6, r0
 80064e8:	0019      	movs	r1, r3
 80064ea:	3214      	adds	r2, #20
 80064ec:	4298      	cmp	r0, r3
 80064ee:	d10c      	bne.n	800650a <__lshift+0x4e>
 80064f0:	31df      	adds	r1, #223	; 0xdf
 80064f2:	0032      	movs	r2, r6
 80064f4:	4b26      	ldr	r3, [pc, #152]	; (8006590 <__lshift+0xd4>)
 80064f6:	4827      	ldr	r0, [pc, #156]	; (8006594 <__lshift+0xd8>)
 80064f8:	31ff      	adds	r1, #255	; 0xff
 80064fa:	f000 fc1d 	bl	8006d38 <__assert_func>
 80064fe:	3101      	adds	r1, #1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	e7e8      	b.n	80064d6 <__lshift+0x1a>
 8006504:	0098      	lsls	r0, r3, #2
 8006506:	5011      	str	r1, [r2, r0]
 8006508:	3301      	adds	r3, #1
 800650a:	42ab      	cmp	r3, r5
 800650c:	dbfa      	blt.n	8006504 <__lshift+0x48>
 800650e:	43eb      	mvns	r3, r5
 8006510:	17db      	asrs	r3, r3, #31
 8006512:	401d      	ands	r5, r3
 8006514:	211f      	movs	r1, #31
 8006516:	0023      	movs	r3, r4
 8006518:	0038      	movs	r0, r7
 800651a:	00ad      	lsls	r5, r5, #2
 800651c:	1955      	adds	r5, r2, r5
 800651e:	6922      	ldr	r2, [r4, #16]
 8006520:	3314      	adds	r3, #20
 8006522:	0092      	lsls	r2, r2, #2
 8006524:	4008      	ands	r0, r1
 8006526:	4684      	mov	ip, r0
 8006528:	189a      	adds	r2, r3, r2
 800652a:	420f      	tst	r7, r1
 800652c:	d02a      	beq.n	8006584 <__lshift+0xc8>
 800652e:	3101      	adds	r1, #1
 8006530:	1a09      	subs	r1, r1, r0
 8006532:	9105      	str	r1, [sp, #20]
 8006534:	2100      	movs	r1, #0
 8006536:	9503      	str	r5, [sp, #12]
 8006538:	4667      	mov	r7, ip
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	40b8      	lsls	r0, r7
 800653e:	4308      	orrs	r0, r1
 8006540:	9903      	ldr	r1, [sp, #12]
 8006542:	c101      	stmia	r1!, {r0}
 8006544:	9103      	str	r1, [sp, #12]
 8006546:	9805      	ldr	r0, [sp, #20]
 8006548:	cb02      	ldmia	r3!, {r1}
 800654a:	40c1      	lsrs	r1, r0
 800654c:	429a      	cmp	r2, r3
 800654e:	d8f3      	bhi.n	8006538 <__lshift+0x7c>
 8006550:	0020      	movs	r0, r4
 8006552:	3015      	adds	r0, #21
 8006554:	2304      	movs	r3, #4
 8006556:	4282      	cmp	r2, r0
 8006558:	d304      	bcc.n	8006564 <__lshift+0xa8>
 800655a:	1b13      	subs	r3, r2, r4
 800655c:	3b15      	subs	r3, #21
 800655e:	089b      	lsrs	r3, r3, #2
 8006560:	3301      	adds	r3, #1
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	50e9      	str	r1, [r5, r3]
 8006566:	2900      	cmp	r1, #0
 8006568:	d002      	beq.n	8006570 <__lshift+0xb4>
 800656a:	9b02      	ldr	r3, [sp, #8]
 800656c:	3302      	adds	r3, #2
 800656e:	9301      	str	r3, [sp, #4]
 8006570:	9b01      	ldr	r3, [sp, #4]
 8006572:	9804      	ldr	r0, [sp, #16]
 8006574:	3b01      	subs	r3, #1
 8006576:	0021      	movs	r1, r4
 8006578:	6133      	str	r3, [r6, #16]
 800657a:	f7ff fdcb 	bl	8006114 <_Bfree>
 800657e:	0030      	movs	r0, r6
 8006580:	b007      	add	sp, #28
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	cb02      	ldmia	r3!, {r1}
 8006586:	c502      	stmia	r5!, {r1}
 8006588:	429a      	cmp	r2, r3
 800658a:	d8fb      	bhi.n	8006584 <__lshift+0xc8>
 800658c:	e7f0      	b.n	8006570 <__lshift+0xb4>
 800658e:	46c0      	nop			; (mov r8, r8)
 8006590:	0800712c 	.word	0x0800712c
 8006594:	0800713d 	.word	0x0800713d

08006598 <__mcmp>:
 8006598:	b530      	push	{r4, r5, lr}
 800659a:	690b      	ldr	r3, [r1, #16]
 800659c:	6904      	ldr	r4, [r0, #16]
 800659e:	0002      	movs	r2, r0
 80065a0:	1ae0      	subs	r0, r4, r3
 80065a2:	429c      	cmp	r4, r3
 80065a4:	d10e      	bne.n	80065c4 <__mcmp+0x2c>
 80065a6:	3214      	adds	r2, #20
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	3114      	adds	r1, #20
 80065ac:	0014      	movs	r4, r2
 80065ae:	18c9      	adds	r1, r1, r3
 80065b0:	18d2      	adds	r2, r2, r3
 80065b2:	3a04      	subs	r2, #4
 80065b4:	3904      	subs	r1, #4
 80065b6:	6815      	ldr	r5, [r2, #0]
 80065b8:	680b      	ldr	r3, [r1, #0]
 80065ba:	429d      	cmp	r5, r3
 80065bc:	d003      	beq.n	80065c6 <__mcmp+0x2e>
 80065be:	2001      	movs	r0, #1
 80065c0:	429d      	cmp	r5, r3
 80065c2:	d303      	bcc.n	80065cc <__mcmp+0x34>
 80065c4:	bd30      	pop	{r4, r5, pc}
 80065c6:	4294      	cmp	r4, r2
 80065c8:	d3f3      	bcc.n	80065b2 <__mcmp+0x1a>
 80065ca:	e7fb      	b.n	80065c4 <__mcmp+0x2c>
 80065cc:	4240      	negs	r0, r0
 80065ce:	e7f9      	b.n	80065c4 <__mcmp+0x2c>

080065d0 <__mdiff>:
 80065d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d2:	000e      	movs	r6, r1
 80065d4:	0007      	movs	r7, r0
 80065d6:	0011      	movs	r1, r2
 80065d8:	0030      	movs	r0, r6
 80065da:	b087      	sub	sp, #28
 80065dc:	0014      	movs	r4, r2
 80065de:	f7ff ffdb 	bl	8006598 <__mcmp>
 80065e2:	1e05      	subs	r5, r0, #0
 80065e4:	d110      	bne.n	8006608 <__mdiff+0x38>
 80065e6:	0001      	movs	r1, r0
 80065e8:	0038      	movs	r0, r7
 80065ea:	f7ff fd4f 	bl	800608c <_Balloc>
 80065ee:	1e02      	subs	r2, r0, #0
 80065f0:	d104      	bne.n	80065fc <__mdiff+0x2c>
 80065f2:	4b3f      	ldr	r3, [pc, #252]	; (80066f0 <__mdiff+0x120>)
 80065f4:	483f      	ldr	r0, [pc, #252]	; (80066f4 <__mdiff+0x124>)
 80065f6:	4940      	ldr	r1, [pc, #256]	; (80066f8 <__mdiff+0x128>)
 80065f8:	f000 fb9e 	bl	8006d38 <__assert_func>
 80065fc:	2301      	movs	r3, #1
 80065fe:	6145      	str	r5, [r0, #20]
 8006600:	6103      	str	r3, [r0, #16]
 8006602:	0010      	movs	r0, r2
 8006604:	b007      	add	sp, #28
 8006606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006608:	2301      	movs	r3, #1
 800660a:	9301      	str	r3, [sp, #4]
 800660c:	2800      	cmp	r0, #0
 800660e:	db04      	blt.n	800661a <__mdiff+0x4a>
 8006610:	0023      	movs	r3, r4
 8006612:	0034      	movs	r4, r6
 8006614:	001e      	movs	r6, r3
 8006616:	2300      	movs	r3, #0
 8006618:	9301      	str	r3, [sp, #4]
 800661a:	0038      	movs	r0, r7
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	f7ff fd35 	bl	800608c <_Balloc>
 8006622:	1e02      	subs	r2, r0, #0
 8006624:	d103      	bne.n	800662e <__mdiff+0x5e>
 8006626:	4b32      	ldr	r3, [pc, #200]	; (80066f0 <__mdiff+0x120>)
 8006628:	4832      	ldr	r0, [pc, #200]	; (80066f4 <__mdiff+0x124>)
 800662a:	4934      	ldr	r1, [pc, #208]	; (80066fc <__mdiff+0x12c>)
 800662c:	e7e4      	b.n	80065f8 <__mdiff+0x28>
 800662e:	9b01      	ldr	r3, [sp, #4]
 8006630:	2700      	movs	r7, #0
 8006632:	60c3      	str	r3, [r0, #12]
 8006634:	6920      	ldr	r0, [r4, #16]
 8006636:	3414      	adds	r4, #20
 8006638:	0083      	lsls	r3, r0, #2
 800663a:	18e3      	adds	r3, r4, r3
 800663c:	0021      	movs	r1, r4
 800663e:	9401      	str	r4, [sp, #4]
 8006640:	0034      	movs	r4, r6
 8006642:	9302      	str	r3, [sp, #8]
 8006644:	6933      	ldr	r3, [r6, #16]
 8006646:	3414      	adds	r4, #20
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	18e3      	adds	r3, r4, r3
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	0013      	movs	r3, r2
 8006650:	3314      	adds	r3, #20
 8006652:	469c      	mov	ip, r3
 8006654:	9305      	str	r3, [sp, #20]
 8006656:	9104      	str	r1, [sp, #16]
 8006658:	9b04      	ldr	r3, [sp, #16]
 800665a:	cc02      	ldmia	r4!, {r1}
 800665c:	cb20      	ldmia	r3!, {r5}
 800665e:	9304      	str	r3, [sp, #16]
 8006660:	b2ab      	uxth	r3, r5
 8006662:	19df      	adds	r7, r3, r7
 8006664:	b28b      	uxth	r3, r1
 8006666:	1afb      	subs	r3, r7, r3
 8006668:	0c09      	lsrs	r1, r1, #16
 800666a:	0c2d      	lsrs	r5, r5, #16
 800666c:	1a6d      	subs	r5, r5, r1
 800666e:	1419      	asrs	r1, r3, #16
 8006670:	1869      	adds	r1, r5, r1
 8006672:	b29b      	uxth	r3, r3
 8006674:	140f      	asrs	r7, r1, #16
 8006676:	0409      	lsls	r1, r1, #16
 8006678:	4319      	orrs	r1, r3
 800667a:	4663      	mov	r3, ip
 800667c:	c302      	stmia	r3!, {r1}
 800667e:	469c      	mov	ip, r3
 8006680:	9b03      	ldr	r3, [sp, #12]
 8006682:	42a3      	cmp	r3, r4
 8006684:	d8e8      	bhi.n	8006658 <__mdiff+0x88>
 8006686:	0031      	movs	r1, r6
 8006688:	9c03      	ldr	r4, [sp, #12]
 800668a:	3115      	adds	r1, #21
 800668c:	2304      	movs	r3, #4
 800668e:	428c      	cmp	r4, r1
 8006690:	d304      	bcc.n	800669c <__mdiff+0xcc>
 8006692:	1ba3      	subs	r3, r4, r6
 8006694:	3b15      	subs	r3, #21
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	3301      	adds	r3, #1
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	9901      	ldr	r1, [sp, #4]
 800669e:	18cd      	adds	r5, r1, r3
 80066a0:	9905      	ldr	r1, [sp, #20]
 80066a2:	002e      	movs	r6, r5
 80066a4:	18cb      	adds	r3, r1, r3
 80066a6:	469c      	mov	ip, r3
 80066a8:	9902      	ldr	r1, [sp, #8]
 80066aa:	428e      	cmp	r6, r1
 80066ac:	d310      	bcc.n	80066d0 <__mdiff+0x100>
 80066ae:	9e02      	ldr	r6, [sp, #8]
 80066b0:	1ee9      	subs	r1, r5, #3
 80066b2:	2400      	movs	r4, #0
 80066b4:	428e      	cmp	r6, r1
 80066b6:	d304      	bcc.n	80066c2 <__mdiff+0xf2>
 80066b8:	0031      	movs	r1, r6
 80066ba:	3103      	adds	r1, #3
 80066bc:	1b49      	subs	r1, r1, r5
 80066be:	0889      	lsrs	r1, r1, #2
 80066c0:	008c      	lsls	r4, r1, #2
 80066c2:	191b      	adds	r3, r3, r4
 80066c4:	3b04      	subs	r3, #4
 80066c6:	6819      	ldr	r1, [r3, #0]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d00f      	beq.n	80066ec <__mdiff+0x11c>
 80066cc:	6110      	str	r0, [r2, #16]
 80066ce:	e798      	b.n	8006602 <__mdiff+0x32>
 80066d0:	ce02      	ldmia	r6!, {r1}
 80066d2:	b28c      	uxth	r4, r1
 80066d4:	19e4      	adds	r4, r4, r7
 80066d6:	0c0f      	lsrs	r7, r1, #16
 80066d8:	1421      	asrs	r1, r4, #16
 80066da:	1879      	adds	r1, r7, r1
 80066dc:	b2a4      	uxth	r4, r4
 80066de:	140f      	asrs	r7, r1, #16
 80066e0:	0409      	lsls	r1, r1, #16
 80066e2:	4321      	orrs	r1, r4
 80066e4:	4664      	mov	r4, ip
 80066e6:	c402      	stmia	r4!, {r1}
 80066e8:	46a4      	mov	ip, r4
 80066ea:	e7dd      	b.n	80066a8 <__mdiff+0xd8>
 80066ec:	3801      	subs	r0, #1
 80066ee:	e7e9      	b.n	80066c4 <__mdiff+0xf4>
 80066f0:	0800712c 	.word	0x0800712c
 80066f4:	0800713d 	.word	0x0800713d
 80066f8:	00000237 	.word	0x00000237
 80066fc:	00000245 	.word	0x00000245

08006700 <__d2b>:
 8006700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006702:	2101      	movs	r1, #1
 8006704:	0014      	movs	r4, r2
 8006706:	001d      	movs	r5, r3
 8006708:	9f08      	ldr	r7, [sp, #32]
 800670a:	f7ff fcbf 	bl	800608c <_Balloc>
 800670e:	1e06      	subs	r6, r0, #0
 8006710:	d105      	bne.n	800671e <__d2b+0x1e>
 8006712:	0032      	movs	r2, r6
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <__d2b+0xa8>)
 8006716:	4825      	ldr	r0, [pc, #148]	; (80067ac <__d2b+0xac>)
 8006718:	4925      	ldr	r1, [pc, #148]	; (80067b0 <__d2b+0xb0>)
 800671a:	f000 fb0d 	bl	8006d38 <__assert_func>
 800671e:	032b      	lsls	r3, r5, #12
 8006720:	006d      	lsls	r5, r5, #1
 8006722:	0b1b      	lsrs	r3, r3, #12
 8006724:	0d6d      	lsrs	r5, r5, #21
 8006726:	d125      	bne.n	8006774 <__d2b+0x74>
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	2c00      	cmp	r4, #0
 800672c:	d028      	beq.n	8006780 <__d2b+0x80>
 800672e:	4668      	mov	r0, sp
 8006730:	9400      	str	r4, [sp, #0]
 8006732:	f7ff fd71 	bl	8006218 <__lo0bits>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	9900      	ldr	r1, [sp, #0]
 800673a:	2800      	cmp	r0, #0
 800673c:	d01e      	beq.n	800677c <__d2b+0x7c>
 800673e:	2220      	movs	r2, #32
 8006740:	001c      	movs	r4, r3
 8006742:	1a12      	subs	r2, r2, r0
 8006744:	4094      	lsls	r4, r2
 8006746:	0022      	movs	r2, r4
 8006748:	40c3      	lsrs	r3, r0
 800674a:	430a      	orrs	r2, r1
 800674c:	6172      	str	r2, [r6, #20]
 800674e:	9301      	str	r3, [sp, #4]
 8006750:	9c01      	ldr	r4, [sp, #4]
 8006752:	61b4      	str	r4, [r6, #24]
 8006754:	1e63      	subs	r3, r4, #1
 8006756:	419c      	sbcs	r4, r3
 8006758:	3401      	adds	r4, #1
 800675a:	6134      	str	r4, [r6, #16]
 800675c:	2d00      	cmp	r5, #0
 800675e:	d017      	beq.n	8006790 <__d2b+0x90>
 8006760:	2435      	movs	r4, #53	; 0x35
 8006762:	4b14      	ldr	r3, [pc, #80]	; (80067b4 <__d2b+0xb4>)
 8006764:	18ed      	adds	r5, r5, r3
 8006766:	182d      	adds	r5, r5, r0
 8006768:	603d      	str	r5, [r7, #0]
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	1a24      	subs	r4, r4, r0
 800676e:	601c      	str	r4, [r3, #0]
 8006770:	0030      	movs	r0, r6
 8006772:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006774:	2280      	movs	r2, #128	; 0x80
 8006776:	0352      	lsls	r2, r2, #13
 8006778:	4313      	orrs	r3, r2
 800677a:	e7d5      	b.n	8006728 <__d2b+0x28>
 800677c:	6171      	str	r1, [r6, #20]
 800677e:	e7e7      	b.n	8006750 <__d2b+0x50>
 8006780:	a801      	add	r0, sp, #4
 8006782:	f7ff fd49 	bl	8006218 <__lo0bits>
 8006786:	9b01      	ldr	r3, [sp, #4]
 8006788:	2401      	movs	r4, #1
 800678a:	6173      	str	r3, [r6, #20]
 800678c:	3020      	adds	r0, #32
 800678e:	e7e4      	b.n	800675a <__d2b+0x5a>
 8006790:	4b09      	ldr	r3, [pc, #36]	; (80067b8 <__d2b+0xb8>)
 8006792:	18c0      	adds	r0, r0, r3
 8006794:	4b09      	ldr	r3, [pc, #36]	; (80067bc <__d2b+0xbc>)
 8006796:	6038      	str	r0, [r7, #0]
 8006798:	18e3      	adds	r3, r4, r3
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	18f3      	adds	r3, r6, r3
 800679e:	6958      	ldr	r0, [r3, #20]
 80067a0:	f7ff fd20 	bl	80061e4 <__hi0bits>
 80067a4:	0164      	lsls	r4, r4, #5
 80067a6:	e7e0      	b.n	800676a <__d2b+0x6a>
 80067a8:	0800712c 	.word	0x0800712c
 80067ac:	0800713d 	.word	0x0800713d
 80067b0:	0000030f 	.word	0x0000030f
 80067b4:	fffffbcd 	.word	0xfffffbcd
 80067b8:	fffffbce 	.word	0xfffffbce
 80067bc:	3fffffff 	.word	0x3fffffff

080067c0 <__sfputc_r>:
 80067c0:	6893      	ldr	r3, [r2, #8]
 80067c2:	b510      	push	{r4, lr}
 80067c4:	3b01      	subs	r3, #1
 80067c6:	6093      	str	r3, [r2, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	da04      	bge.n	80067d6 <__sfputc_r+0x16>
 80067cc:	6994      	ldr	r4, [r2, #24]
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	db07      	blt.n	80067e2 <__sfputc_r+0x22>
 80067d2:	290a      	cmp	r1, #10
 80067d4:	d005      	beq.n	80067e2 <__sfputc_r+0x22>
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	1c58      	adds	r0, r3, #1
 80067da:	6010      	str	r0, [r2, #0]
 80067dc:	7019      	strb	r1, [r3, #0]
 80067de:	0008      	movs	r0, r1
 80067e0:	bd10      	pop	{r4, pc}
 80067e2:	f000 f9e6 	bl	8006bb2 <__swbuf_r>
 80067e6:	0001      	movs	r1, r0
 80067e8:	e7f9      	b.n	80067de <__sfputc_r+0x1e>

080067ea <__sfputs_r>:
 80067ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ec:	0006      	movs	r6, r0
 80067ee:	000f      	movs	r7, r1
 80067f0:	0014      	movs	r4, r2
 80067f2:	18d5      	adds	r5, r2, r3
 80067f4:	42ac      	cmp	r4, r5
 80067f6:	d101      	bne.n	80067fc <__sfputs_r+0x12>
 80067f8:	2000      	movs	r0, #0
 80067fa:	e007      	b.n	800680c <__sfputs_r+0x22>
 80067fc:	7821      	ldrb	r1, [r4, #0]
 80067fe:	003a      	movs	r2, r7
 8006800:	0030      	movs	r0, r6
 8006802:	f7ff ffdd 	bl	80067c0 <__sfputc_r>
 8006806:	3401      	adds	r4, #1
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d1f3      	bne.n	80067f4 <__sfputs_r+0xa>
 800680c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006810 <_vfiprintf_r>:
 8006810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006812:	b0a1      	sub	sp, #132	; 0x84
 8006814:	000f      	movs	r7, r1
 8006816:	0015      	movs	r5, r2
 8006818:	001e      	movs	r6, r3
 800681a:	9003      	str	r0, [sp, #12]
 800681c:	2800      	cmp	r0, #0
 800681e:	d004      	beq.n	800682a <_vfiprintf_r+0x1a>
 8006820:	6a03      	ldr	r3, [r0, #32]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <_vfiprintf_r+0x1a>
 8006826:	f7fe fb69 	bl	8004efc <__sinit>
 800682a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682c:	07db      	lsls	r3, r3, #31
 800682e:	d405      	bmi.n	800683c <_vfiprintf_r+0x2c>
 8006830:	89bb      	ldrh	r3, [r7, #12]
 8006832:	059b      	lsls	r3, r3, #22
 8006834:	d402      	bmi.n	800683c <_vfiprintf_r+0x2c>
 8006836:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006838:	f7fe fc75 	bl	8005126 <__retarget_lock_acquire_recursive>
 800683c:	89bb      	ldrh	r3, [r7, #12]
 800683e:	071b      	lsls	r3, r3, #28
 8006840:	d502      	bpl.n	8006848 <_vfiprintf_r+0x38>
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d113      	bne.n	8006870 <_vfiprintf_r+0x60>
 8006848:	0039      	movs	r1, r7
 800684a:	9803      	ldr	r0, [sp, #12]
 800684c:	f000 f9f4 	bl	8006c38 <__swsetup_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	d00d      	beq.n	8006870 <_vfiprintf_r+0x60>
 8006854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d503      	bpl.n	8006862 <_vfiprintf_r+0x52>
 800685a:	2001      	movs	r0, #1
 800685c:	4240      	negs	r0, r0
 800685e:	b021      	add	sp, #132	; 0x84
 8006860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006862:	89bb      	ldrh	r3, [r7, #12]
 8006864:	059b      	lsls	r3, r3, #22
 8006866:	d4f8      	bmi.n	800685a <_vfiprintf_r+0x4a>
 8006868:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800686a:	f7fe fc5d 	bl	8005128 <__retarget_lock_release_recursive>
 800686e:	e7f4      	b.n	800685a <_vfiprintf_r+0x4a>
 8006870:	2300      	movs	r3, #0
 8006872:	ac08      	add	r4, sp, #32
 8006874:	6163      	str	r3, [r4, #20]
 8006876:	3320      	adds	r3, #32
 8006878:	7663      	strb	r3, [r4, #25]
 800687a:	3310      	adds	r3, #16
 800687c:	76a3      	strb	r3, [r4, #26]
 800687e:	9607      	str	r6, [sp, #28]
 8006880:	002e      	movs	r6, r5
 8006882:	7833      	ldrb	r3, [r6, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <_vfiprintf_r+0x7c>
 8006888:	2b25      	cmp	r3, #37	; 0x25
 800688a:	d148      	bne.n	800691e <_vfiprintf_r+0x10e>
 800688c:	1b73      	subs	r3, r6, r5
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	42ae      	cmp	r6, r5
 8006892:	d00b      	beq.n	80068ac <_vfiprintf_r+0x9c>
 8006894:	002a      	movs	r2, r5
 8006896:	0039      	movs	r1, r7
 8006898:	9803      	ldr	r0, [sp, #12]
 800689a:	f7ff ffa6 	bl	80067ea <__sfputs_r>
 800689e:	3001      	adds	r0, #1
 80068a0:	d100      	bne.n	80068a4 <_vfiprintf_r+0x94>
 80068a2:	e0af      	b.n	8006a04 <_vfiprintf_r+0x1f4>
 80068a4:	6963      	ldr	r3, [r4, #20]
 80068a6:	9a05      	ldr	r2, [sp, #20]
 80068a8:	189b      	adds	r3, r3, r2
 80068aa:	6163      	str	r3, [r4, #20]
 80068ac:	7833      	ldrb	r3, [r6, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d100      	bne.n	80068b4 <_vfiprintf_r+0xa4>
 80068b2:	e0a7      	b.n	8006a04 <_vfiprintf_r+0x1f4>
 80068b4:	2201      	movs	r2, #1
 80068b6:	2300      	movs	r3, #0
 80068b8:	4252      	negs	r2, r2
 80068ba:	6062      	str	r2, [r4, #4]
 80068bc:	a904      	add	r1, sp, #16
 80068be:	3254      	adds	r2, #84	; 0x54
 80068c0:	1852      	adds	r2, r2, r1
 80068c2:	1c75      	adds	r5, r6, #1
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	60e3      	str	r3, [r4, #12]
 80068c8:	60a3      	str	r3, [r4, #8]
 80068ca:	7013      	strb	r3, [r2, #0]
 80068cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80068ce:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <_vfiprintf_r+0x224>)
 80068d0:	2205      	movs	r2, #5
 80068d2:	0018      	movs	r0, r3
 80068d4:	7829      	ldrb	r1, [r5, #0]
 80068d6:	9305      	str	r3, [sp, #20]
 80068d8:	f7fe fc27 	bl	800512a <memchr>
 80068dc:	1c6e      	adds	r6, r5, #1
 80068de:	2800      	cmp	r0, #0
 80068e0:	d11f      	bne.n	8006922 <_vfiprintf_r+0x112>
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	06d3      	lsls	r3, r2, #27
 80068e6:	d504      	bpl.n	80068f2 <_vfiprintf_r+0xe2>
 80068e8:	2353      	movs	r3, #83	; 0x53
 80068ea:	a904      	add	r1, sp, #16
 80068ec:	185b      	adds	r3, r3, r1
 80068ee:	2120      	movs	r1, #32
 80068f0:	7019      	strb	r1, [r3, #0]
 80068f2:	0713      	lsls	r3, r2, #28
 80068f4:	d504      	bpl.n	8006900 <_vfiprintf_r+0xf0>
 80068f6:	2353      	movs	r3, #83	; 0x53
 80068f8:	a904      	add	r1, sp, #16
 80068fa:	185b      	adds	r3, r3, r1
 80068fc:	212b      	movs	r1, #43	; 0x2b
 80068fe:	7019      	strb	r1, [r3, #0]
 8006900:	782b      	ldrb	r3, [r5, #0]
 8006902:	2b2a      	cmp	r3, #42	; 0x2a
 8006904:	d016      	beq.n	8006934 <_vfiprintf_r+0x124>
 8006906:	002e      	movs	r6, r5
 8006908:	2100      	movs	r1, #0
 800690a:	200a      	movs	r0, #10
 800690c:	68e3      	ldr	r3, [r4, #12]
 800690e:	7832      	ldrb	r2, [r6, #0]
 8006910:	1c75      	adds	r5, r6, #1
 8006912:	3a30      	subs	r2, #48	; 0x30
 8006914:	2a09      	cmp	r2, #9
 8006916:	d94e      	bls.n	80069b6 <_vfiprintf_r+0x1a6>
 8006918:	2900      	cmp	r1, #0
 800691a:	d111      	bne.n	8006940 <_vfiprintf_r+0x130>
 800691c:	e017      	b.n	800694e <_vfiprintf_r+0x13e>
 800691e:	3601      	adds	r6, #1
 8006920:	e7af      	b.n	8006882 <_vfiprintf_r+0x72>
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	6822      	ldr	r2, [r4, #0]
 8006926:	1ac0      	subs	r0, r0, r3
 8006928:	2301      	movs	r3, #1
 800692a:	4083      	lsls	r3, r0
 800692c:	4313      	orrs	r3, r2
 800692e:	0035      	movs	r5, r6
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	e7cc      	b.n	80068ce <_vfiprintf_r+0xbe>
 8006934:	9b07      	ldr	r3, [sp, #28]
 8006936:	1d19      	adds	r1, r3, #4
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	9107      	str	r1, [sp, #28]
 800693c:	2b00      	cmp	r3, #0
 800693e:	db01      	blt.n	8006944 <_vfiprintf_r+0x134>
 8006940:	930b      	str	r3, [sp, #44]	; 0x2c
 8006942:	e004      	b.n	800694e <_vfiprintf_r+0x13e>
 8006944:	425b      	negs	r3, r3
 8006946:	60e3      	str	r3, [r4, #12]
 8006948:	2302      	movs	r3, #2
 800694a:	4313      	orrs	r3, r2
 800694c:	6023      	str	r3, [r4, #0]
 800694e:	7833      	ldrb	r3, [r6, #0]
 8006950:	2b2e      	cmp	r3, #46	; 0x2e
 8006952:	d10a      	bne.n	800696a <_vfiprintf_r+0x15a>
 8006954:	7873      	ldrb	r3, [r6, #1]
 8006956:	2b2a      	cmp	r3, #42	; 0x2a
 8006958:	d135      	bne.n	80069c6 <_vfiprintf_r+0x1b6>
 800695a:	9b07      	ldr	r3, [sp, #28]
 800695c:	3602      	adds	r6, #2
 800695e:	1d1a      	adds	r2, r3, #4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	9207      	str	r2, [sp, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	db2b      	blt.n	80069c0 <_vfiprintf_r+0x1b0>
 8006968:	9309      	str	r3, [sp, #36]	; 0x24
 800696a:	4d33      	ldr	r5, [pc, #204]	; (8006a38 <_vfiprintf_r+0x228>)
 800696c:	2203      	movs	r2, #3
 800696e:	0028      	movs	r0, r5
 8006970:	7831      	ldrb	r1, [r6, #0]
 8006972:	f7fe fbda 	bl	800512a <memchr>
 8006976:	2800      	cmp	r0, #0
 8006978:	d006      	beq.n	8006988 <_vfiprintf_r+0x178>
 800697a:	2340      	movs	r3, #64	; 0x40
 800697c:	1b40      	subs	r0, r0, r5
 800697e:	4083      	lsls	r3, r0
 8006980:	6822      	ldr	r2, [r4, #0]
 8006982:	3601      	adds	r6, #1
 8006984:	4313      	orrs	r3, r2
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	7831      	ldrb	r1, [r6, #0]
 800698a:	2206      	movs	r2, #6
 800698c:	482b      	ldr	r0, [pc, #172]	; (8006a3c <_vfiprintf_r+0x22c>)
 800698e:	1c75      	adds	r5, r6, #1
 8006990:	7621      	strb	r1, [r4, #24]
 8006992:	f7fe fbca 	bl	800512a <memchr>
 8006996:	2800      	cmp	r0, #0
 8006998:	d043      	beq.n	8006a22 <_vfiprintf_r+0x212>
 800699a:	4b29      	ldr	r3, [pc, #164]	; (8006a40 <_vfiprintf_r+0x230>)
 800699c:	2b00      	cmp	r3, #0
 800699e:	d125      	bne.n	80069ec <_vfiprintf_r+0x1dc>
 80069a0:	2207      	movs	r2, #7
 80069a2:	9b07      	ldr	r3, [sp, #28]
 80069a4:	3307      	adds	r3, #7
 80069a6:	4393      	bics	r3, r2
 80069a8:	3308      	adds	r3, #8
 80069aa:	9307      	str	r3, [sp, #28]
 80069ac:	6963      	ldr	r3, [r4, #20]
 80069ae:	9a04      	ldr	r2, [sp, #16]
 80069b0:	189b      	adds	r3, r3, r2
 80069b2:	6163      	str	r3, [r4, #20]
 80069b4:	e764      	b.n	8006880 <_vfiprintf_r+0x70>
 80069b6:	4343      	muls	r3, r0
 80069b8:	002e      	movs	r6, r5
 80069ba:	2101      	movs	r1, #1
 80069bc:	189b      	adds	r3, r3, r2
 80069be:	e7a6      	b.n	800690e <_vfiprintf_r+0xfe>
 80069c0:	2301      	movs	r3, #1
 80069c2:	425b      	negs	r3, r3
 80069c4:	e7d0      	b.n	8006968 <_vfiprintf_r+0x158>
 80069c6:	2300      	movs	r3, #0
 80069c8:	200a      	movs	r0, #10
 80069ca:	001a      	movs	r2, r3
 80069cc:	3601      	adds	r6, #1
 80069ce:	6063      	str	r3, [r4, #4]
 80069d0:	7831      	ldrb	r1, [r6, #0]
 80069d2:	1c75      	adds	r5, r6, #1
 80069d4:	3930      	subs	r1, #48	; 0x30
 80069d6:	2909      	cmp	r1, #9
 80069d8:	d903      	bls.n	80069e2 <_vfiprintf_r+0x1d2>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0c5      	beq.n	800696a <_vfiprintf_r+0x15a>
 80069de:	9209      	str	r2, [sp, #36]	; 0x24
 80069e0:	e7c3      	b.n	800696a <_vfiprintf_r+0x15a>
 80069e2:	4342      	muls	r2, r0
 80069e4:	002e      	movs	r6, r5
 80069e6:	2301      	movs	r3, #1
 80069e8:	1852      	adds	r2, r2, r1
 80069ea:	e7f1      	b.n	80069d0 <_vfiprintf_r+0x1c0>
 80069ec:	aa07      	add	r2, sp, #28
 80069ee:	9200      	str	r2, [sp, #0]
 80069f0:	0021      	movs	r1, r4
 80069f2:	003a      	movs	r2, r7
 80069f4:	4b13      	ldr	r3, [pc, #76]	; (8006a44 <_vfiprintf_r+0x234>)
 80069f6:	9803      	ldr	r0, [sp, #12]
 80069f8:	f7fd fe1a 	bl	8004630 <_printf_float>
 80069fc:	9004      	str	r0, [sp, #16]
 80069fe:	9b04      	ldr	r3, [sp, #16]
 8006a00:	3301      	adds	r3, #1
 8006a02:	d1d3      	bne.n	80069ac <_vfiprintf_r+0x19c>
 8006a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a06:	07db      	lsls	r3, r3, #31
 8006a08:	d405      	bmi.n	8006a16 <_vfiprintf_r+0x206>
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	059b      	lsls	r3, r3, #22
 8006a0e:	d402      	bmi.n	8006a16 <_vfiprintf_r+0x206>
 8006a10:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006a12:	f7fe fb89 	bl	8005128 <__retarget_lock_release_recursive>
 8006a16:	89bb      	ldrh	r3, [r7, #12]
 8006a18:	065b      	lsls	r3, r3, #25
 8006a1a:	d500      	bpl.n	8006a1e <_vfiprintf_r+0x20e>
 8006a1c:	e71d      	b.n	800685a <_vfiprintf_r+0x4a>
 8006a1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006a20:	e71d      	b.n	800685e <_vfiprintf_r+0x4e>
 8006a22:	aa07      	add	r2, sp, #28
 8006a24:	9200      	str	r2, [sp, #0]
 8006a26:	0021      	movs	r1, r4
 8006a28:	003a      	movs	r2, r7
 8006a2a:	4b06      	ldr	r3, [pc, #24]	; (8006a44 <_vfiprintf_r+0x234>)
 8006a2c:	9803      	ldr	r0, [sp, #12]
 8006a2e:	f7fe f8c5 	bl	8004bbc <_printf_i>
 8006a32:	e7e3      	b.n	80069fc <_vfiprintf_r+0x1ec>
 8006a34:	08007294 	.word	0x08007294
 8006a38:	0800729a 	.word	0x0800729a
 8006a3c:	0800729e 	.word	0x0800729e
 8006a40:	08004631 	.word	0x08004631
 8006a44:	080067eb 	.word	0x080067eb

08006a48 <__sflush_r>:
 8006a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a4a:	898b      	ldrh	r3, [r1, #12]
 8006a4c:	0005      	movs	r5, r0
 8006a4e:	000c      	movs	r4, r1
 8006a50:	071a      	lsls	r2, r3, #28
 8006a52:	d45c      	bmi.n	8006b0e <__sflush_r+0xc6>
 8006a54:	684a      	ldr	r2, [r1, #4]
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	dc04      	bgt.n	8006a64 <__sflush_r+0x1c>
 8006a5a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	dc01      	bgt.n	8006a64 <__sflush_r+0x1c>
 8006a60:	2000      	movs	r0, #0
 8006a62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a64:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	d0fa      	beq.n	8006a60 <__sflush_r+0x18>
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	2080      	movs	r0, #128	; 0x80
 8006a6e:	682e      	ldr	r6, [r5, #0]
 8006a70:	602a      	str	r2, [r5, #0]
 8006a72:	001a      	movs	r2, r3
 8006a74:	0140      	lsls	r0, r0, #5
 8006a76:	6a21      	ldr	r1, [r4, #32]
 8006a78:	4002      	ands	r2, r0
 8006a7a:	4203      	tst	r3, r0
 8006a7c:	d034      	beq.n	8006ae8 <__sflush_r+0xa0>
 8006a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a80:	89a3      	ldrh	r3, [r4, #12]
 8006a82:	075b      	lsls	r3, r3, #29
 8006a84:	d506      	bpl.n	8006a94 <__sflush_r+0x4c>
 8006a86:	6863      	ldr	r3, [r4, #4]
 8006a88:	1ac0      	subs	r0, r0, r3
 8006a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <__sflush_r+0x4c>
 8006a90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a92:	1ac0      	subs	r0, r0, r3
 8006a94:	0002      	movs	r2, r0
 8006a96:	2300      	movs	r3, #0
 8006a98:	0028      	movs	r0, r5
 8006a9a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a9c:	6a21      	ldr	r1, [r4, #32]
 8006a9e:	47b8      	blx	r7
 8006aa0:	89a2      	ldrh	r2, [r4, #12]
 8006aa2:	1c43      	adds	r3, r0, #1
 8006aa4:	d106      	bne.n	8006ab4 <__sflush_r+0x6c>
 8006aa6:	6829      	ldr	r1, [r5, #0]
 8006aa8:	291d      	cmp	r1, #29
 8006aaa:	d82c      	bhi.n	8006b06 <__sflush_r+0xbe>
 8006aac:	4b2a      	ldr	r3, [pc, #168]	; (8006b58 <__sflush_r+0x110>)
 8006aae:	410b      	asrs	r3, r1
 8006ab0:	07db      	lsls	r3, r3, #31
 8006ab2:	d428      	bmi.n	8006b06 <__sflush_r+0xbe>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	04d2      	lsls	r2, r2, #19
 8006abe:	d505      	bpl.n	8006acc <__sflush_r+0x84>
 8006ac0:	1c43      	adds	r3, r0, #1
 8006ac2:	d102      	bne.n	8006aca <__sflush_r+0x82>
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d100      	bne.n	8006acc <__sflush_r+0x84>
 8006aca:	6560      	str	r0, [r4, #84]	; 0x54
 8006acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ace:	602e      	str	r6, [r5, #0]
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d0c5      	beq.n	8006a60 <__sflush_r+0x18>
 8006ad4:	0023      	movs	r3, r4
 8006ad6:	3344      	adds	r3, #68	; 0x44
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <__sflush_r+0x9a>
 8006adc:	0028      	movs	r0, r5
 8006ade:	f7ff f9cd 	bl	8005e7c <_free_r>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ae6:	e7bc      	b.n	8006a62 <__sflush_r+0x1a>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	0028      	movs	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d1c6      	bne.n	8006a80 <__sflush_r+0x38>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0c3      	beq.n	8006a80 <__sflush_r+0x38>
 8006af8:	2b1d      	cmp	r3, #29
 8006afa:	d001      	beq.n	8006b00 <__sflush_r+0xb8>
 8006afc:	2b16      	cmp	r3, #22
 8006afe:	d101      	bne.n	8006b04 <__sflush_r+0xbc>
 8006b00:	602e      	str	r6, [r5, #0]
 8006b02:	e7ad      	b.n	8006a60 <__sflush_r+0x18>
 8006b04:	89a2      	ldrh	r2, [r4, #12]
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	e7a9      	b.n	8006a62 <__sflush_r+0x1a>
 8006b0e:	690e      	ldr	r6, [r1, #16]
 8006b10:	2e00      	cmp	r6, #0
 8006b12:	d0a5      	beq.n	8006a60 <__sflush_r+0x18>
 8006b14:	680f      	ldr	r7, [r1, #0]
 8006b16:	600e      	str	r6, [r1, #0]
 8006b18:	1bba      	subs	r2, r7, r6
 8006b1a:	9201      	str	r2, [sp, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	079b      	lsls	r3, r3, #30
 8006b20:	d100      	bne.n	8006b24 <__sflush_r+0xdc>
 8006b22:	694a      	ldr	r2, [r1, #20]
 8006b24:	60a2      	str	r2, [r4, #8]
 8006b26:	9b01      	ldr	r3, [sp, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dd99      	ble.n	8006a60 <__sflush_r+0x18>
 8006b2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b2e:	0032      	movs	r2, r6
 8006b30:	001f      	movs	r7, r3
 8006b32:	0028      	movs	r0, r5
 8006b34:	9b01      	ldr	r3, [sp, #4]
 8006b36:	6a21      	ldr	r1, [r4, #32]
 8006b38:	47b8      	blx	r7
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	dc06      	bgt.n	8006b4c <__sflush_r+0x104>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	2001      	movs	r0, #1
 8006b42:	89a2      	ldrh	r2, [r4, #12]
 8006b44:	4240      	negs	r0, r0
 8006b46:	4313      	orrs	r3, r2
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e78a      	b.n	8006a62 <__sflush_r+0x1a>
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	1836      	adds	r6, r6, r0
 8006b50:	1a1b      	subs	r3, r3, r0
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	e7e7      	b.n	8006b26 <__sflush_r+0xde>
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	dfbffffe 	.word	0xdfbffffe

08006b5c <_fflush_r>:
 8006b5c:	690b      	ldr	r3, [r1, #16]
 8006b5e:	b570      	push	{r4, r5, r6, lr}
 8006b60:	0005      	movs	r5, r0
 8006b62:	000c      	movs	r4, r1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <_fflush_r+0x12>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	0028      	movs	r0, r5
 8006b6c:	bd70      	pop	{r4, r5, r6, pc}
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d004      	beq.n	8006b7c <_fflush_r+0x20>
 8006b72:	6a03      	ldr	r3, [r0, #32]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d101      	bne.n	8006b7c <_fflush_r+0x20>
 8006b78:	f7fe f9c0 	bl	8004efc <__sinit>
 8006b7c:	220c      	movs	r2, #12
 8006b7e:	5ea3      	ldrsh	r3, [r4, r2]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0f1      	beq.n	8006b68 <_fflush_r+0xc>
 8006b84:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b86:	07d2      	lsls	r2, r2, #31
 8006b88:	d404      	bmi.n	8006b94 <_fflush_r+0x38>
 8006b8a:	059b      	lsls	r3, r3, #22
 8006b8c:	d402      	bmi.n	8006b94 <_fflush_r+0x38>
 8006b8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b90:	f7fe fac9 	bl	8005126 <__retarget_lock_acquire_recursive>
 8006b94:	0028      	movs	r0, r5
 8006b96:	0021      	movs	r1, r4
 8006b98:	f7ff ff56 	bl	8006a48 <__sflush_r>
 8006b9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b9e:	0005      	movs	r5, r0
 8006ba0:	07db      	lsls	r3, r3, #31
 8006ba2:	d4e2      	bmi.n	8006b6a <_fflush_r+0xe>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	059b      	lsls	r3, r3, #22
 8006ba8:	d4df      	bmi.n	8006b6a <_fflush_r+0xe>
 8006baa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bac:	f7fe fabc 	bl	8005128 <__retarget_lock_release_recursive>
 8006bb0:	e7db      	b.n	8006b6a <_fflush_r+0xe>

08006bb2 <__swbuf_r>:
 8006bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb4:	0006      	movs	r6, r0
 8006bb6:	000d      	movs	r5, r1
 8006bb8:	0014      	movs	r4, r2
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d004      	beq.n	8006bc8 <__swbuf_r+0x16>
 8006bbe:	6a03      	ldr	r3, [r0, #32]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <__swbuf_r+0x16>
 8006bc4:	f7fe f99a 	bl	8004efc <__sinit>
 8006bc8:	69a3      	ldr	r3, [r4, #24]
 8006bca:	60a3      	str	r3, [r4, #8]
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	071b      	lsls	r3, r3, #28
 8006bd0:	d528      	bpl.n	8006c24 <__swbuf_r+0x72>
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d025      	beq.n	8006c24 <__swbuf_r+0x72>
 8006bd8:	6923      	ldr	r3, [r4, #16]
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	b2ef      	uxtb	r7, r5
 8006bde:	1ac0      	subs	r0, r0, r3
 8006be0:	6963      	ldr	r3, [r4, #20]
 8006be2:	b2ed      	uxtb	r5, r5
 8006be4:	4283      	cmp	r3, r0
 8006be6:	dc05      	bgt.n	8006bf4 <__swbuf_r+0x42>
 8006be8:	0021      	movs	r1, r4
 8006bea:	0030      	movs	r0, r6
 8006bec:	f7ff ffb6 	bl	8006b5c <_fflush_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d11d      	bne.n	8006c30 <__swbuf_r+0x7e>
 8006bf4:	68a3      	ldr	r3, [r4, #8]
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	60a3      	str	r3, [r4, #8]
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	6022      	str	r2, [r4, #0]
 8006c02:	701f      	strb	r7, [r3, #0]
 8006c04:	6963      	ldr	r3, [r4, #20]
 8006c06:	4283      	cmp	r3, r0
 8006c08:	d004      	beq.n	8006c14 <__swbuf_r+0x62>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	07db      	lsls	r3, r3, #31
 8006c0e:	d507      	bpl.n	8006c20 <__swbuf_r+0x6e>
 8006c10:	2d0a      	cmp	r5, #10
 8006c12:	d105      	bne.n	8006c20 <__swbuf_r+0x6e>
 8006c14:	0021      	movs	r1, r4
 8006c16:	0030      	movs	r0, r6
 8006c18:	f7ff ffa0 	bl	8006b5c <_fflush_r>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	d107      	bne.n	8006c30 <__swbuf_r+0x7e>
 8006c20:	0028      	movs	r0, r5
 8006c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c24:	0021      	movs	r1, r4
 8006c26:	0030      	movs	r0, r6
 8006c28:	f000 f806 	bl	8006c38 <__swsetup_r>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d0d3      	beq.n	8006bd8 <__swbuf_r+0x26>
 8006c30:	2501      	movs	r5, #1
 8006c32:	426d      	negs	r5, r5
 8006c34:	e7f4      	b.n	8006c20 <__swbuf_r+0x6e>
	...

08006c38 <__swsetup_r>:
 8006c38:	4b30      	ldr	r3, [pc, #192]	; (8006cfc <__swsetup_r+0xc4>)
 8006c3a:	b570      	push	{r4, r5, r6, lr}
 8006c3c:	0005      	movs	r5, r0
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	000c      	movs	r4, r1
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d004      	beq.n	8006c50 <__swsetup_r+0x18>
 8006c46:	6a03      	ldr	r3, [r0, #32]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <__swsetup_r+0x18>
 8006c4c:	f7fe f956 	bl	8004efc <__sinit>
 8006c50:	230c      	movs	r3, #12
 8006c52:	5ee2      	ldrsh	r2, [r4, r3]
 8006c54:	b293      	uxth	r3, r2
 8006c56:	0711      	lsls	r1, r2, #28
 8006c58:	d423      	bmi.n	8006ca2 <__swsetup_r+0x6a>
 8006c5a:	06d9      	lsls	r1, r3, #27
 8006c5c:	d407      	bmi.n	8006c6e <__swsetup_r+0x36>
 8006c5e:	2309      	movs	r3, #9
 8006c60:	2001      	movs	r0, #1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	3337      	adds	r3, #55	; 0x37
 8006c66:	4313      	orrs	r3, r2
 8006c68:	81a3      	strh	r3, [r4, #12]
 8006c6a:	4240      	negs	r0, r0
 8006c6c:	bd70      	pop	{r4, r5, r6, pc}
 8006c6e:	075b      	lsls	r3, r3, #29
 8006c70:	d513      	bpl.n	8006c9a <__swsetup_r+0x62>
 8006c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c74:	2900      	cmp	r1, #0
 8006c76:	d008      	beq.n	8006c8a <__swsetup_r+0x52>
 8006c78:	0023      	movs	r3, r4
 8006c7a:	3344      	adds	r3, #68	; 0x44
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d002      	beq.n	8006c86 <__swsetup_r+0x4e>
 8006c80:	0028      	movs	r0, r5
 8006c82:	f7ff f8fb 	bl	8005e7c <_free_r>
 8006c86:	2300      	movs	r3, #0
 8006c88:	6363      	str	r3, [r4, #52]	; 0x34
 8006c8a:	2224      	movs	r2, #36	; 0x24
 8006c8c:	89a3      	ldrh	r3, [r4, #12]
 8006c8e:	4393      	bics	r3, r2
 8006c90:	81a3      	strh	r3, [r4, #12]
 8006c92:	2300      	movs	r3, #0
 8006c94:	6063      	str	r3, [r4, #4]
 8006c96:	6923      	ldr	r3, [r4, #16]
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	89a2      	ldrh	r2, [r4, #12]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	81a3      	strh	r3, [r4, #12]
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <__swsetup_r+0x88>
 8006ca8:	21a0      	movs	r1, #160	; 0xa0
 8006caa:	2280      	movs	r2, #128	; 0x80
 8006cac:	89a3      	ldrh	r3, [r4, #12]
 8006cae:	0089      	lsls	r1, r1, #2
 8006cb0:	0092      	lsls	r2, r2, #2
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <__swsetup_r+0x88>
 8006cb8:	0021      	movs	r1, r4
 8006cba:	0028      	movs	r0, r5
 8006cbc:	f000 f8de 	bl	8006e7c <__smakebuf_r>
 8006cc0:	220c      	movs	r2, #12
 8006cc2:	5ea3      	ldrsh	r3, [r4, r2]
 8006cc4:	2001      	movs	r0, #1
 8006cc6:	001a      	movs	r2, r3
 8006cc8:	b299      	uxth	r1, r3
 8006cca:	4002      	ands	r2, r0
 8006ccc:	4203      	tst	r3, r0
 8006cce:	d00f      	beq.n	8006cf0 <__swsetup_r+0xb8>
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	60a2      	str	r2, [r4, #8]
 8006cd4:	6962      	ldr	r2, [r4, #20]
 8006cd6:	4252      	negs	r2, r2
 8006cd8:	61a2      	str	r2, [r4, #24]
 8006cda:	2000      	movs	r0, #0
 8006cdc:	6922      	ldr	r2, [r4, #16]
 8006cde:	4282      	cmp	r2, r0
 8006ce0:	d1c4      	bne.n	8006c6c <__swsetup_r+0x34>
 8006ce2:	0609      	lsls	r1, r1, #24
 8006ce4:	d5c2      	bpl.n	8006c6c <__swsetup_r+0x34>
 8006ce6:	2240      	movs	r2, #64	; 0x40
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	81a3      	strh	r3, [r4, #12]
 8006cec:	3801      	subs	r0, #1
 8006cee:	e7bd      	b.n	8006c6c <__swsetup_r+0x34>
 8006cf0:	0788      	lsls	r0, r1, #30
 8006cf2:	d400      	bmi.n	8006cf6 <__swsetup_r+0xbe>
 8006cf4:	6962      	ldr	r2, [r4, #20]
 8006cf6:	60a2      	str	r2, [r4, #8]
 8006cf8:	e7ef      	b.n	8006cda <__swsetup_r+0xa2>
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	20000074 	.word	0x20000074

08006d00 <_sbrk_r>:
 8006d00:	2300      	movs	r3, #0
 8006d02:	b570      	push	{r4, r5, r6, lr}
 8006d04:	4d06      	ldr	r5, [pc, #24]	; (8006d20 <_sbrk_r+0x20>)
 8006d06:	0004      	movs	r4, r0
 8006d08:	0008      	movs	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fc f832 	bl	8002d74 <_sbrk>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d103      	bne.n	8006d1c <_sbrk_r+0x1c>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d000      	beq.n	8006d1c <_sbrk_r+0x1c>
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	200003c0 	.word	0x200003c0

08006d24 <memcpy>:
 8006d24:	2300      	movs	r3, #0
 8006d26:	b510      	push	{r4, lr}
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d100      	bne.n	8006d2e <memcpy+0xa>
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	5ccc      	ldrb	r4, [r1, r3]
 8006d30:	54c4      	strb	r4, [r0, r3]
 8006d32:	3301      	adds	r3, #1
 8006d34:	e7f8      	b.n	8006d28 <memcpy+0x4>
	...

08006d38 <__assert_func>:
 8006d38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d3a:	0014      	movs	r4, r2
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <__assert_func+0x2c>)
 8006d40:	0005      	movs	r5, r0
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	000e      	movs	r6, r1
 8006d46:	68d8      	ldr	r0, [r3, #12]
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <__assert_func+0x30>)
 8006d4a:	2c00      	cmp	r4, #0
 8006d4c:	d101      	bne.n	8006d52 <__assert_func+0x1a>
 8006d4e:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <__assert_func+0x34>)
 8006d50:	001c      	movs	r4, r3
 8006d52:	4907      	ldr	r1, [pc, #28]	; (8006d70 <__assert_func+0x38>)
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	9402      	str	r4, [sp, #8]
 8006d58:	002b      	movs	r3, r5
 8006d5a:	9600      	str	r6, [sp, #0]
 8006d5c:	f000 f856 	bl	8006e0c <fiprintf>
 8006d60:	f000 f8ee 	bl	8006f40 <abort>
 8006d64:	20000074 	.word	0x20000074
 8006d68:	080072af 	.word	0x080072af
 8006d6c:	080072ea 	.word	0x080072ea
 8006d70:	080072bc 	.word	0x080072bc

08006d74 <_calloc_r>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	0c0b      	lsrs	r3, r1, #16
 8006d78:	0c15      	lsrs	r5, r2, #16
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d11e      	bne.n	8006dbc <_calloc_r+0x48>
 8006d7e:	2d00      	cmp	r5, #0
 8006d80:	d10c      	bne.n	8006d9c <_calloc_r+0x28>
 8006d82:	b289      	uxth	r1, r1
 8006d84:	b294      	uxth	r4, r2
 8006d86:	434c      	muls	r4, r1
 8006d88:	0021      	movs	r1, r4
 8006d8a:	f7ff f8ed 	bl	8005f68 <_malloc_r>
 8006d8e:	1e05      	subs	r5, r0, #0
 8006d90:	d01b      	beq.n	8006dca <_calloc_r+0x56>
 8006d92:	0022      	movs	r2, r4
 8006d94:	2100      	movs	r1, #0
 8006d96:	f7fe f941 	bl	800501c <memset>
 8006d9a:	e016      	b.n	8006dca <_calloc_r+0x56>
 8006d9c:	1c2b      	adds	r3, r5, #0
 8006d9e:	1c0c      	adds	r4, r1, #0
 8006da0:	b289      	uxth	r1, r1
 8006da2:	b292      	uxth	r2, r2
 8006da4:	434a      	muls	r2, r1
 8006da6:	b2a1      	uxth	r1, r4
 8006da8:	b29c      	uxth	r4, r3
 8006daa:	434c      	muls	r4, r1
 8006dac:	0c13      	lsrs	r3, r2, #16
 8006dae:	18e4      	adds	r4, r4, r3
 8006db0:	0c23      	lsrs	r3, r4, #16
 8006db2:	d107      	bne.n	8006dc4 <_calloc_r+0x50>
 8006db4:	0424      	lsls	r4, r4, #16
 8006db6:	b292      	uxth	r2, r2
 8006db8:	4314      	orrs	r4, r2
 8006dba:	e7e5      	b.n	8006d88 <_calloc_r+0x14>
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	d101      	bne.n	8006dc4 <_calloc_r+0x50>
 8006dc0:	1c14      	adds	r4, r2, #0
 8006dc2:	e7ed      	b.n	8006da0 <_calloc_r+0x2c>
 8006dc4:	230c      	movs	r3, #12
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	6003      	str	r3, [r0, #0]
 8006dca:	0028      	movs	r0, r5
 8006dcc:	bd70      	pop	{r4, r5, r6, pc}

08006dce <__ascii_mbtowc>:
 8006dce:	b082      	sub	sp, #8
 8006dd0:	2900      	cmp	r1, #0
 8006dd2:	d100      	bne.n	8006dd6 <__ascii_mbtowc+0x8>
 8006dd4:	a901      	add	r1, sp, #4
 8006dd6:	1e10      	subs	r0, r2, #0
 8006dd8:	d006      	beq.n	8006de8 <__ascii_mbtowc+0x1a>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d006      	beq.n	8006dec <__ascii_mbtowc+0x1e>
 8006dde:	7813      	ldrb	r3, [r2, #0]
 8006de0:	600b      	str	r3, [r1, #0]
 8006de2:	7810      	ldrb	r0, [r2, #0]
 8006de4:	1e43      	subs	r3, r0, #1
 8006de6:	4198      	sbcs	r0, r3
 8006de8:	b002      	add	sp, #8
 8006dea:	4770      	bx	lr
 8006dec:	2002      	movs	r0, #2
 8006dee:	4240      	negs	r0, r0
 8006df0:	e7fa      	b.n	8006de8 <__ascii_mbtowc+0x1a>

08006df2 <__ascii_wctomb>:
 8006df2:	0003      	movs	r3, r0
 8006df4:	1e08      	subs	r0, r1, #0
 8006df6:	d005      	beq.n	8006e04 <__ascii_wctomb+0x12>
 8006df8:	2aff      	cmp	r2, #255	; 0xff
 8006dfa:	d904      	bls.n	8006e06 <__ascii_wctomb+0x14>
 8006dfc:	228a      	movs	r2, #138	; 0x8a
 8006dfe:	2001      	movs	r0, #1
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	4240      	negs	r0, r0
 8006e04:	4770      	bx	lr
 8006e06:	2001      	movs	r0, #1
 8006e08:	700a      	strb	r2, [r1, #0]
 8006e0a:	e7fb      	b.n	8006e04 <__ascii_wctomb+0x12>

08006e0c <fiprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b517      	push	{r0, r1, r2, r4, lr}
 8006e10:	4c05      	ldr	r4, [pc, #20]	; (8006e28 <fiprintf+0x1c>)
 8006e12:	ab05      	add	r3, sp, #20
 8006e14:	cb04      	ldmia	r3!, {r2}
 8006e16:	0001      	movs	r1, r0
 8006e18:	6820      	ldr	r0, [r4, #0]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	f7ff fcf8 	bl	8006810 <_vfiprintf_r>
 8006e20:	bc1e      	pop	{r1, r2, r3, r4}
 8006e22:	bc08      	pop	{r3}
 8006e24:	b003      	add	sp, #12
 8006e26:	4718      	bx	r3
 8006e28:	20000074 	.word	0x20000074

08006e2c <__swhatbuf_r>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	000e      	movs	r6, r1
 8006e30:	001d      	movs	r5, r3
 8006e32:	230e      	movs	r3, #14
 8006e34:	5ec9      	ldrsh	r1, [r1, r3]
 8006e36:	0014      	movs	r4, r2
 8006e38:	b096      	sub	sp, #88	; 0x58
 8006e3a:	2900      	cmp	r1, #0
 8006e3c:	da0c      	bge.n	8006e58 <__swhatbuf_r+0x2c>
 8006e3e:	89b2      	ldrh	r2, [r6, #12]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	0011      	movs	r1, r2
 8006e44:	4019      	ands	r1, r3
 8006e46:	421a      	tst	r2, r3
 8006e48:	d013      	beq.n	8006e72 <__swhatbuf_r+0x46>
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	3b40      	subs	r3, #64	; 0x40
 8006e4e:	2000      	movs	r0, #0
 8006e50:	6029      	str	r1, [r5, #0]
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	b016      	add	sp, #88	; 0x58
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	466a      	mov	r2, sp
 8006e5a:	f000 f84d 	bl	8006ef8 <_fstat_r>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	dbed      	blt.n	8006e3e <__swhatbuf_r+0x12>
 8006e62:	23f0      	movs	r3, #240	; 0xf0
 8006e64:	9901      	ldr	r1, [sp, #4]
 8006e66:	021b      	lsls	r3, r3, #8
 8006e68:	4019      	ands	r1, r3
 8006e6a:	4b03      	ldr	r3, [pc, #12]	; (8006e78 <__swhatbuf_r+0x4c>)
 8006e6c:	18c9      	adds	r1, r1, r3
 8006e6e:	424b      	negs	r3, r1
 8006e70:	4159      	adcs	r1, r3
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	e7ea      	b.n	8006e4e <__swhatbuf_r+0x22>
 8006e78:	ffffe000 	.word	0xffffe000

08006e7c <__smakebuf_r>:
 8006e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7e:	2602      	movs	r6, #2
 8006e80:	898b      	ldrh	r3, [r1, #12]
 8006e82:	0005      	movs	r5, r0
 8006e84:	000c      	movs	r4, r1
 8006e86:	4233      	tst	r3, r6
 8006e88:	d006      	beq.n	8006e98 <__smakebuf_r+0x1c>
 8006e8a:	0023      	movs	r3, r4
 8006e8c:	3347      	adds	r3, #71	; 0x47
 8006e8e:	6023      	str	r3, [r4, #0]
 8006e90:	6123      	str	r3, [r4, #16]
 8006e92:	2301      	movs	r3, #1
 8006e94:	6163      	str	r3, [r4, #20]
 8006e96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006e98:	466a      	mov	r2, sp
 8006e9a:	ab01      	add	r3, sp, #4
 8006e9c:	f7ff ffc6 	bl	8006e2c <__swhatbuf_r>
 8006ea0:	9900      	ldr	r1, [sp, #0]
 8006ea2:	0007      	movs	r7, r0
 8006ea4:	0028      	movs	r0, r5
 8006ea6:	f7ff f85f 	bl	8005f68 <_malloc_r>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d108      	bne.n	8006ec0 <__smakebuf_r+0x44>
 8006eae:	220c      	movs	r2, #12
 8006eb0:	5ea3      	ldrsh	r3, [r4, r2]
 8006eb2:	059a      	lsls	r2, r3, #22
 8006eb4:	d4ef      	bmi.n	8006e96 <__smakebuf_r+0x1a>
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	4393      	bics	r3, r2
 8006eba:	431e      	orrs	r6, r3
 8006ebc:	81a6      	strh	r6, [r4, #12]
 8006ebe:	e7e4      	b.n	8006e8a <__smakebuf_r+0xe>
 8006ec0:	2380      	movs	r3, #128	; 0x80
 8006ec2:	89a2      	ldrh	r2, [r4, #12]
 8006ec4:	6020      	str	r0, [r4, #0]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	9b00      	ldr	r3, [sp, #0]
 8006ecc:	6120      	str	r0, [r4, #16]
 8006ece:	6163      	str	r3, [r4, #20]
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00c      	beq.n	8006ef0 <__smakebuf_r+0x74>
 8006ed6:	0028      	movs	r0, r5
 8006ed8:	230e      	movs	r3, #14
 8006eda:	5ee1      	ldrsh	r1, [r4, r3]
 8006edc:	f000 f81e 	bl	8006f1c <_isatty_r>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d005      	beq.n	8006ef0 <__smakebuf_r+0x74>
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	89a2      	ldrh	r2, [r4, #12]
 8006ee8:	439a      	bics	r2, r3
 8006eea:	3b02      	subs	r3, #2
 8006eec:	4313      	orrs	r3, r2
 8006eee:	81a3      	strh	r3, [r4, #12]
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	433b      	orrs	r3, r7
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	e7ce      	b.n	8006e96 <__smakebuf_r+0x1a>

08006ef8 <_fstat_r>:
 8006ef8:	2300      	movs	r3, #0
 8006efa:	b570      	push	{r4, r5, r6, lr}
 8006efc:	4d06      	ldr	r5, [pc, #24]	; (8006f18 <_fstat_r+0x20>)
 8006efe:	0004      	movs	r4, r0
 8006f00:	0008      	movs	r0, r1
 8006f02:	0011      	movs	r1, r2
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f7fb ff12 	bl	8002d2e <_fstat>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d103      	bne.n	8006f16 <_fstat_r+0x1e>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d000      	beq.n	8006f16 <_fstat_r+0x1e>
 8006f14:	6023      	str	r3, [r4, #0]
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	200003c0 	.word	0x200003c0

08006f1c <_isatty_r>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b570      	push	{r4, r5, r6, lr}
 8006f20:	4d06      	ldr	r5, [pc, #24]	; (8006f3c <_isatty_r+0x20>)
 8006f22:	0004      	movs	r4, r0
 8006f24:	0008      	movs	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fb ff0f 	bl	8002d4a <_isatty>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d103      	bne.n	8006f38 <_isatty_r+0x1c>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d000      	beq.n	8006f38 <_isatty_r+0x1c>
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	200003c0 	.word	0x200003c0

08006f40 <abort>:
 8006f40:	2006      	movs	r0, #6
 8006f42:	b510      	push	{r4, lr}
 8006f44:	f000 f82e 	bl	8006fa4 <raise>
 8006f48:	2001      	movs	r0, #1
 8006f4a:	f7fb fea1 	bl	8002c90 <_exit>

08006f4e <_raise_r>:
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	0004      	movs	r4, r0
 8006f52:	000d      	movs	r5, r1
 8006f54:	291f      	cmp	r1, #31
 8006f56:	d904      	bls.n	8006f62 <_raise_r+0x14>
 8006f58:	2316      	movs	r3, #22
 8006f5a:	6003      	str	r3, [r0, #0]
 8006f5c:	2001      	movs	r0, #1
 8006f5e:	4240      	negs	r0, r0
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
 8006f62:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <_raise_r+0x24>
 8006f68:	008a      	lsls	r2, r1, #2
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	d108      	bne.n	8006f84 <_raise_r+0x36>
 8006f72:	0020      	movs	r0, r4
 8006f74:	f000 f832 	bl	8006fdc <_getpid_r>
 8006f78:	002a      	movs	r2, r5
 8006f7a:	0001      	movs	r1, r0
 8006f7c:	0020      	movs	r0, r4
 8006f7e:	f000 f81b 	bl	8006fb8 <_kill_r>
 8006f82:	e7ed      	b.n	8006f60 <_raise_r+0x12>
 8006f84:	2000      	movs	r0, #0
 8006f86:	2a01      	cmp	r2, #1
 8006f88:	d0ea      	beq.n	8006f60 <_raise_r+0x12>
 8006f8a:	1c51      	adds	r1, r2, #1
 8006f8c:	d103      	bne.n	8006f96 <_raise_r+0x48>
 8006f8e:	2316      	movs	r3, #22
 8006f90:	3001      	adds	r0, #1
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	e7e4      	b.n	8006f60 <_raise_r+0x12>
 8006f96:	2400      	movs	r4, #0
 8006f98:	0028      	movs	r0, r5
 8006f9a:	601c      	str	r4, [r3, #0]
 8006f9c:	4790      	blx	r2
 8006f9e:	0020      	movs	r0, r4
 8006fa0:	e7de      	b.n	8006f60 <_raise_r+0x12>
	...

08006fa4 <raise>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <raise+0x10>)
 8006fa8:	0001      	movs	r1, r0
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	f7ff ffcf 	bl	8006f4e <_raise_r>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	20000074 	.word	0x20000074

08006fb8 <_kill_r>:
 8006fb8:	2300      	movs	r3, #0
 8006fba:	b570      	push	{r4, r5, r6, lr}
 8006fbc:	4d06      	ldr	r5, [pc, #24]	; (8006fd8 <_kill_r+0x20>)
 8006fbe:	0004      	movs	r4, r0
 8006fc0:	0008      	movs	r0, r1
 8006fc2:	0011      	movs	r1, r2
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	f7fb fe53 	bl	8002c70 <_kill>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d103      	bne.n	8006fd6 <_kill_r+0x1e>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d000      	beq.n	8006fd6 <_kill_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}
 8006fd8:	200003c0 	.word	0x200003c0

08006fdc <_getpid_r>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	f7fb fe41 	bl	8002c64 <_getpid>
 8006fe2:	bd10      	pop	{r4, pc}

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
