
smart_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  08007688  08007688  00017688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a74  08007a74  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007a74  08007a74  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a74  08007a74  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  200001e8  08007c60  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08007c60  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000712b  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e97  00000000  00000000  0002737a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  00029218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000652  00000000  00000000  00029aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010e4f  00000000  00000000  0002a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4b5  00000000  00000000  0003af41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005dc9c  00000000  00000000  000453f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ca4  00000000  00000000  000a3094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000a5d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007670 	.word	0x08007670

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08007670 	.word	0x08007670

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff29 	bl	8001294 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fe79 	bl	8001144 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff1b 	bl	8001294 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff11 	bl	8001294 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fea1 	bl	80011c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fe97 	bl	80011c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	464f      	mov	r7, r9
 80004ac:	4646      	mov	r6, r8
 80004ae:	46d6      	mov	lr, sl
 80004b0:	0004      	movs	r4, r0
 80004b2:	b5c0      	push	{r6, r7, lr}
 80004b4:	001f      	movs	r7, r3
 80004b6:	030b      	lsls	r3, r1, #12
 80004b8:	0010      	movs	r0, r2
 80004ba:	004e      	lsls	r6, r1, #1
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	0fcd      	lsrs	r5, r1, #31
 80004c0:	0f61      	lsrs	r1, r4, #29
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	4319      	orrs	r1, r3
 80004c6:	00e3      	lsls	r3, r4, #3
 80004c8:	033c      	lsls	r4, r7, #12
 80004ca:	0fff      	lsrs	r7, r7, #31
 80004cc:	46bc      	mov	ip, r7
 80004ce:	0a64      	lsrs	r4, r4, #9
 80004d0:	0f47      	lsrs	r7, r0, #29
 80004d2:	4327      	orrs	r7, r4
 80004d4:	0d76      	lsrs	r6, r6, #21
 80004d6:	0d52      	lsrs	r2, r2, #21
 80004d8:	00c0      	lsls	r0, r0, #3
 80004da:	46b9      	mov	r9, r7
 80004dc:	4680      	mov	r8, r0
 80004de:	1ab7      	subs	r7, r6, r2
 80004e0:	4565      	cmp	r5, ip
 80004e2:	d100      	bne.n	80004e6 <__aeabi_dadd+0x3e>
 80004e4:	e09b      	b.n	800061e <__aeabi_dadd+0x176>
 80004e6:	2f00      	cmp	r7, #0
 80004e8:	dc00      	bgt.n	80004ec <__aeabi_dadd+0x44>
 80004ea:	e084      	b.n	80005f6 <__aeabi_dadd+0x14e>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_dadd+0x4a>
 80004f0:	e0be      	b.n	8000670 <__aeabi_dadd+0x1c8>
 80004f2:	4ac8      	ldr	r2, [pc, #800]	; (8000814 <__aeabi_dadd+0x36c>)
 80004f4:	4296      	cmp	r6, r2
 80004f6:	d100      	bne.n	80004fa <__aeabi_dadd+0x52>
 80004f8:	e124      	b.n	8000744 <__aeabi_dadd+0x29c>
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	464c      	mov	r4, r9
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	4314      	orrs	r4, r2
 8000502:	46a1      	mov	r9, r4
 8000504:	2f38      	cmp	r7, #56	; 0x38
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0x62>
 8000508:	e167      	b.n	80007da <__aeabi_dadd+0x332>
 800050a:	2f1f      	cmp	r7, #31
 800050c:	dd00      	ble.n	8000510 <__aeabi_dadd+0x68>
 800050e:	e1d6      	b.n	80008be <__aeabi_dadd+0x416>
 8000510:	2220      	movs	r2, #32
 8000512:	464c      	mov	r4, r9
 8000514:	1bd2      	subs	r2, r2, r7
 8000516:	4094      	lsls	r4, r2
 8000518:	46a2      	mov	sl, r4
 800051a:	4644      	mov	r4, r8
 800051c:	40fc      	lsrs	r4, r7
 800051e:	0020      	movs	r0, r4
 8000520:	4654      	mov	r4, sl
 8000522:	4304      	orrs	r4, r0
 8000524:	4640      	mov	r0, r8
 8000526:	4090      	lsls	r0, r2
 8000528:	1e42      	subs	r2, r0, #1
 800052a:	4190      	sbcs	r0, r2
 800052c:	464a      	mov	r2, r9
 800052e:	40fa      	lsrs	r2, r7
 8000530:	4304      	orrs	r4, r0
 8000532:	1a89      	subs	r1, r1, r2
 8000534:	1b1c      	subs	r4, r3, r4
 8000536:	42a3      	cmp	r3, r4
 8000538:	4192      	sbcs	r2, r2
 800053a:	4252      	negs	r2, r2
 800053c:	1a8b      	subs	r3, r1, r2
 800053e:	469a      	mov	sl, r3
 8000540:	4653      	mov	r3, sl
 8000542:	021b      	lsls	r3, r3, #8
 8000544:	d400      	bmi.n	8000548 <__aeabi_dadd+0xa0>
 8000546:	e0d4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000548:	4653      	mov	r3, sl
 800054a:	025a      	lsls	r2, r3, #9
 800054c:	0a53      	lsrs	r3, r2, #9
 800054e:	469a      	mov	sl, r3
 8000550:	4653      	mov	r3, sl
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <__aeabi_dadd+0xb0>
 8000556:	e104      	b.n	8000762 <__aeabi_dadd+0x2ba>
 8000558:	4650      	mov	r0, sl
 800055a:	f001 fded 	bl	8002138 <__clzsi2>
 800055e:	0003      	movs	r3, r0
 8000560:	3b08      	subs	r3, #8
 8000562:	2220      	movs	r2, #32
 8000564:	0020      	movs	r0, r4
 8000566:	1ad2      	subs	r2, r2, r3
 8000568:	4651      	mov	r1, sl
 800056a:	40d0      	lsrs	r0, r2
 800056c:	4099      	lsls	r1, r3
 800056e:	0002      	movs	r2, r0
 8000570:	409c      	lsls	r4, r3
 8000572:	430a      	orrs	r2, r1
 8000574:	42b3      	cmp	r3, r6
 8000576:	da00      	bge.n	800057a <__aeabi_dadd+0xd2>
 8000578:	e102      	b.n	8000780 <__aeabi_dadd+0x2d8>
 800057a:	1b9b      	subs	r3, r3, r6
 800057c:	1c59      	adds	r1, r3, #1
 800057e:	291f      	cmp	r1, #31
 8000580:	dd00      	ble.n	8000584 <__aeabi_dadd+0xdc>
 8000582:	e0a7      	b.n	80006d4 <__aeabi_dadd+0x22c>
 8000584:	2320      	movs	r3, #32
 8000586:	0010      	movs	r0, r2
 8000588:	0026      	movs	r6, r4
 800058a:	1a5b      	subs	r3, r3, r1
 800058c:	409c      	lsls	r4, r3
 800058e:	4098      	lsls	r0, r3
 8000590:	40ce      	lsrs	r6, r1
 8000592:	40ca      	lsrs	r2, r1
 8000594:	1e63      	subs	r3, r4, #1
 8000596:	419c      	sbcs	r4, r3
 8000598:	4330      	orrs	r0, r6
 800059a:	4692      	mov	sl, r2
 800059c:	2600      	movs	r6, #0
 800059e:	4304      	orrs	r4, r0
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d009      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d005      	beq.n	80005b8 <__aeabi_dadd+0x110>
 80005ac:	1d23      	adds	r3, r4, #4
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	41a4      	sbcs	r4, r4
 80005b2:	4264      	negs	r4, r4
 80005b4:	44a2      	add	sl, r4
 80005b6:	001c      	movs	r4, r3
 80005b8:	4653      	mov	r3, sl
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	d400      	bmi.n	80005c0 <__aeabi_dadd+0x118>
 80005be:	e09b      	b.n	80006f8 <__aeabi_dadd+0x250>
 80005c0:	4b94      	ldr	r3, [pc, #592]	; (8000814 <__aeabi_dadd+0x36c>)
 80005c2:	3601      	adds	r6, #1
 80005c4:	429e      	cmp	r6, r3
 80005c6:	d100      	bne.n	80005ca <__aeabi_dadd+0x122>
 80005c8:	e0b8      	b.n	800073c <__aeabi_dadd+0x294>
 80005ca:	4653      	mov	r3, sl
 80005cc:	4992      	ldr	r1, [pc, #584]	; (8000818 <__aeabi_dadd+0x370>)
 80005ce:	08e4      	lsrs	r4, r4, #3
 80005d0:	400b      	ands	r3, r1
 80005d2:	0019      	movs	r1, r3
 80005d4:	075b      	lsls	r3, r3, #29
 80005d6:	4323      	orrs	r3, r4
 80005d8:	0572      	lsls	r2, r6, #21
 80005da:	024c      	lsls	r4, r1, #9
 80005dc:	0b24      	lsrs	r4, r4, #12
 80005de:	0d52      	lsrs	r2, r2, #21
 80005e0:	0512      	lsls	r2, r2, #20
 80005e2:	07ed      	lsls	r5, r5, #31
 80005e4:	4322      	orrs	r2, r4
 80005e6:	432a      	orrs	r2, r5
 80005e8:	0018      	movs	r0, r3
 80005ea:	0011      	movs	r1, r2
 80005ec:	bce0      	pop	{r5, r6, r7}
 80005ee:	46ba      	mov	sl, r7
 80005f0:	46b1      	mov	r9, r6
 80005f2:	46a8      	mov	r8, r5
 80005f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	d048      	beq.n	800068c <__aeabi_dadd+0x1e4>
 80005fa:	1b97      	subs	r7, r2, r6
 80005fc:	2e00      	cmp	r6, #0
 80005fe:	d000      	beq.n	8000602 <__aeabi_dadd+0x15a>
 8000600:	e10e      	b.n	8000820 <__aeabi_dadd+0x378>
 8000602:	000c      	movs	r4, r1
 8000604:	431c      	orrs	r4, r3
 8000606:	d100      	bne.n	800060a <__aeabi_dadd+0x162>
 8000608:	e1b7      	b.n	800097a <__aeabi_dadd+0x4d2>
 800060a:	1e7c      	subs	r4, r7, #1
 800060c:	2f01      	cmp	r7, #1
 800060e:	d100      	bne.n	8000612 <__aeabi_dadd+0x16a>
 8000610:	e226      	b.n	8000a60 <__aeabi_dadd+0x5b8>
 8000612:	4d80      	ldr	r5, [pc, #512]	; (8000814 <__aeabi_dadd+0x36c>)
 8000614:	42af      	cmp	r7, r5
 8000616:	d100      	bne.n	800061a <__aeabi_dadd+0x172>
 8000618:	e1d5      	b.n	80009c6 <__aeabi_dadd+0x51e>
 800061a:	0027      	movs	r7, r4
 800061c:	e107      	b.n	800082e <__aeabi_dadd+0x386>
 800061e:	2f00      	cmp	r7, #0
 8000620:	dc00      	bgt.n	8000624 <__aeabi_dadd+0x17c>
 8000622:	e0b2      	b.n	800078a <__aeabi_dadd+0x2e2>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d047      	beq.n	80006b8 <__aeabi_dadd+0x210>
 8000628:	4a7a      	ldr	r2, [pc, #488]	; (8000814 <__aeabi_dadd+0x36c>)
 800062a:	4296      	cmp	r6, r2
 800062c:	d100      	bne.n	8000630 <__aeabi_dadd+0x188>
 800062e:	e089      	b.n	8000744 <__aeabi_dadd+0x29c>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	464c      	mov	r4, r9
 8000634:	0412      	lsls	r2, r2, #16
 8000636:	4314      	orrs	r4, r2
 8000638:	46a1      	mov	r9, r4
 800063a:	2f38      	cmp	r7, #56	; 0x38
 800063c:	dc6b      	bgt.n	8000716 <__aeabi_dadd+0x26e>
 800063e:	2f1f      	cmp	r7, #31
 8000640:	dc00      	bgt.n	8000644 <__aeabi_dadd+0x19c>
 8000642:	e16e      	b.n	8000922 <__aeabi_dadd+0x47a>
 8000644:	003a      	movs	r2, r7
 8000646:	4648      	mov	r0, r9
 8000648:	3a20      	subs	r2, #32
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4684      	mov	ip, r0
 800064e:	2f20      	cmp	r7, #32
 8000650:	d007      	beq.n	8000662 <__aeabi_dadd+0x1ba>
 8000652:	2240      	movs	r2, #64	; 0x40
 8000654:	4648      	mov	r0, r9
 8000656:	1bd2      	subs	r2, r2, r7
 8000658:	4090      	lsls	r0, r2
 800065a:	0002      	movs	r2, r0
 800065c:	4640      	mov	r0, r8
 800065e:	4310      	orrs	r0, r2
 8000660:	4680      	mov	r8, r0
 8000662:	4640      	mov	r0, r8
 8000664:	1e42      	subs	r2, r0, #1
 8000666:	4190      	sbcs	r0, r2
 8000668:	4662      	mov	r2, ip
 800066a:	0004      	movs	r4, r0
 800066c:	4314      	orrs	r4, r2
 800066e:	e057      	b.n	8000720 <__aeabi_dadd+0x278>
 8000670:	464a      	mov	r2, r9
 8000672:	4302      	orrs	r2, r0
 8000674:	d100      	bne.n	8000678 <__aeabi_dadd+0x1d0>
 8000676:	e103      	b.n	8000880 <__aeabi_dadd+0x3d8>
 8000678:	1e7a      	subs	r2, r7, #1
 800067a:	2f01      	cmp	r7, #1
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x1d8>
 800067e:	e193      	b.n	80009a8 <__aeabi_dadd+0x500>
 8000680:	4c64      	ldr	r4, [pc, #400]	; (8000814 <__aeabi_dadd+0x36c>)
 8000682:	42a7      	cmp	r7, r4
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x1e0>
 8000686:	e18a      	b.n	800099e <__aeabi_dadd+0x4f6>
 8000688:	0017      	movs	r7, r2
 800068a:	e73b      	b.n	8000504 <__aeabi_dadd+0x5c>
 800068c:	4c63      	ldr	r4, [pc, #396]	; (800081c <__aeabi_dadd+0x374>)
 800068e:	1c72      	adds	r2, r6, #1
 8000690:	4222      	tst	r2, r4
 8000692:	d000      	beq.n	8000696 <__aeabi_dadd+0x1ee>
 8000694:	e0e0      	b.n	8000858 <__aeabi_dadd+0x3b0>
 8000696:	000a      	movs	r2, r1
 8000698:	431a      	orrs	r2, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_dadd+0x1f8>
 800069e:	e174      	b.n	800098a <__aeabi_dadd+0x4e2>
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x1fe>
 80006a4:	e1d0      	b.n	8000a48 <__aeabi_dadd+0x5a0>
 80006a6:	464a      	mov	r2, r9
 80006a8:	4302      	orrs	r2, r0
 80006aa:	d000      	beq.n	80006ae <__aeabi_dadd+0x206>
 80006ac:	e1e3      	b.n	8000a76 <__aeabi_dadd+0x5ce>
 80006ae:	074a      	lsls	r2, r1, #29
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	08c9      	lsrs	r1, r1, #3
 80006b6:	e029      	b.n	800070c <__aeabi_dadd+0x264>
 80006b8:	464a      	mov	r2, r9
 80006ba:	4302      	orrs	r2, r0
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x218>
 80006be:	e17d      	b.n	80009bc <__aeabi_dadd+0x514>
 80006c0:	1e7a      	subs	r2, r7, #1
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	d100      	bne.n	80006c8 <__aeabi_dadd+0x220>
 80006c6:	e0e0      	b.n	800088a <__aeabi_dadd+0x3e2>
 80006c8:	4c52      	ldr	r4, [pc, #328]	; (8000814 <__aeabi_dadd+0x36c>)
 80006ca:	42a7      	cmp	r7, r4
 80006cc:	d100      	bne.n	80006d0 <__aeabi_dadd+0x228>
 80006ce:	e166      	b.n	800099e <__aeabi_dadd+0x4f6>
 80006d0:	0017      	movs	r7, r2
 80006d2:	e7b2      	b.n	800063a <__aeabi_dadd+0x192>
 80006d4:	0010      	movs	r0, r2
 80006d6:	3b1f      	subs	r3, #31
 80006d8:	40d8      	lsrs	r0, r3
 80006da:	2920      	cmp	r1, #32
 80006dc:	d003      	beq.n	80006e6 <__aeabi_dadd+0x23e>
 80006de:	2340      	movs	r3, #64	; 0x40
 80006e0:	1a5b      	subs	r3, r3, r1
 80006e2:	409a      	lsls	r2, r3
 80006e4:	4314      	orrs	r4, r2
 80006e6:	1e63      	subs	r3, r4, #1
 80006e8:	419c      	sbcs	r4, r3
 80006ea:	2300      	movs	r3, #0
 80006ec:	2600      	movs	r6, #0
 80006ee:	469a      	mov	sl, r3
 80006f0:	4304      	orrs	r4, r0
 80006f2:	0763      	lsls	r3, r4, #29
 80006f4:	d000      	beq.n	80006f8 <__aeabi_dadd+0x250>
 80006f6:	e755      	b.n	80005a4 <__aeabi_dadd+0xfc>
 80006f8:	4652      	mov	r2, sl
 80006fa:	08e3      	lsrs	r3, r4, #3
 80006fc:	0752      	lsls	r2, r2, #29
 80006fe:	4313      	orrs	r3, r2
 8000700:	4652      	mov	r2, sl
 8000702:	0037      	movs	r7, r6
 8000704:	08d1      	lsrs	r1, r2, #3
 8000706:	4a43      	ldr	r2, [pc, #268]	; (8000814 <__aeabi_dadd+0x36c>)
 8000708:	4297      	cmp	r7, r2
 800070a:	d01f      	beq.n	800074c <__aeabi_dadd+0x2a4>
 800070c:	0309      	lsls	r1, r1, #12
 800070e:	057a      	lsls	r2, r7, #21
 8000710:	0b0c      	lsrs	r4, r1, #12
 8000712:	0d52      	lsrs	r2, r2, #21
 8000714:	e764      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000716:	4642      	mov	r2, r8
 8000718:	464c      	mov	r4, r9
 800071a:	4314      	orrs	r4, r2
 800071c:	1e62      	subs	r2, r4, #1
 800071e:	4194      	sbcs	r4, r2
 8000720:	18e4      	adds	r4, r4, r3
 8000722:	429c      	cmp	r4, r3
 8000724:	4192      	sbcs	r2, r2
 8000726:	4252      	negs	r2, r2
 8000728:	4692      	mov	sl, r2
 800072a:	448a      	add	sl, r1
 800072c:	4653      	mov	r3, sl
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	d5df      	bpl.n	80006f2 <__aeabi_dadd+0x24a>
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <__aeabi_dadd+0x36c>)
 8000734:	3601      	adds	r6, #1
 8000736:	429e      	cmp	r6, r3
 8000738:	d000      	beq.n	800073c <__aeabi_dadd+0x294>
 800073a:	e0b3      	b.n	80008a4 <__aeabi_dadd+0x3fc>
 800073c:	0032      	movs	r2, r6
 800073e:	2400      	movs	r4, #0
 8000740:	2300      	movs	r3, #0
 8000742:	e74d      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000744:	074a      	lsls	r2, r1, #29
 8000746:	08db      	lsrs	r3, r3, #3
 8000748:	4313      	orrs	r3, r2
 800074a:	08c9      	lsrs	r1, r1, #3
 800074c:	001a      	movs	r2, r3
 800074e:	430a      	orrs	r2, r1
 8000750:	d100      	bne.n	8000754 <__aeabi_dadd+0x2ac>
 8000752:	e200      	b.n	8000b56 <__aeabi_dadd+0x6ae>
 8000754:	2480      	movs	r4, #128	; 0x80
 8000756:	0324      	lsls	r4, r4, #12
 8000758:	430c      	orrs	r4, r1
 800075a:	0324      	lsls	r4, r4, #12
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <__aeabi_dadd+0x36c>)
 800075e:	0b24      	lsrs	r4, r4, #12
 8000760:	e73e      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000762:	0020      	movs	r0, r4
 8000764:	f001 fce8 	bl	8002138 <__clzsi2>
 8000768:	0003      	movs	r3, r0
 800076a:	3318      	adds	r3, #24
 800076c:	2b1f      	cmp	r3, #31
 800076e:	dc00      	bgt.n	8000772 <__aeabi_dadd+0x2ca>
 8000770:	e6f7      	b.n	8000562 <__aeabi_dadd+0xba>
 8000772:	0022      	movs	r2, r4
 8000774:	3808      	subs	r0, #8
 8000776:	4082      	lsls	r2, r0
 8000778:	2400      	movs	r4, #0
 800077a:	42b3      	cmp	r3, r6
 800077c:	db00      	blt.n	8000780 <__aeabi_dadd+0x2d8>
 800077e:	e6fc      	b.n	800057a <__aeabi_dadd+0xd2>
 8000780:	1af6      	subs	r6, r6, r3
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <__aeabi_dadd+0x370>)
 8000784:	401a      	ands	r2, r3
 8000786:	4692      	mov	sl, r2
 8000788:	e70a      	b.n	80005a0 <__aeabi_dadd+0xf8>
 800078a:	2f00      	cmp	r7, #0
 800078c:	d02b      	beq.n	80007e6 <__aeabi_dadd+0x33e>
 800078e:	1b97      	subs	r7, r2, r6
 8000790:	2e00      	cmp	r6, #0
 8000792:	d100      	bne.n	8000796 <__aeabi_dadd+0x2ee>
 8000794:	e0b8      	b.n	8000908 <__aeabi_dadd+0x460>
 8000796:	4c1f      	ldr	r4, [pc, #124]	; (8000814 <__aeabi_dadd+0x36c>)
 8000798:	42a2      	cmp	r2, r4
 800079a:	d100      	bne.n	800079e <__aeabi_dadd+0x2f6>
 800079c:	e11c      	b.n	80009d8 <__aeabi_dadd+0x530>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	0424      	lsls	r4, r4, #16
 80007a2:	4321      	orrs	r1, r4
 80007a4:	2f38      	cmp	r7, #56	; 0x38
 80007a6:	dd00      	ble.n	80007aa <__aeabi_dadd+0x302>
 80007a8:	e11e      	b.n	80009e8 <__aeabi_dadd+0x540>
 80007aa:	2f1f      	cmp	r7, #31
 80007ac:	dd00      	ble.n	80007b0 <__aeabi_dadd+0x308>
 80007ae:	e19e      	b.n	8000aee <__aeabi_dadd+0x646>
 80007b0:	2620      	movs	r6, #32
 80007b2:	000c      	movs	r4, r1
 80007b4:	1bf6      	subs	r6, r6, r7
 80007b6:	0018      	movs	r0, r3
 80007b8:	40b3      	lsls	r3, r6
 80007ba:	40b4      	lsls	r4, r6
 80007bc:	40f8      	lsrs	r0, r7
 80007be:	1e5e      	subs	r6, r3, #1
 80007c0:	41b3      	sbcs	r3, r6
 80007c2:	40f9      	lsrs	r1, r7
 80007c4:	4304      	orrs	r4, r0
 80007c6:	431c      	orrs	r4, r3
 80007c8:	4489      	add	r9, r1
 80007ca:	4444      	add	r4, r8
 80007cc:	4544      	cmp	r4, r8
 80007ce:	419b      	sbcs	r3, r3
 80007d0:	425b      	negs	r3, r3
 80007d2:	444b      	add	r3, r9
 80007d4:	469a      	mov	sl, r3
 80007d6:	0016      	movs	r6, r2
 80007d8:	e7a8      	b.n	800072c <__aeabi_dadd+0x284>
 80007da:	4642      	mov	r2, r8
 80007dc:	464c      	mov	r4, r9
 80007de:	4314      	orrs	r4, r2
 80007e0:	1e62      	subs	r2, r4, #1
 80007e2:	4194      	sbcs	r4, r2
 80007e4:	e6a6      	b.n	8000534 <__aeabi_dadd+0x8c>
 80007e6:	4c0d      	ldr	r4, [pc, #52]	; (800081c <__aeabi_dadd+0x374>)
 80007e8:	1c72      	adds	r2, r6, #1
 80007ea:	4222      	tst	r2, r4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_dadd+0x348>
 80007ee:	e0a8      	b.n	8000942 <__aeabi_dadd+0x49a>
 80007f0:	000a      	movs	r2, r1
 80007f2:	431a      	orrs	r2, r3
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_dadd+0x352>
 80007f8:	e10a      	b.n	8000a10 <__aeabi_dadd+0x568>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_dadd+0x358>
 80007fe:	e15e      	b.n	8000abe <__aeabi_dadd+0x616>
 8000800:	464a      	mov	r2, r9
 8000802:	4302      	orrs	r2, r0
 8000804:	d000      	beq.n	8000808 <__aeabi_dadd+0x360>
 8000806:	e161      	b.n	8000acc <__aeabi_dadd+0x624>
 8000808:	074a      	lsls	r2, r1, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c9      	lsrs	r1, r1, #3
 8000810:	e77c      	b.n	800070c <__aeabi_dadd+0x264>
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	000007ff 	.word	0x000007ff
 8000818:	ff7fffff 	.word	0xff7fffff
 800081c:	000007fe 	.word	0x000007fe
 8000820:	4ccf      	ldr	r4, [pc, #828]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000822:	42a2      	cmp	r2, r4
 8000824:	d100      	bne.n	8000828 <__aeabi_dadd+0x380>
 8000826:	e0ce      	b.n	80009c6 <__aeabi_dadd+0x51e>
 8000828:	2480      	movs	r4, #128	; 0x80
 800082a:	0424      	lsls	r4, r4, #16
 800082c:	4321      	orrs	r1, r4
 800082e:	2f38      	cmp	r7, #56	; 0x38
 8000830:	dc5b      	bgt.n	80008ea <__aeabi_dadd+0x442>
 8000832:	2f1f      	cmp	r7, #31
 8000834:	dd00      	ble.n	8000838 <__aeabi_dadd+0x390>
 8000836:	e0dc      	b.n	80009f2 <__aeabi_dadd+0x54a>
 8000838:	2520      	movs	r5, #32
 800083a:	000c      	movs	r4, r1
 800083c:	1bed      	subs	r5, r5, r7
 800083e:	001e      	movs	r6, r3
 8000840:	40ab      	lsls	r3, r5
 8000842:	40ac      	lsls	r4, r5
 8000844:	40fe      	lsrs	r6, r7
 8000846:	1e5d      	subs	r5, r3, #1
 8000848:	41ab      	sbcs	r3, r5
 800084a:	4334      	orrs	r4, r6
 800084c:	40f9      	lsrs	r1, r7
 800084e:	431c      	orrs	r4, r3
 8000850:	464b      	mov	r3, r9
 8000852:	1a5b      	subs	r3, r3, r1
 8000854:	4699      	mov	r9, r3
 8000856:	e04c      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000858:	464a      	mov	r2, r9
 800085a:	1a1c      	subs	r4, r3, r0
 800085c:	1a88      	subs	r0, r1, r2
 800085e:	42a3      	cmp	r3, r4
 8000860:	4192      	sbcs	r2, r2
 8000862:	4252      	negs	r2, r2
 8000864:	4692      	mov	sl, r2
 8000866:	0002      	movs	r2, r0
 8000868:	4650      	mov	r0, sl
 800086a:	1a12      	subs	r2, r2, r0
 800086c:	4692      	mov	sl, r2
 800086e:	0212      	lsls	r2, r2, #8
 8000870:	d478      	bmi.n	8000964 <__aeabi_dadd+0x4bc>
 8000872:	4653      	mov	r3, sl
 8000874:	4323      	orrs	r3, r4
 8000876:	d000      	beq.n	800087a <__aeabi_dadd+0x3d2>
 8000878:	e66a      	b.n	8000550 <__aeabi_dadd+0xa8>
 800087a:	2100      	movs	r1, #0
 800087c:	2500      	movs	r5, #0
 800087e:	e745      	b.n	800070c <__aeabi_dadd+0x264>
 8000880:	074a      	lsls	r2, r1, #29
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	4313      	orrs	r3, r2
 8000886:	08c9      	lsrs	r1, r1, #3
 8000888:	e73d      	b.n	8000706 <__aeabi_dadd+0x25e>
 800088a:	181c      	adds	r4, r3, r0
 800088c:	429c      	cmp	r4, r3
 800088e:	419b      	sbcs	r3, r3
 8000890:	4449      	add	r1, r9
 8000892:	468a      	mov	sl, r1
 8000894:	425b      	negs	r3, r3
 8000896:	449a      	add	sl, r3
 8000898:	4653      	mov	r3, sl
 800089a:	2601      	movs	r6, #1
 800089c:	021b      	lsls	r3, r3, #8
 800089e:	d400      	bmi.n	80008a2 <__aeabi_dadd+0x3fa>
 80008a0:	e727      	b.n	80006f2 <__aeabi_dadd+0x24a>
 80008a2:	2602      	movs	r6, #2
 80008a4:	4652      	mov	r2, sl
 80008a6:	4baf      	ldr	r3, [pc, #700]	; (8000b64 <__aeabi_dadd+0x6bc>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	401a      	ands	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	4021      	ands	r1, r4
 80008b0:	0862      	lsrs	r2, r4, #1
 80008b2:	430a      	orrs	r2, r1
 80008b4:	07dc      	lsls	r4, r3, #31
 80008b6:	085b      	lsrs	r3, r3, #1
 80008b8:	469a      	mov	sl, r3
 80008ba:	4314      	orrs	r4, r2
 80008bc:	e670      	b.n	80005a0 <__aeabi_dadd+0xf8>
 80008be:	003a      	movs	r2, r7
 80008c0:	464c      	mov	r4, r9
 80008c2:	3a20      	subs	r2, #32
 80008c4:	40d4      	lsrs	r4, r2
 80008c6:	46a4      	mov	ip, r4
 80008c8:	2f20      	cmp	r7, #32
 80008ca:	d007      	beq.n	80008dc <__aeabi_dadd+0x434>
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	4648      	mov	r0, r9
 80008d0:	1bd2      	subs	r2, r2, r7
 80008d2:	4090      	lsls	r0, r2
 80008d4:	0002      	movs	r2, r0
 80008d6:	4640      	mov	r0, r8
 80008d8:	4310      	orrs	r0, r2
 80008da:	4680      	mov	r8, r0
 80008dc:	4640      	mov	r0, r8
 80008de:	1e42      	subs	r2, r0, #1
 80008e0:	4190      	sbcs	r0, r2
 80008e2:	4662      	mov	r2, ip
 80008e4:	0004      	movs	r4, r0
 80008e6:	4314      	orrs	r4, r2
 80008e8:	e624      	b.n	8000534 <__aeabi_dadd+0x8c>
 80008ea:	4319      	orrs	r1, r3
 80008ec:	000c      	movs	r4, r1
 80008ee:	1e63      	subs	r3, r4, #1
 80008f0:	419c      	sbcs	r4, r3
 80008f2:	4643      	mov	r3, r8
 80008f4:	1b1c      	subs	r4, r3, r4
 80008f6:	45a0      	cmp	r8, r4
 80008f8:	419b      	sbcs	r3, r3
 80008fa:	4649      	mov	r1, r9
 80008fc:	425b      	negs	r3, r3
 80008fe:	1acb      	subs	r3, r1, r3
 8000900:	469a      	mov	sl, r3
 8000902:	4665      	mov	r5, ip
 8000904:	0016      	movs	r6, r2
 8000906:	e61b      	b.n	8000540 <__aeabi_dadd+0x98>
 8000908:	000c      	movs	r4, r1
 800090a:	431c      	orrs	r4, r3
 800090c:	d100      	bne.n	8000910 <__aeabi_dadd+0x468>
 800090e:	e0c7      	b.n	8000aa0 <__aeabi_dadd+0x5f8>
 8000910:	1e7c      	subs	r4, r7, #1
 8000912:	2f01      	cmp	r7, #1
 8000914:	d100      	bne.n	8000918 <__aeabi_dadd+0x470>
 8000916:	e0f9      	b.n	8000b0c <__aeabi_dadd+0x664>
 8000918:	4e91      	ldr	r6, [pc, #580]	; (8000b60 <__aeabi_dadd+0x6b8>)
 800091a:	42b7      	cmp	r7, r6
 800091c:	d05c      	beq.n	80009d8 <__aeabi_dadd+0x530>
 800091e:	0027      	movs	r7, r4
 8000920:	e740      	b.n	80007a4 <__aeabi_dadd+0x2fc>
 8000922:	2220      	movs	r2, #32
 8000924:	464c      	mov	r4, r9
 8000926:	4640      	mov	r0, r8
 8000928:	1bd2      	subs	r2, r2, r7
 800092a:	4094      	lsls	r4, r2
 800092c:	40f8      	lsrs	r0, r7
 800092e:	4304      	orrs	r4, r0
 8000930:	4640      	mov	r0, r8
 8000932:	4090      	lsls	r0, r2
 8000934:	1e42      	subs	r2, r0, #1
 8000936:	4190      	sbcs	r0, r2
 8000938:	464a      	mov	r2, r9
 800093a:	40fa      	lsrs	r2, r7
 800093c:	4304      	orrs	r4, r0
 800093e:	1889      	adds	r1, r1, r2
 8000940:	e6ee      	b.n	8000720 <__aeabi_dadd+0x278>
 8000942:	4c87      	ldr	r4, [pc, #540]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000944:	42a2      	cmp	r2, r4
 8000946:	d100      	bne.n	800094a <__aeabi_dadd+0x4a2>
 8000948:	e6f9      	b.n	800073e <__aeabi_dadd+0x296>
 800094a:	1818      	adds	r0, r3, r0
 800094c:	4298      	cmp	r0, r3
 800094e:	419b      	sbcs	r3, r3
 8000950:	4449      	add	r1, r9
 8000952:	425b      	negs	r3, r3
 8000954:	18cb      	adds	r3, r1, r3
 8000956:	07dc      	lsls	r4, r3, #31
 8000958:	0840      	lsrs	r0, r0, #1
 800095a:	085b      	lsrs	r3, r3, #1
 800095c:	469a      	mov	sl, r3
 800095e:	0016      	movs	r6, r2
 8000960:	4304      	orrs	r4, r0
 8000962:	e6c6      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000964:	4642      	mov	r2, r8
 8000966:	1ad4      	subs	r4, r2, r3
 8000968:	45a0      	cmp	r8, r4
 800096a:	4180      	sbcs	r0, r0
 800096c:	464b      	mov	r3, r9
 800096e:	4240      	negs	r0, r0
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	1a0b      	subs	r3, r1, r0
 8000974:	469a      	mov	sl, r3
 8000976:	4665      	mov	r5, ip
 8000978:	e5ea      	b.n	8000550 <__aeabi_dadd+0xa8>
 800097a:	464b      	mov	r3, r9
 800097c:	464a      	mov	r2, r9
 800097e:	08c0      	lsrs	r0, r0, #3
 8000980:	075b      	lsls	r3, r3, #29
 8000982:	4665      	mov	r5, ip
 8000984:	4303      	orrs	r3, r0
 8000986:	08d1      	lsrs	r1, r2, #3
 8000988:	e6bd      	b.n	8000706 <__aeabi_dadd+0x25e>
 800098a:	2a00      	cmp	r2, #0
 800098c:	d000      	beq.n	8000990 <__aeabi_dadd+0x4e8>
 800098e:	e08e      	b.n	8000aae <__aeabi_dadd+0x606>
 8000990:	464b      	mov	r3, r9
 8000992:	4303      	orrs	r3, r0
 8000994:	d117      	bne.n	80009c6 <__aeabi_dadd+0x51e>
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	2500      	movs	r5, #0
 800099a:	0309      	lsls	r1, r1, #12
 800099c:	e6da      	b.n	8000754 <__aeabi_dadd+0x2ac>
 800099e:	074a      	lsls	r2, r1, #29
 80009a0:	08db      	lsrs	r3, r3, #3
 80009a2:	4313      	orrs	r3, r2
 80009a4:	08c9      	lsrs	r1, r1, #3
 80009a6:	e6d1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009a8:	1a1c      	subs	r4, r3, r0
 80009aa:	464a      	mov	r2, r9
 80009ac:	42a3      	cmp	r3, r4
 80009ae:	419b      	sbcs	r3, r3
 80009b0:	1a89      	subs	r1, r1, r2
 80009b2:	425b      	negs	r3, r3
 80009b4:	1acb      	subs	r3, r1, r3
 80009b6:	469a      	mov	sl, r3
 80009b8:	2601      	movs	r6, #1
 80009ba:	e5c1      	b.n	8000540 <__aeabi_dadd+0x98>
 80009bc:	074a      	lsls	r2, r1, #29
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	4313      	orrs	r3, r2
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	e69f      	b.n	8000706 <__aeabi_dadd+0x25e>
 80009c6:	4643      	mov	r3, r8
 80009c8:	08d8      	lsrs	r0, r3, #3
 80009ca:	464b      	mov	r3, r9
 80009cc:	464a      	mov	r2, r9
 80009ce:	075b      	lsls	r3, r3, #29
 80009d0:	4665      	mov	r5, ip
 80009d2:	4303      	orrs	r3, r0
 80009d4:	08d1      	lsrs	r1, r2, #3
 80009d6:	e6b9      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009d8:	4643      	mov	r3, r8
 80009da:	08d8      	lsrs	r0, r3, #3
 80009dc:	464b      	mov	r3, r9
 80009de:	464a      	mov	r2, r9
 80009e0:	075b      	lsls	r3, r3, #29
 80009e2:	4303      	orrs	r3, r0
 80009e4:	08d1      	lsrs	r1, r2, #3
 80009e6:	e6b1      	b.n	800074c <__aeabi_dadd+0x2a4>
 80009e8:	4319      	orrs	r1, r3
 80009ea:	000c      	movs	r4, r1
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	e6eb      	b.n	80007ca <__aeabi_dadd+0x322>
 80009f2:	003c      	movs	r4, r7
 80009f4:	000d      	movs	r5, r1
 80009f6:	3c20      	subs	r4, #32
 80009f8:	40e5      	lsrs	r5, r4
 80009fa:	2f20      	cmp	r7, #32
 80009fc:	d003      	beq.n	8000a06 <__aeabi_dadd+0x55e>
 80009fe:	2440      	movs	r4, #64	; 0x40
 8000a00:	1be4      	subs	r4, r4, r7
 8000a02:	40a1      	lsls	r1, r4
 8000a04:	430b      	orrs	r3, r1
 8000a06:	001c      	movs	r4, r3
 8000a08:	1e63      	subs	r3, r4, #1
 8000a0a:	419c      	sbcs	r4, r3
 8000a0c:	432c      	orrs	r4, r5
 8000a0e:	e770      	b.n	80008f2 <__aeabi_dadd+0x44a>
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d0e1      	beq.n	80009d8 <__aeabi_dadd+0x530>
 8000a14:	464a      	mov	r2, r9
 8000a16:	4302      	orrs	r2, r0
 8000a18:	d0c1      	beq.n	800099e <__aeabi_dadd+0x4f6>
 8000a1a:	074a      	lsls	r2, r1, #29
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	08c9      	lsrs	r1, r1, #3
 8000a24:	0312      	lsls	r2, r2, #12
 8000a26:	4211      	tst	r1, r2
 8000a28:	d008      	beq.n	8000a3c <__aeabi_dadd+0x594>
 8000a2a:	4648      	mov	r0, r9
 8000a2c:	08c4      	lsrs	r4, r0, #3
 8000a2e:	4214      	tst	r4, r2
 8000a30:	d104      	bne.n	8000a3c <__aeabi_dadd+0x594>
 8000a32:	4643      	mov	r3, r8
 8000a34:	0021      	movs	r1, r4
 8000a36:	08db      	lsrs	r3, r3, #3
 8000a38:	0742      	lsls	r2, r0, #29
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	0f5a      	lsrs	r2, r3, #29
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	0752      	lsls	r2, r2, #29
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	e681      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000a48:	464b      	mov	r3, r9
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dadd+0x5a8>
 8000a4e:	e714      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000a50:	464b      	mov	r3, r9
 8000a52:	464a      	mov	r2, r9
 8000a54:	08c0      	lsrs	r0, r0, #3
 8000a56:	075b      	lsls	r3, r3, #29
 8000a58:	4665      	mov	r5, ip
 8000a5a:	4303      	orrs	r3, r0
 8000a5c:	08d1      	lsrs	r1, r2, #3
 8000a5e:	e655      	b.n	800070c <__aeabi_dadd+0x264>
 8000a60:	1ac4      	subs	r4, r0, r3
 8000a62:	45a0      	cmp	r8, r4
 8000a64:	4180      	sbcs	r0, r0
 8000a66:	464b      	mov	r3, r9
 8000a68:	4240      	negs	r0, r0
 8000a6a:	1a59      	subs	r1, r3, r1
 8000a6c:	1a0b      	subs	r3, r1, r0
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4665      	mov	r5, ip
 8000a72:	2601      	movs	r6, #1
 8000a74:	e564      	b.n	8000540 <__aeabi_dadd+0x98>
 8000a76:	1a1c      	subs	r4, r3, r0
 8000a78:	464a      	mov	r2, r9
 8000a7a:	42a3      	cmp	r3, r4
 8000a7c:	4180      	sbcs	r0, r0
 8000a7e:	1a8a      	subs	r2, r1, r2
 8000a80:	4240      	negs	r0, r0
 8000a82:	1a12      	subs	r2, r2, r0
 8000a84:	4692      	mov	sl, r2
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	d549      	bpl.n	8000b1e <__aeabi_dadd+0x676>
 8000a8a:	4642      	mov	r2, r8
 8000a8c:	1ad4      	subs	r4, r2, r3
 8000a8e:	45a0      	cmp	r8, r4
 8000a90:	4180      	sbcs	r0, r0
 8000a92:	464b      	mov	r3, r9
 8000a94:	4240      	negs	r0, r0
 8000a96:	1a59      	subs	r1, r3, r1
 8000a98:	1a0b      	subs	r3, r1, r0
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	4665      	mov	r5, ip
 8000a9e:	e57f      	b.n	80005a0 <__aeabi_dadd+0xf8>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	08c0      	lsrs	r0, r0, #3
 8000aa6:	075b      	lsls	r3, r3, #29
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	08d1      	lsrs	r1, r2, #3
 8000aac:	e62b      	b.n	8000706 <__aeabi_dadd+0x25e>
 8000aae:	464a      	mov	r2, r9
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	4302      	orrs	r2, r0
 8000ab4:	d138      	bne.n	8000b28 <__aeabi_dadd+0x680>
 8000ab6:	074a      	lsls	r2, r1, #29
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	08c9      	lsrs	r1, r1, #3
 8000abc:	e646      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4303      	orrs	r3, r0
 8000ac8:	08d1      	lsrs	r1, r2, #3
 8000aca:	e61f      	b.n	800070c <__aeabi_dadd+0x264>
 8000acc:	181c      	adds	r4, r3, r0
 8000ace:	429c      	cmp	r4, r3
 8000ad0:	419b      	sbcs	r3, r3
 8000ad2:	4449      	add	r1, r9
 8000ad4:	468a      	mov	sl, r1
 8000ad6:	425b      	negs	r3, r3
 8000ad8:	449a      	add	sl, r3
 8000ada:	4653      	mov	r3, sl
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	d400      	bmi.n	8000ae2 <__aeabi_dadd+0x63a>
 8000ae0:	e607      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000ae2:	4652      	mov	r2, sl
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <__aeabi_dadd+0x6bc>)
 8000ae6:	2601      	movs	r6, #1
 8000ae8:	401a      	ands	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	e601      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000aee:	003c      	movs	r4, r7
 8000af0:	000e      	movs	r6, r1
 8000af2:	3c20      	subs	r4, #32
 8000af4:	40e6      	lsrs	r6, r4
 8000af6:	2f20      	cmp	r7, #32
 8000af8:	d003      	beq.n	8000b02 <__aeabi_dadd+0x65a>
 8000afa:	2440      	movs	r4, #64	; 0x40
 8000afc:	1be4      	subs	r4, r4, r7
 8000afe:	40a1      	lsls	r1, r4
 8000b00:	430b      	orrs	r3, r1
 8000b02:	001c      	movs	r4, r3
 8000b04:	1e63      	subs	r3, r4, #1
 8000b06:	419c      	sbcs	r4, r3
 8000b08:	4334      	orrs	r4, r6
 8000b0a:	e65e      	b.n	80007ca <__aeabi_dadd+0x322>
 8000b0c:	4443      	add	r3, r8
 8000b0e:	4283      	cmp	r3, r0
 8000b10:	4180      	sbcs	r0, r0
 8000b12:	4449      	add	r1, r9
 8000b14:	468a      	mov	sl, r1
 8000b16:	4240      	negs	r0, r0
 8000b18:	001c      	movs	r4, r3
 8000b1a:	4482      	add	sl, r0
 8000b1c:	e6bc      	b.n	8000898 <__aeabi_dadd+0x3f0>
 8000b1e:	4653      	mov	r3, sl
 8000b20:	4323      	orrs	r3, r4
 8000b22:	d100      	bne.n	8000b26 <__aeabi_dadd+0x67e>
 8000b24:	e6a9      	b.n	800087a <__aeabi_dadd+0x3d2>
 8000b26:	e5e4      	b.n	80006f2 <__aeabi_dadd+0x24a>
 8000b28:	074a      	lsls	r2, r1, #29
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	08c9      	lsrs	r1, r1, #3
 8000b30:	0312      	lsls	r2, r2, #12
 8000b32:	4211      	tst	r1, r2
 8000b34:	d009      	beq.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b36:	4648      	mov	r0, r9
 8000b38:	08c4      	lsrs	r4, r0, #3
 8000b3a:	4214      	tst	r4, r2
 8000b3c:	d105      	bne.n	8000b4a <__aeabi_dadd+0x6a2>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	4665      	mov	r5, ip
 8000b42:	0021      	movs	r1, r4
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	0742      	lsls	r2, r0, #29
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	0f5a      	lsrs	r2, r3, #29
 8000b4c:	00db      	lsls	r3, r3, #3
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	0752      	lsls	r2, r2, #29
 8000b52:	4313      	orrs	r3, r2
 8000b54:	e5fa      	b.n	800074c <__aeabi_dadd+0x2a4>
 8000b56:	2300      	movs	r3, #0
 8000b58:	4a01      	ldr	r2, [pc, #4]	; (8000b60 <__aeabi_dadd+0x6b8>)
 8000b5a:	001c      	movs	r4, r3
 8000b5c:	e540      	b.n	80005e0 <__aeabi_dadd+0x138>
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	000007ff 	.word	0x000007ff
 8000b64:	ff7fffff 	.word	0xff7fffff

08000b68 <__aeabi_ddiv>:
 8000b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b6a:	4657      	mov	r7, sl
 8000b6c:	464e      	mov	r6, r9
 8000b6e:	4645      	mov	r5, r8
 8000b70:	46de      	mov	lr, fp
 8000b72:	b5e0      	push	{r5, r6, r7, lr}
 8000b74:	030c      	lsls	r4, r1, #12
 8000b76:	001f      	movs	r7, r3
 8000b78:	004b      	lsls	r3, r1, #1
 8000b7a:	4681      	mov	r9, r0
 8000b7c:	4692      	mov	sl, r2
 8000b7e:	0005      	movs	r5, r0
 8000b80:	b085      	sub	sp, #20
 8000b82:	0b24      	lsrs	r4, r4, #12
 8000b84:	0d5b      	lsrs	r3, r3, #21
 8000b86:	0fce      	lsrs	r6, r1, #31
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_ddiv+0x26>
 8000b8c:	e152      	b.n	8000e34 <__aeabi_ddiv+0x2cc>
 8000b8e:	4ad2      	ldr	r2, [pc, #840]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d100      	bne.n	8000b96 <__aeabi_ddiv+0x2e>
 8000b94:	e16e      	b.n	8000e74 <__aeabi_ddiv+0x30c>
 8000b96:	0f42      	lsrs	r2, r0, #29
 8000b98:	00e4      	lsls	r4, r4, #3
 8000b9a:	4314      	orrs	r4, r2
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	0412      	lsls	r2, r2, #16
 8000ba0:	4322      	orrs	r2, r4
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	4acd      	ldr	r2, [pc, #820]	; (8000edc <__aeabi_ddiv+0x374>)
 8000ba6:	00c5      	lsls	r5, r0, #3
 8000ba8:	4693      	mov	fp, r2
 8000baa:	449b      	add	fp, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	4699      	mov	r9, r3
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	033c      	lsls	r4, r7, #12
 8000bb4:	007b      	lsls	r3, r7, #1
 8000bb6:	4650      	mov	r0, sl
 8000bb8:	0b24      	lsrs	r4, r4, #12
 8000bba:	0d5b      	lsrs	r3, r3, #21
 8000bbc:	0fff      	lsrs	r7, r7, #31
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_ddiv+0x5c>
 8000bc2:	e11a      	b.n	8000dfa <__aeabi_ddiv+0x292>
 8000bc4:	4ac4      	ldr	r2, [pc, #784]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d100      	bne.n	8000bcc <__aeabi_ddiv+0x64>
 8000bca:	e15e      	b.n	8000e8a <__aeabi_ddiv+0x322>
 8000bcc:	0f42      	lsrs	r2, r0, #29
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	4322      	orrs	r2, r4
 8000bd2:	2480      	movs	r4, #128	; 0x80
 8000bd4:	0424      	lsls	r4, r4, #16
 8000bd6:	4314      	orrs	r4, r2
 8000bd8:	4ac0      	ldr	r2, [pc, #768]	; (8000edc <__aeabi_ddiv+0x374>)
 8000bda:	00c1      	lsls	r1, r0, #3
 8000bdc:	4694      	mov	ip, r2
 8000bde:	465a      	mov	r2, fp
 8000be0:	4463      	add	r3, ip
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	469b      	mov	fp, r3
 8000be6:	2000      	movs	r0, #0
 8000be8:	0033      	movs	r3, r6
 8000bea:	407b      	eors	r3, r7
 8000bec:	469a      	mov	sl, r3
 8000bee:	464b      	mov	r3, r9
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d827      	bhi.n	8000c44 <__aeabi_ddiv+0xdc>
 8000bf4:	4aba      	ldr	r2, [pc, #744]	; (8000ee0 <__aeabi_ddiv+0x378>)
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	58d3      	ldr	r3, [r2, r3]
 8000bfa:	469f      	mov	pc, r3
 8000bfc:	46b2      	mov	sl, r6
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d016      	beq.n	8000c32 <__aeabi_ddiv+0xca>
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d100      	bne.n	8000c0a <__aeabi_ddiv+0xa2>
 8000c08:	e287      	b.n	800111a <__aeabi_ddiv+0x5b2>
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d000      	beq.n	8000c10 <__aeabi_ddiv+0xa8>
 8000c0e:	e0d5      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	2500      	movs	r5, #0
 8000c16:	051b      	lsls	r3, r3, #20
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	4652      	mov	r2, sl
 8000c1c:	07d2      	lsls	r2, r2, #31
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	0028      	movs	r0, r5
 8000c22:	0019      	movs	r1, r3
 8000c24:	b005      	add	sp, #20
 8000c26:	bcf0      	pop	{r4, r5, r6, r7}
 8000c28:	46bb      	mov	fp, r7
 8000c2a:	46b2      	mov	sl, r6
 8000c2c:	46a9      	mov	r9, r5
 8000c2e:	46a0      	mov	r8, r4
 8000c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c32:	2200      	movs	r2, #0
 8000c34:	2500      	movs	r5, #0
 8000c36:	4ba8      	ldr	r3, [pc, #672]	; (8000ed8 <__aeabi_ddiv+0x370>)
 8000c38:	e7ed      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46a0      	mov	r8, r4
 8000c3e:	000d      	movs	r5, r1
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	e7dc      	b.n	8000bfe <__aeabi_ddiv+0x96>
 8000c44:	4544      	cmp	r4, r8
 8000c46:	d200      	bcs.n	8000c4a <__aeabi_ddiv+0xe2>
 8000c48:	e1c4      	b.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000c4a:	d100      	bne.n	8000c4e <__aeabi_ddiv+0xe6>
 8000c4c:	e1bf      	b.n	8000fce <__aeabi_ddiv+0x466>
 8000c4e:	2301      	movs	r3, #1
 8000c50:	425b      	negs	r3, r3
 8000c52:	469c      	mov	ip, r3
 8000c54:	002e      	movs	r6, r5
 8000c56:	4640      	mov	r0, r8
 8000c58:	2500      	movs	r5, #0
 8000c5a:	44e3      	add	fp, ip
 8000c5c:	0223      	lsls	r3, r4, #8
 8000c5e:	0e0c      	lsrs	r4, r1, #24
 8000c60:	431c      	orrs	r4, r3
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	4699      	mov	r9, r3
 8000c66:	0423      	lsls	r3, r4, #16
 8000c68:	020a      	lsls	r2, r1, #8
 8000c6a:	0c1f      	lsrs	r7, r3, #16
 8000c6c:	4649      	mov	r1, r9
 8000c6e:	9200      	str	r2, [sp, #0]
 8000c70:	9701      	str	r7, [sp, #4]
 8000c72:	f7ff faeb 	bl	800024c <__aeabi_uidivmod>
 8000c76:	0002      	movs	r2, r0
 8000c78:	437a      	muls	r2, r7
 8000c7a:	040b      	lsls	r3, r1, #16
 8000c7c:	0c31      	lsrs	r1, r6, #16
 8000c7e:	4680      	mov	r8, r0
 8000c80:	4319      	orrs	r1, r3
 8000c82:	428a      	cmp	r2, r1
 8000c84:	d907      	bls.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	469c      	mov	ip, r3
 8000c8c:	1909      	adds	r1, r1, r4
 8000c8e:	44e0      	add	r8, ip
 8000c90:	428c      	cmp	r4, r1
 8000c92:	d800      	bhi.n	8000c96 <__aeabi_ddiv+0x12e>
 8000c94:	e201      	b.n	800109a <__aeabi_ddiv+0x532>
 8000c96:	1a88      	subs	r0, r1, r2
 8000c98:	4649      	mov	r1, r9
 8000c9a:	f7ff fad7 	bl	800024c <__aeabi_uidivmod>
 8000c9e:	9a01      	ldr	r2, [sp, #4]
 8000ca0:	0436      	lsls	r6, r6, #16
 8000ca2:	4342      	muls	r2, r0
 8000ca4:	0409      	lsls	r1, r1, #16
 8000ca6:	0c36      	lsrs	r6, r6, #16
 8000ca8:	0003      	movs	r3, r0
 8000caa:	430e      	orrs	r6, r1
 8000cac:	42b2      	cmp	r2, r6
 8000cae:	d904      	bls.n	8000cba <__aeabi_ddiv+0x152>
 8000cb0:	1936      	adds	r6, r6, r4
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d800      	bhi.n	8000cba <__aeabi_ddiv+0x152>
 8000cb8:	e1e9      	b.n	800108e <__aeabi_ddiv+0x526>
 8000cba:	1ab0      	subs	r0, r6, r2
 8000cbc:	4642      	mov	r2, r8
 8000cbe:	9e00      	ldr	r6, [sp, #0]
 8000cc0:	0412      	lsls	r2, r2, #16
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	0c33      	lsrs	r3, r6, #16
 8000cc6:	001f      	movs	r7, r3
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	4690      	mov	r8, r2
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	0413      	lsls	r3, r2, #16
 8000cd0:	0432      	lsls	r2, r6, #16
 8000cd2:	0c16      	lsrs	r6, r2, #16
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	0c1b      	lsrs	r3, r3, #16
 8000cd8:	435a      	muls	r2, r3
 8000cda:	9603      	str	r6, [sp, #12]
 8000cdc:	437b      	muls	r3, r7
 8000cde:	434e      	muls	r6, r1
 8000ce0:	4379      	muls	r1, r7
 8000ce2:	0c17      	lsrs	r7, r2, #16
 8000ce4:	46bc      	mov	ip, r7
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	4463      	add	r3, ip
 8000cea:	429e      	cmp	r6, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_ddiv+0x18e>
 8000cee:	2680      	movs	r6, #128	; 0x80
 8000cf0:	0276      	lsls	r6, r6, #9
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	4461      	add	r1, ip
 8000cf6:	0c1e      	lsrs	r6, r3, #16
 8000cf8:	1871      	adds	r1, r6, r1
 8000cfa:	0416      	lsls	r6, r2, #16
 8000cfc:	041b      	lsls	r3, r3, #16
 8000cfe:	0c36      	lsrs	r6, r6, #16
 8000d00:	199e      	adds	r6, r3, r6
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d302      	bcc.n	8000d0c <__aeabi_ddiv+0x1a4>
 8000d06:	d112      	bne.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d08:	42b5      	cmp	r5, r6
 8000d0a:	d210      	bcs.n	8000d2e <__aeabi_ddiv+0x1c6>
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	1e5a      	subs	r2, r3, #1
 8000d10:	9b00      	ldr	r3, [sp, #0]
 8000d12:	469c      	mov	ip, r3
 8000d14:	4465      	add	r5, ip
 8000d16:	001f      	movs	r7, r3
 8000d18:	429d      	cmp	r5, r3
 8000d1a:	419b      	sbcs	r3, r3
 8000d1c:	425b      	negs	r3, r3
 8000d1e:	191b      	adds	r3, r3, r4
 8000d20:	18c0      	adds	r0, r0, r3
 8000d22:	4284      	cmp	r4, r0
 8000d24:	d200      	bcs.n	8000d28 <__aeabi_ddiv+0x1c0>
 8000d26:	e19e      	b.n	8001066 <__aeabi_ddiv+0x4fe>
 8000d28:	d100      	bne.n	8000d2c <__aeabi_ddiv+0x1c4>
 8000d2a:	e199      	b.n	8001060 <__aeabi_ddiv+0x4f8>
 8000d2c:	4690      	mov	r8, r2
 8000d2e:	1bae      	subs	r6, r5, r6
 8000d30:	42b5      	cmp	r5, r6
 8000d32:	41ad      	sbcs	r5, r5
 8000d34:	1a40      	subs	r0, r0, r1
 8000d36:	426d      	negs	r5, r5
 8000d38:	1b40      	subs	r0, r0, r5
 8000d3a:	4284      	cmp	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_ddiv+0x1d8>
 8000d3e:	e1d2      	b.n	80010e6 <__aeabi_ddiv+0x57e>
 8000d40:	4649      	mov	r1, r9
 8000d42:	f7ff fa83 	bl	800024c <__aeabi_uidivmod>
 8000d46:	9a01      	ldr	r2, [sp, #4]
 8000d48:	040b      	lsls	r3, r1, #16
 8000d4a:	4342      	muls	r2, r0
 8000d4c:	0c31      	lsrs	r1, r6, #16
 8000d4e:	0005      	movs	r5, r0
 8000d50:	4319      	orrs	r1, r3
 8000d52:	428a      	cmp	r2, r1
 8000d54:	d900      	bls.n	8000d58 <__aeabi_ddiv+0x1f0>
 8000d56:	e16c      	b.n	8001032 <__aeabi_ddiv+0x4ca>
 8000d58:	1a88      	subs	r0, r1, r2
 8000d5a:	4649      	mov	r1, r9
 8000d5c:	f7ff fa76 	bl	800024c <__aeabi_uidivmod>
 8000d60:	9a01      	ldr	r2, [sp, #4]
 8000d62:	0436      	lsls	r6, r6, #16
 8000d64:	4342      	muls	r2, r0
 8000d66:	0409      	lsls	r1, r1, #16
 8000d68:	0c36      	lsrs	r6, r6, #16
 8000d6a:	0003      	movs	r3, r0
 8000d6c:	430e      	orrs	r6, r1
 8000d6e:	42b2      	cmp	r2, r6
 8000d70:	d900      	bls.n	8000d74 <__aeabi_ddiv+0x20c>
 8000d72:	e153      	b.n	800101c <__aeabi_ddiv+0x4b4>
 8000d74:	9803      	ldr	r0, [sp, #12]
 8000d76:	1ab6      	subs	r6, r6, r2
 8000d78:	0002      	movs	r2, r0
 8000d7a:	042d      	lsls	r5, r5, #16
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	9f02      	ldr	r7, [sp, #8]
 8000d80:	042b      	lsls	r3, r5, #16
 8000d82:	0c1b      	lsrs	r3, r3, #16
 8000d84:	435a      	muls	r2, r3
 8000d86:	437b      	muls	r3, r7
 8000d88:	469c      	mov	ip, r3
 8000d8a:	0c29      	lsrs	r1, r5, #16
 8000d8c:	4348      	muls	r0, r1
 8000d8e:	0c13      	lsrs	r3, r2, #16
 8000d90:	4484      	add	ip, r0
 8000d92:	4463      	add	r3, ip
 8000d94:	4379      	muls	r1, r7
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d903      	bls.n	8000da2 <__aeabi_ddiv+0x23a>
 8000d9a:	2080      	movs	r0, #128	; 0x80
 8000d9c:	0240      	lsls	r0, r0, #9
 8000d9e:	4684      	mov	ip, r0
 8000da0:	4461      	add	r1, ip
 8000da2:	0c18      	lsrs	r0, r3, #16
 8000da4:	0412      	lsls	r2, r2, #16
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c12      	lsrs	r2, r2, #16
 8000daa:	1840      	adds	r0, r0, r1
 8000dac:	189b      	adds	r3, r3, r2
 8000dae:	4286      	cmp	r6, r0
 8000db0:	d200      	bcs.n	8000db4 <__aeabi_ddiv+0x24c>
 8000db2:	e100      	b.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000db4:	d100      	bne.n	8000db8 <__aeabi_ddiv+0x250>
 8000db6:	e0fb      	b.n	8000fb0 <__aeabi_ddiv+0x448>
 8000db8:	2301      	movs	r3, #1
 8000dba:	431d      	orrs	r5, r3
 8000dbc:	4b49      	ldr	r3, [pc, #292]	; (8000ee4 <__aeabi_ddiv+0x37c>)
 8000dbe:	445b      	add	r3, fp
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dc00      	bgt.n	8000dc6 <__aeabi_ddiv+0x25e>
 8000dc4:	e0aa      	b.n	8000f1c <__aeabi_ddiv+0x3b4>
 8000dc6:	076a      	lsls	r2, r5, #29
 8000dc8:	d000      	beq.n	8000dcc <__aeabi_ddiv+0x264>
 8000dca:	e13d      	b.n	8001048 <__aeabi_ddiv+0x4e0>
 8000dcc:	08e9      	lsrs	r1, r5, #3
 8000dce:	4642      	mov	r2, r8
 8000dd0:	01d2      	lsls	r2, r2, #7
 8000dd2:	d506      	bpl.n	8000de2 <__aeabi_ddiv+0x27a>
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <__aeabi_ddiv+0x380>)
 8000dd8:	401a      	ands	r2, r3
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	4690      	mov	r8, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	445b      	add	r3, fp
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <__aeabi_ddiv+0x384>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	dd00      	ble.n	8000dea <__aeabi_ddiv+0x282>
 8000de8:	e723      	b.n	8000c32 <__aeabi_ddiv+0xca>
 8000dea:	4642      	mov	r2, r8
 8000dec:	055b      	lsls	r3, r3, #21
 8000dee:	0755      	lsls	r5, r2, #29
 8000df0:	0252      	lsls	r2, r2, #9
 8000df2:	430d      	orrs	r5, r1
 8000df4:	0b12      	lsrs	r2, r2, #12
 8000df6:	0d5b      	lsrs	r3, r3, #21
 8000df8:	e70d      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000dfa:	4651      	mov	r1, sl
 8000dfc:	4321      	orrs	r1, r4
 8000dfe:	d100      	bne.n	8000e02 <__aeabi_ddiv+0x29a>
 8000e00:	e07c      	b.n	8000efc <__aeabi_ddiv+0x394>
 8000e02:	2c00      	cmp	r4, #0
 8000e04:	d100      	bne.n	8000e08 <__aeabi_ddiv+0x2a0>
 8000e06:	e0fb      	b.n	8001000 <__aeabi_ddiv+0x498>
 8000e08:	0020      	movs	r0, r4
 8000e0a:	f001 f995 	bl	8002138 <__clzsi2>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	3a0b      	subs	r2, #11
 8000e12:	231d      	movs	r3, #29
 8000e14:	1a9b      	subs	r3, r3, r2
 8000e16:	4652      	mov	r2, sl
 8000e18:	0001      	movs	r1, r0
 8000e1a:	40da      	lsrs	r2, r3
 8000e1c:	4653      	mov	r3, sl
 8000e1e:	3908      	subs	r1, #8
 8000e20:	408b      	lsls	r3, r1
 8000e22:	408c      	lsls	r4, r1
 8000e24:	0019      	movs	r1, r3
 8000e26:	4314      	orrs	r4, r2
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <__aeabi_ddiv+0x388>)
 8000e2a:	4458      	add	r0, fp
 8000e2c:	469b      	mov	fp, r3
 8000e2e:	4483      	add	fp, r0
 8000e30:	2000      	movs	r0, #0
 8000e32:	e6d9      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000e34:	0003      	movs	r3, r0
 8000e36:	4323      	orrs	r3, r4
 8000e38:	4698      	mov	r8, r3
 8000e3a:	d044      	beq.n	8000ec6 <__aeabi_ddiv+0x35e>
 8000e3c:	2c00      	cmp	r4, #0
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_ddiv+0x2da>
 8000e40:	e0cf      	b.n	8000fe2 <__aeabi_ddiv+0x47a>
 8000e42:	0020      	movs	r0, r4
 8000e44:	f001 f978 	bl	8002138 <__clzsi2>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	390b      	subs	r1, #11
 8000e4e:	231d      	movs	r3, #29
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	4649      	mov	r1, r9
 8000e54:	0010      	movs	r0, r2
 8000e56:	40d9      	lsrs	r1, r3
 8000e58:	3808      	subs	r0, #8
 8000e5a:	4084      	lsls	r4, r0
 8000e5c:	000b      	movs	r3, r1
 8000e5e:	464d      	mov	r5, r9
 8000e60:	4323      	orrs	r3, r4
 8000e62:	4698      	mov	r8, r3
 8000e64:	4085      	lsls	r5, r0
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <__aeabi_ddiv+0x38c>)
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	469b      	mov	fp, r3
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	e69e      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e74:	0002      	movs	r2, r0
 8000e76:	4322      	orrs	r2, r4
 8000e78:	4690      	mov	r8, r2
 8000e7a:	d11d      	bne.n	8000eb8 <__aeabi_ddiv+0x350>
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	469b      	mov	fp, r3
 8000e80:	2302      	movs	r3, #2
 8000e82:	2500      	movs	r5, #0
 8000e84:	4691      	mov	r9, r2
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	e693      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000e8a:	4651      	mov	r1, sl
 8000e8c:	4321      	orrs	r1, r4
 8000e8e:	d109      	bne.n	8000ea4 <__aeabi_ddiv+0x33c>
 8000e90:	2302      	movs	r3, #2
 8000e92:	464a      	mov	r2, r9
 8000e94:	431a      	orrs	r2, r3
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000e98:	4691      	mov	r9, r2
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	e6a1      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	464a      	mov	r2, r9
 8000ea8:	431a      	orrs	r2, r3
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <__aeabi_ddiv+0x390>)
 8000eac:	4691      	mov	r9, r2
 8000eae:	469c      	mov	ip, r3
 8000eb0:	4651      	mov	r1, sl
 8000eb2:	2003      	movs	r0, #3
 8000eb4:	44e3      	add	fp, ip
 8000eb6:	e697      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000eb8:	220c      	movs	r2, #12
 8000eba:	469b      	mov	fp, r3
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	46a0      	mov	r8, r4
 8000ec0:	4691      	mov	r9, r2
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	e675      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	4699      	mov	r9, r3
 8000eca:	2300      	movs	r3, #0
 8000ecc:	469b      	mov	fp, r3
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2500      	movs	r5, #0
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	e66d      	b.n	8000bb2 <__aeabi_ddiv+0x4a>
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	fffffc01 	.word	0xfffffc01
 8000ee0:	08007694 	.word	0x08007694
 8000ee4:	000003ff 	.word	0x000003ff
 8000ee8:	feffffff 	.word	0xfeffffff
 8000eec:	000007fe 	.word	0x000007fe
 8000ef0:	000003f3 	.word	0x000003f3
 8000ef4:	fffffc0d 	.word	0xfffffc0d
 8000ef8:	fffff801 	.word	0xfffff801
 8000efc:	464a      	mov	r2, r9
 8000efe:	2301      	movs	r3, #1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	4691      	mov	r9, r2
 8000f04:	2400      	movs	r4, #0
 8000f06:	2001      	movs	r0, #1
 8000f08:	e66e      	b.n	8000be8 <__aeabi_ddiv+0x80>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	469a      	mov	sl, r3
 8000f10:	2500      	movs	r5, #0
 8000f12:	4b88      	ldr	r3, [pc, #544]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f14:	0312      	lsls	r2, r2, #12
 8000f16:	e67e      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f18:	2501      	movs	r5, #1
 8000f1a:	426d      	negs	r5, r5
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	1ad2      	subs	r2, r2, r3
 8000f20:	2a38      	cmp	r2, #56	; 0x38
 8000f22:	dd00      	ble.n	8000f26 <__aeabi_ddiv+0x3be>
 8000f24:	e674      	b.n	8000c10 <__aeabi_ddiv+0xa8>
 8000f26:	2a1f      	cmp	r2, #31
 8000f28:	dc00      	bgt.n	8000f2c <__aeabi_ddiv+0x3c4>
 8000f2a:	e0bd      	b.n	80010a8 <__aeabi_ddiv+0x540>
 8000f2c:	211f      	movs	r1, #31
 8000f2e:	4249      	negs	r1, r1
 8000f30:	1acb      	subs	r3, r1, r3
 8000f32:	4641      	mov	r1, r8
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	000b      	movs	r3, r1
 8000f38:	2a20      	cmp	r2, #32
 8000f3a:	d004      	beq.n	8000f46 <__aeabi_ddiv+0x3de>
 8000f3c:	4641      	mov	r1, r8
 8000f3e:	4a7e      	ldr	r2, [pc, #504]	; (8001138 <__aeabi_ddiv+0x5d0>)
 8000f40:	445a      	add	r2, fp
 8000f42:	4091      	lsls	r1, r2
 8000f44:	430d      	orrs	r5, r1
 8000f46:	0029      	movs	r1, r5
 8000f48:	1e4a      	subs	r2, r1, #1
 8000f4a:	4191      	sbcs	r1, r2
 8000f4c:	4319      	orrs	r1, r3
 8000f4e:	2307      	movs	r3, #7
 8000f50:	001d      	movs	r5, r3
 8000f52:	2200      	movs	r2, #0
 8000f54:	400d      	ands	r5, r1
 8000f56:	420b      	tst	r3, r1
 8000f58:	d100      	bne.n	8000f5c <__aeabi_ddiv+0x3f4>
 8000f5a:	e0d0      	b.n	80010fe <__aeabi_ddiv+0x596>
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	2300      	movs	r3, #0
 8000f60:	400a      	ands	r2, r1
 8000f62:	2a04      	cmp	r2, #4
 8000f64:	d100      	bne.n	8000f68 <__aeabi_ddiv+0x400>
 8000f66:	e0c7      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f68:	1d0a      	adds	r2, r1, #4
 8000f6a:	428a      	cmp	r2, r1
 8000f6c:	4189      	sbcs	r1, r1
 8000f6e:	4249      	negs	r1, r1
 8000f70:	185b      	adds	r3, r3, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	021a      	lsls	r2, r3, #8
 8000f76:	d400      	bmi.n	8000f7a <__aeabi_ddiv+0x412>
 8000f78:	e0be      	b.n	80010f8 <__aeabi_ddiv+0x590>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2500      	movs	r5, #0
 8000f80:	e649      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	4643      	mov	r3, r8
 8000f86:	0312      	lsls	r2, r2, #12
 8000f88:	4213      	tst	r3, r2
 8000f8a:	d008      	beq.n	8000f9e <__aeabi_ddiv+0x436>
 8000f8c:	4214      	tst	r4, r2
 8000f8e:	d106      	bne.n	8000f9e <__aeabi_ddiv+0x436>
 8000f90:	4322      	orrs	r2, r4
 8000f92:	0312      	lsls	r2, r2, #12
 8000f94:	46ba      	mov	sl, r7
 8000f96:	000d      	movs	r5, r1
 8000f98:	4b66      	ldr	r3, [pc, #408]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000f9a:	0b12      	lsrs	r2, r2, #12
 8000f9c:	e63b      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000f9e:	2280      	movs	r2, #128	; 0x80
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	0312      	lsls	r2, r2, #12
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	0312      	lsls	r2, r2, #12
 8000fa8:	46b2      	mov	sl, r6
 8000faa:	4b62      	ldr	r3, [pc, #392]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8000fac:	0b12      	lsrs	r2, r2, #12
 8000fae:	e632      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_ddiv+0x44e>
 8000fb4:	e702      	b.n	8000dbc <__aeabi_ddiv+0x254>
 8000fb6:	19a6      	adds	r6, r4, r6
 8000fb8:	1e6a      	subs	r2, r5, #1
 8000fba:	42a6      	cmp	r6, r4
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x458>
 8000fbe:	e089      	b.n	80010d4 <__aeabi_ddiv+0x56c>
 8000fc0:	4286      	cmp	r6, r0
 8000fc2:	d200      	bcs.n	8000fc6 <__aeabi_ddiv+0x45e>
 8000fc4:	e09f      	b.n	8001106 <__aeabi_ddiv+0x59e>
 8000fc6:	d100      	bne.n	8000fca <__aeabi_ddiv+0x462>
 8000fc8:	e0af      	b.n	800112a <__aeabi_ddiv+0x5c2>
 8000fca:	0015      	movs	r5, r2
 8000fcc:	e6f4      	b.n	8000db8 <__aeabi_ddiv+0x250>
 8000fce:	42a9      	cmp	r1, r5
 8000fd0:	d900      	bls.n	8000fd4 <__aeabi_ddiv+0x46c>
 8000fd2:	e63c      	b.n	8000c4e <__aeabi_ddiv+0xe6>
 8000fd4:	4643      	mov	r3, r8
 8000fd6:	07de      	lsls	r6, r3, #31
 8000fd8:	0858      	lsrs	r0, r3, #1
 8000fda:	086b      	lsrs	r3, r5, #1
 8000fdc:	431e      	orrs	r6, r3
 8000fde:	07ed      	lsls	r5, r5, #31
 8000fe0:	e63c      	b.n	8000c5c <__aeabi_ddiv+0xf4>
 8000fe2:	f001 f8a9 	bl	8002138 <__clzsi2>
 8000fe6:	0001      	movs	r1, r0
 8000fe8:	0002      	movs	r2, r0
 8000fea:	3115      	adds	r1, #21
 8000fec:	3220      	adds	r2, #32
 8000fee:	291c      	cmp	r1, #28
 8000ff0:	dc00      	bgt.n	8000ff4 <__aeabi_ddiv+0x48c>
 8000ff2:	e72c      	b.n	8000e4e <__aeabi_ddiv+0x2e6>
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4083      	lsls	r3, r0
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	4698      	mov	r8, r3
 8000ffe:	e732      	b.n	8000e66 <__aeabi_ddiv+0x2fe>
 8001000:	f001 f89a 	bl	8002138 <__clzsi2>
 8001004:	0003      	movs	r3, r0
 8001006:	001a      	movs	r2, r3
 8001008:	3215      	adds	r2, #21
 800100a:	3020      	adds	r0, #32
 800100c:	2a1c      	cmp	r2, #28
 800100e:	dc00      	bgt.n	8001012 <__aeabi_ddiv+0x4aa>
 8001010:	e6ff      	b.n	8000e12 <__aeabi_ddiv+0x2aa>
 8001012:	4654      	mov	r4, sl
 8001014:	3b08      	subs	r3, #8
 8001016:	2100      	movs	r1, #0
 8001018:	409c      	lsls	r4, r3
 800101a:	e705      	b.n	8000e28 <__aeabi_ddiv+0x2c0>
 800101c:	1936      	adds	r6, r6, r4
 800101e:	3b01      	subs	r3, #1
 8001020:	42b4      	cmp	r4, r6
 8001022:	d900      	bls.n	8001026 <__aeabi_ddiv+0x4be>
 8001024:	e6a6      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001026:	42b2      	cmp	r2, r6
 8001028:	d800      	bhi.n	800102c <__aeabi_ddiv+0x4c4>
 800102a:	e6a3      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 800102c:	1e83      	subs	r3, r0, #2
 800102e:	1936      	adds	r6, r6, r4
 8001030:	e6a0      	b.n	8000d74 <__aeabi_ddiv+0x20c>
 8001032:	1909      	adds	r1, r1, r4
 8001034:	3d01      	subs	r5, #1
 8001036:	428c      	cmp	r4, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x4d4>
 800103a:	e68d      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 800103c:	428a      	cmp	r2, r1
 800103e:	d800      	bhi.n	8001042 <__aeabi_ddiv+0x4da>
 8001040:	e68a      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001042:	1e85      	subs	r5, r0, #2
 8001044:	1909      	adds	r1, r1, r4
 8001046:	e687      	b.n	8000d58 <__aeabi_ddiv+0x1f0>
 8001048:	220f      	movs	r2, #15
 800104a:	402a      	ands	r2, r5
 800104c:	2a04      	cmp	r2, #4
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x4ea>
 8001050:	e6bc      	b.n	8000dcc <__aeabi_ddiv+0x264>
 8001052:	1d29      	adds	r1, r5, #4
 8001054:	42a9      	cmp	r1, r5
 8001056:	41ad      	sbcs	r5, r5
 8001058:	426d      	negs	r5, r5
 800105a:	08c9      	lsrs	r1, r1, #3
 800105c:	44a8      	add	r8, r5
 800105e:	e6b6      	b.n	8000dce <__aeabi_ddiv+0x266>
 8001060:	42af      	cmp	r7, r5
 8001062:	d900      	bls.n	8001066 <__aeabi_ddiv+0x4fe>
 8001064:	e662      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001066:	4281      	cmp	r1, r0
 8001068:	d804      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 800106a:	d000      	beq.n	800106e <__aeabi_ddiv+0x506>
 800106c:	e65e      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 800106e:	42ae      	cmp	r6, r5
 8001070:	d800      	bhi.n	8001074 <__aeabi_ddiv+0x50c>
 8001072:	e65b      	b.n	8000d2c <__aeabi_ddiv+0x1c4>
 8001074:	2302      	movs	r3, #2
 8001076:	425b      	negs	r3, r3
 8001078:	469c      	mov	ip, r3
 800107a:	9b00      	ldr	r3, [sp, #0]
 800107c:	44e0      	add	r8, ip
 800107e:	469c      	mov	ip, r3
 8001080:	4465      	add	r5, ip
 8001082:	429d      	cmp	r5, r3
 8001084:	419b      	sbcs	r3, r3
 8001086:	425b      	negs	r3, r3
 8001088:	191b      	adds	r3, r3, r4
 800108a:	18c0      	adds	r0, r0, r3
 800108c:	e64f      	b.n	8000d2e <__aeabi_ddiv+0x1c6>
 800108e:	42b2      	cmp	r2, r6
 8001090:	d800      	bhi.n	8001094 <__aeabi_ddiv+0x52c>
 8001092:	e612      	b.n	8000cba <__aeabi_ddiv+0x152>
 8001094:	1e83      	subs	r3, r0, #2
 8001096:	1936      	adds	r6, r6, r4
 8001098:	e60f      	b.n	8000cba <__aeabi_ddiv+0x152>
 800109a:	428a      	cmp	r2, r1
 800109c:	d800      	bhi.n	80010a0 <__aeabi_ddiv+0x538>
 800109e:	e5fa      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a0:	1e83      	subs	r3, r0, #2
 80010a2:	4698      	mov	r8, r3
 80010a4:	1909      	adds	r1, r1, r4
 80010a6:	e5f6      	b.n	8000c96 <__aeabi_ddiv+0x12e>
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <__aeabi_ddiv+0x5d4>)
 80010aa:	0028      	movs	r0, r5
 80010ac:	445b      	add	r3, fp
 80010ae:	4641      	mov	r1, r8
 80010b0:	409d      	lsls	r5, r3
 80010b2:	4099      	lsls	r1, r3
 80010b4:	40d0      	lsrs	r0, r2
 80010b6:	1e6b      	subs	r3, r5, #1
 80010b8:	419d      	sbcs	r5, r3
 80010ba:	4643      	mov	r3, r8
 80010bc:	4301      	orrs	r1, r0
 80010be:	4329      	orrs	r1, r5
 80010c0:	40d3      	lsrs	r3, r2
 80010c2:	074a      	lsls	r2, r1, #29
 80010c4:	d100      	bne.n	80010c8 <__aeabi_ddiv+0x560>
 80010c6:	e755      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010c8:	220f      	movs	r2, #15
 80010ca:	400a      	ands	r2, r1
 80010cc:	2a04      	cmp	r2, #4
 80010ce:	d000      	beq.n	80010d2 <__aeabi_ddiv+0x56a>
 80010d0:	e74a      	b.n	8000f68 <__aeabi_ddiv+0x400>
 80010d2:	e74f      	b.n	8000f74 <__aeabi_ddiv+0x40c>
 80010d4:	0015      	movs	r5, r2
 80010d6:	4286      	cmp	r6, r0
 80010d8:	d000      	beq.n	80010dc <__aeabi_ddiv+0x574>
 80010da:	e66d      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010dc:	9a00      	ldr	r2, [sp, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d000      	beq.n	80010e4 <__aeabi_ddiv+0x57c>
 80010e2:	e669      	b.n	8000db8 <__aeabi_ddiv+0x250>
 80010e4:	e66a      	b.n	8000dbc <__aeabi_ddiv+0x254>
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <__aeabi_ddiv+0x5d8>)
 80010e8:	445b      	add	r3, fp
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc00      	bgt.n	80010f0 <__aeabi_ddiv+0x588>
 80010ee:	e713      	b.n	8000f18 <__aeabi_ddiv+0x3b0>
 80010f0:	2501      	movs	r5, #1
 80010f2:	2100      	movs	r1, #0
 80010f4:	44a8      	add	r8, r5
 80010f6:	e66a      	b.n	8000dce <__aeabi_ddiv+0x266>
 80010f8:	075d      	lsls	r5, r3, #29
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	0b1a      	lsrs	r2, r3, #12
 80010fe:	08c9      	lsrs	r1, r1, #3
 8001100:	2300      	movs	r3, #0
 8001102:	430d      	orrs	r5, r1
 8001104:	e587      	b.n	8000c16 <__aeabi_ddiv+0xae>
 8001106:	9900      	ldr	r1, [sp, #0]
 8001108:	3d02      	subs	r5, #2
 800110a:	004a      	lsls	r2, r1, #1
 800110c:	428a      	cmp	r2, r1
 800110e:	41bf      	sbcs	r7, r7
 8001110:	427f      	negs	r7, r7
 8001112:	193f      	adds	r7, r7, r4
 8001114:	19f6      	adds	r6, r6, r7
 8001116:	9200      	str	r2, [sp, #0]
 8001118:	e7dd      	b.n	80010d6 <__aeabi_ddiv+0x56e>
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	4643      	mov	r3, r8
 800111e:	0312      	lsls	r2, r2, #12
 8001120:	431a      	orrs	r2, r3
 8001122:	0312      	lsls	r2, r2, #12
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <__aeabi_ddiv+0x5cc>)
 8001126:	0b12      	lsrs	r2, r2, #12
 8001128:	e575      	b.n	8000c16 <__aeabi_ddiv+0xae>
 800112a:	9900      	ldr	r1, [sp, #0]
 800112c:	4299      	cmp	r1, r3
 800112e:	d3ea      	bcc.n	8001106 <__aeabi_ddiv+0x59e>
 8001130:	0015      	movs	r5, r2
 8001132:	e7d3      	b.n	80010dc <__aeabi_ddiv+0x574>
 8001134:	000007ff 	.word	0x000007ff
 8001138:	0000043e 	.word	0x0000043e
 800113c:	0000041e 	.word	0x0000041e
 8001140:	000003ff 	.word	0x000003ff

08001144 <__eqdf2>:
 8001144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001146:	464e      	mov	r6, r9
 8001148:	4645      	mov	r5, r8
 800114a:	46de      	mov	lr, fp
 800114c:	4657      	mov	r7, sl
 800114e:	4690      	mov	r8, r2
 8001150:	b5e0      	push	{r5, r6, r7, lr}
 8001152:	0017      	movs	r7, r2
 8001154:	031a      	lsls	r2, r3, #12
 8001156:	0b12      	lsrs	r2, r2, #12
 8001158:	0005      	movs	r5, r0
 800115a:	4684      	mov	ip, r0
 800115c:	4819      	ldr	r0, [pc, #100]	; (80011c4 <__eqdf2+0x80>)
 800115e:	030e      	lsls	r6, r1, #12
 8001160:	004c      	lsls	r4, r1, #1
 8001162:	4691      	mov	r9, r2
 8001164:	005a      	lsls	r2, r3, #1
 8001166:	0fdb      	lsrs	r3, r3, #31
 8001168:	469b      	mov	fp, r3
 800116a:	0b36      	lsrs	r6, r6, #12
 800116c:	0d64      	lsrs	r4, r4, #21
 800116e:	0fc9      	lsrs	r1, r1, #31
 8001170:	0d52      	lsrs	r2, r2, #21
 8001172:	4284      	cmp	r4, r0
 8001174:	d019      	beq.n	80011aa <__eqdf2+0x66>
 8001176:	4282      	cmp	r2, r0
 8001178:	d010      	beq.n	800119c <__eqdf2+0x58>
 800117a:	2001      	movs	r0, #1
 800117c:	4294      	cmp	r4, r2
 800117e:	d10e      	bne.n	800119e <__eqdf2+0x5a>
 8001180:	454e      	cmp	r6, r9
 8001182:	d10c      	bne.n	800119e <__eqdf2+0x5a>
 8001184:	2001      	movs	r0, #1
 8001186:	45c4      	cmp	ip, r8
 8001188:	d109      	bne.n	800119e <__eqdf2+0x5a>
 800118a:	4559      	cmp	r1, fp
 800118c:	d017      	beq.n	80011be <__eqdf2+0x7a>
 800118e:	2c00      	cmp	r4, #0
 8001190:	d105      	bne.n	800119e <__eqdf2+0x5a>
 8001192:	0030      	movs	r0, r6
 8001194:	4328      	orrs	r0, r5
 8001196:	1e43      	subs	r3, r0, #1
 8001198:	4198      	sbcs	r0, r3
 800119a:	e000      	b.n	800119e <__eqdf2+0x5a>
 800119c:	2001      	movs	r0, #1
 800119e:	bcf0      	pop	{r4, r5, r6, r7}
 80011a0:	46bb      	mov	fp, r7
 80011a2:	46b2      	mov	sl, r6
 80011a4:	46a9      	mov	r9, r5
 80011a6:	46a0      	mov	r8, r4
 80011a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011aa:	0033      	movs	r3, r6
 80011ac:	2001      	movs	r0, #1
 80011ae:	432b      	orrs	r3, r5
 80011b0:	d1f5      	bne.n	800119e <__eqdf2+0x5a>
 80011b2:	42a2      	cmp	r2, r4
 80011b4:	d1f3      	bne.n	800119e <__eqdf2+0x5a>
 80011b6:	464b      	mov	r3, r9
 80011b8:	433b      	orrs	r3, r7
 80011ba:	d1f0      	bne.n	800119e <__eqdf2+0x5a>
 80011bc:	e7e2      	b.n	8001184 <__eqdf2+0x40>
 80011be:	2000      	movs	r0, #0
 80011c0:	e7ed      	b.n	800119e <__eqdf2+0x5a>
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	000007ff 	.word	0x000007ff

080011c8 <__gedf2>:
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	4647      	mov	r7, r8
 80011cc:	46ce      	mov	lr, r9
 80011ce:	0004      	movs	r4, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	0016      	movs	r6, r2
 80011d4:	031b      	lsls	r3, r3, #12
 80011d6:	0b1b      	lsrs	r3, r3, #12
 80011d8:	4d2d      	ldr	r5, [pc, #180]	; (8001290 <__gedf2+0xc8>)
 80011da:	004a      	lsls	r2, r1, #1
 80011dc:	4699      	mov	r9, r3
 80011de:	b580      	push	{r7, lr}
 80011e0:	0043      	lsls	r3, r0, #1
 80011e2:	030f      	lsls	r7, r1, #12
 80011e4:	46a4      	mov	ip, r4
 80011e6:	46b0      	mov	r8, r6
 80011e8:	0b3f      	lsrs	r7, r7, #12
 80011ea:	0d52      	lsrs	r2, r2, #21
 80011ec:	0fc9      	lsrs	r1, r1, #31
 80011ee:	0d5b      	lsrs	r3, r3, #21
 80011f0:	0fc0      	lsrs	r0, r0, #31
 80011f2:	42aa      	cmp	r2, r5
 80011f4:	d021      	beq.n	800123a <__gedf2+0x72>
 80011f6:	42ab      	cmp	r3, r5
 80011f8:	d013      	beq.n	8001222 <__gedf2+0x5a>
 80011fa:	2a00      	cmp	r2, #0
 80011fc:	d122      	bne.n	8001244 <__gedf2+0x7c>
 80011fe:	433c      	orrs	r4, r7
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <__gedf2+0x42>
 8001204:	464d      	mov	r5, r9
 8001206:	432e      	orrs	r6, r5
 8001208:	d022      	beq.n	8001250 <__gedf2+0x88>
 800120a:	2c00      	cmp	r4, #0
 800120c:	d010      	beq.n	8001230 <__gedf2+0x68>
 800120e:	4281      	cmp	r1, r0
 8001210:	d022      	beq.n	8001258 <__gedf2+0x90>
 8001212:	2002      	movs	r0, #2
 8001214:	3901      	subs	r1, #1
 8001216:	4008      	ands	r0, r1
 8001218:	3801      	subs	r0, #1
 800121a:	bcc0      	pop	{r6, r7}
 800121c:	46b9      	mov	r9, r7
 800121e:	46b0      	mov	r8, r6
 8001220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001222:	464d      	mov	r5, r9
 8001224:	432e      	orrs	r6, r5
 8001226:	d129      	bne.n	800127c <__gedf2+0xb4>
 8001228:	2a00      	cmp	r2, #0
 800122a:	d1f0      	bne.n	800120e <__gedf2+0x46>
 800122c:	433c      	orrs	r4, r7
 800122e:	d1ee      	bne.n	800120e <__gedf2+0x46>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1f2      	bne.n	800121a <__gedf2+0x52>
 8001234:	2001      	movs	r0, #1
 8001236:	4240      	negs	r0, r0
 8001238:	e7ef      	b.n	800121a <__gedf2+0x52>
 800123a:	003d      	movs	r5, r7
 800123c:	4325      	orrs	r5, r4
 800123e:	d11d      	bne.n	800127c <__gedf2+0xb4>
 8001240:	4293      	cmp	r3, r2
 8001242:	d0ee      	beq.n	8001222 <__gedf2+0x5a>
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e2      	bne.n	800120e <__gedf2+0x46>
 8001248:	464c      	mov	r4, r9
 800124a:	4326      	orrs	r6, r4
 800124c:	d1df      	bne.n	800120e <__gedf2+0x46>
 800124e:	e7e0      	b.n	8001212 <__gedf2+0x4a>
 8001250:	2000      	movs	r0, #0
 8001252:	2c00      	cmp	r4, #0
 8001254:	d0e1      	beq.n	800121a <__gedf2+0x52>
 8001256:	e7dc      	b.n	8001212 <__gedf2+0x4a>
 8001258:	429a      	cmp	r2, r3
 800125a:	dc0a      	bgt.n	8001272 <__gedf2+0xaa>
 800125c:	dbe8      	blt.n	8001230 <__gedf2+0x68>
 800125e:	454f      	cmp	r7, r9
 8001260:	d8d7      	bhi.n	8001212 <__gedf2+0x4a>
 8001262:	d00e      	beq.n	8001282 <__gedf2+0xba>
 8001264:	2000      	movs	r0, #0
 8001266:	454f      	cmp	r7, r9
 8001268:	d2d7      	bcs.n	800121a <__gedf2+0x52>
 800126a:	2900      	cmp	r1, #0
 800126c:	d0e2      	beq.n	8001234 <__gedf2+0x6c>
 800126e:	0008      	movs	r0, r1
 8001270:	e7d3      	b.n	800121a <__gedf2+0x52>
 8001272:	4243      	negs	r3, r0
 8001274:	4158      	adcs	r0, r3
 8001276:	0040      	lsls	r0, r0, #1
 8001278:	3801      	subs	r0, #1
 800127a:	e7ce      	b.n	800121a <__gedf2+0x52>
 800127c:	2002      	movs	r0, #2
 800127e:	4240      	negs	r0, r0
 8001280:	e7cb      	b.n	800121a <__gedf2+0x52>
 8001282:	45c4      	cmp	ip, r8
 8001284:	d8c5      	bhi.n	8001212 <__gedf2+0x4a>
 8001286:	2000      	movs	r0, #0
 8001288:	45c4      	cmp	ip, r8
 800128a:	d2c6      	bcs.n	800121a <__gedf2+0x52>
 800128c:	e7ed      	b.n	800126a <__gedf2+0xa2>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff

08001294 <__ledf2>:
 8001294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001296:	4647      	mov	r7, r8
 8001298:	46ce      	mov	lr, r9
 800129a:	0004      	movs	r4, r0
 800129c:	0018      	movs	r0, r3
 800129e:	0016      	movs	r6, r2
 80012a0:	031b      	lsls	r3, r3, #12
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	4d2c      	ldr	r5, [pc, #176]	; (8001358 <__ledf2+0xc4>)
 80012a6:	004a      	lsls	r2, r1, #1
 80012a8:	4699      	mov	r9, r3
 80012aa:	b580      	push	{r7, lr}
 80012ac:	0043      	lsls	r3, r0, #1
 80012ae:	030f      	lsls	r7, r1, #12
 80012b0:	46a4      	mov	ip, r4
 80012b2:	46b0      	mov	r8, r6
 80012b4:	0b3f      	lsrs	r7, r7, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0fc9      	lsrs	r1, r1, #31
 80012ba:	0d5b      	lsrs	r3, r3, #21
 80012bc:	0fc0      	lsrs	r0, r0, #31
 80012be:	42aa      	cmp	r2, r5
 80012c0:	d00d      	beq.n	80012de <__ledf2+0x4a>
 80012c2:	42ab      	cmp	r3, r5
 80012c4:	d010      	beq.n	80012e8 <__ledf2+0x54>
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d127      	bne.n	800131a <__ledf2+0x86>
 80012ca:	433c      	orrs	r4, r7
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d111      	bne.n	80012f4 <__ledf2+0x60>
 80012d0:	464d      	mov	r5, r9
 80012d2:	432e      	orrs	r6, r5
 80012d4:	d10e      	bne.n	80012f4 <__ledf2+0x60>
 80012d6:	2000      	movs	r0, #0
 80012d8:	2c00      	cmp	r4, #0
 80012da:	d015      	beq.n	8001308 <__ledf2+0x74>
 80012dc:	e00e      	b.n	80012fc <__ledf2+0x68>
 80012de:	003d      	movs	r5, r7
 80012e0:	4325      	orrs	r5, r4
 80012e2:	d110      	bne.n	8001306 <__ledf2+0x72>
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d118      	bne.n	800131a <__ledf2+0x86>
 80012e8:	464d      	mov	r5, r9
 80012ea:	432e      	orrs	r6, r5
 80012ec:	d10b      	bne.n	8001306 <__ledf2+0x72>
 80012ee:	2a00      	cmp	r2, #0
 80012f0:	d102      	bne.n	80012f8 <__ledf2+0x64>
 80012f2:	433c      	orrs	r4, r7
 80012f4:	2c00      	cmp	r4, #0
 80012f6:	d00b      	beq.n	8001310 <__ledf2+0x7c>
 80012f8:	4281      	cmp	r1, r0
 80012fa:	d014      	beq.n	8001326 <__ledf2+0x92>
 80012fc:	2002      	movs	r0, #2
 80012fe:	3901      	subs	r1, #1
 8001300:	4008      	ands	r0, r1
 8001302:	3801      	subs	r0, #1
 8001304:	e000      	b.n	8001308 <__ledf2+0x74>
 8001306:	2002      	movs	r0, #2
 8001308:	bcc0      	pop	{r6, r7}
 800130a:	46b9      	mov	r9, r7
 800130c:	46b0      	mov	r8, r6
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f9      	bne.n	8001308 <__ledf2+0x74>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7f6      	b.n	8001308 <__ledf2+0x74>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ec      	bne.n	80012f8 <__ledf2+0x64>
 800131e:	464c      	mov	r4, r9
 8001320:	4326      	orrs	r6, r4
 8001322:	d1e9      	bne.n	80012f8 <__ledf2+0x64>
 8001324:	e7ea      	b.n	80012fc <__ledf2+0x68>
 8001326:	429a      	cmp	r2, r3
 8001328:	dd04      	ble.n	8001334 <__ledf2+0xa0>
 800132a:	4243      	negs	r3, r0
 800132c:	4158      	adcs	r0, r3
 800132e:	0040      	lsls	r0, r0, #1
 8001330:	3801      	subs	r0, #1
 8001332:	e7e9      	b.n	8001308 <__ledf2+0x74>
 8001334:	429a      	cmp	r2, r3
 8001336:	dbeb      	blt.n	8001310 <__ledf2+0x7c>
 8001338:	454f      	cmp	r7, r9
 800133a:	d8df      	bhi.n	80012fc <__ledf2+0x68>
 800133c:	d006      	beq.n	800134c <__ledf2+0xb8>
 800133e:	2000      	movs	r0, #0
 8001340:	454f      	cmp	r7, r9
 8001342:	d2e1      	bcs.n	8001308 <__ledf2+0x74>
 8001344:	2900      	cmp	r1, #0
 8001346:	d0e5      	beq.n	8001314 <__ledf2+0x80>
 8001348:	0008      	movs	r0, r1
 800134a:	e7dd      	b.n	8001308 <__ledf2+0x74>
 800134c:	45c4      	cmp	ip, r8
 800134e:	d8d5      	bhi.n	80012fc <__ledf2+0x68>
 8001350:	2000      	movs	r0, #0
 8001352:	45c4      	cmp	ip, r8
 8001354:	d2d8      	bcs.n	8001308 <__ledf2+0x74>
 8001356:	e7f5      	b.n	8001344 <__ledf2+0xb0>
 8001358:	000007ff 	.word	0x000007ff

0800135c <__aeabi_dmul>:
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	4645      	mov	r5, r8
 8001360:	46de      	mov	lr, fp
 8001362:	4657      	mov	r7, sl
 8001364:	464e      	mov	r6, r9
 8001366:	b5e0      	push	{r5, r6, r7, lr}
 8001368:	001f      	movs	r7, r3
 800136a:	030b      	lsls	r3, r1, #12
 800136c:	0b1b      	lsrs	r3, r3, #12
 800136e:	469b      	mov	fp, r3
 8001370:	004d      	lsls	r5, r1, #1
 8001372:	0fcb      	lsrs	r3, r1, #31
 8001374:	0004      	movs	r4, r0
 8001376:	4691      	mov	r9, r2
 8001378:	4698      	mov	r8, r3
 800137a:	b087      	sub	sp, #28
 800137c:	0d6d      	lsrs	r5, r5, #21
 800137e:	d100      	bne.n	8001382 <__aeabi_dmul+0x26>
 8001380:	e1cd      	b.n	800171e <__aeabi_dmul+0x3c2>
 8001382:	4bce      	ldr	r3, [pc, #824]	; (80016bc <__aeabi_dmul+0x360>)
 8001384:	429d      	cmp	r5, r3
 8001386:	d100      	bne.n	800138a <__aeabi_dmul+0x2e>
 8001388:	e1e9      	b.n	800175e <__aeabi_dmul+0x402>
 800138a:	465a      	mov	r2, fp
 800138c:	0f43      	lsrs	r3, r0, #29
 800138e:	00d2      	lsls	r2, r2, #3
 8001390:	4313      	orrs	r3, r2
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0412      	lsls	r2, r2, #16
 8001396:	431a      	orrs	r2, r3
 8001398:	00c3      	lsls	r3, r0, #3
 800139a:	469a      	mov	sl, r3
 800139c:	4bc8      	ldr	r3, [pc, #800]	; (80016c0 <__aeabi_dmul+0x364>)
 800139e:	4693      	mov	fp, r2
 80013a0:	469c      	mov	ip, r3
 80013a2:	2300      	movs	r3, #0
 80013a4:	2600      	movs	r6, #0
 80013a6:	4465      	add	r5, ip
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	033c      	lsls	r4, r7, #12
 80013ac:	007b      	lsls	r3, r7, #1
 80013ae:	4648      	mov	r0, r9
 80013b0:	0b24      	lsrs	r4, r4, #12
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fff      	lsrs	r7, r7, #31
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d100      	bne.n	80013bc <__aeabi_dmul+0x60>
 80013ba:	e189      	b.n	80016d0 <__aeabi_dmul+0x374>
 80013bc:	4abf      	ldr	r2, [pc, #764]	; (80016bc <__aeabi_dmul+0x360>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d019      	beq.n	80013f6 <__aeabi_dmul+0x9a>
 80013c2:	0f42      	lsrs	r2, r0, #29
 80013c4:	00e4      	lsls	r4, r4, #3
 80013c6:	4322      	orrs	r2, r4
 80013c8:	2480      	movs	r4, #128	; 0x80
 80013ca:	0424      	lsls	r4, r4, #16
 80013cc:	4314      	orrs	r4, r2
 80013ce:	4abc      	ldr	r2, [pc, #752]	; (80016c0 <__aeabi_dmul+0x364>)
 80013d0:	2100      	movs	r1, #0
 80013d2:	4694      	mov	ip, r2
 80013d4:	4642      	mov	r2, r8
 80013d6:	4463      	add	r3, ip
 80013d8:	195b      	adds	r3, r3, r5
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	9b01      	ldr	r3, [sp, #4]
 80013de:	407a      	eors	r2, r7
 80013e0:	3301      	adds	r3, #1
 80013e2:	00c0      	lsls	r0, r0, #3
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	2e0a      	cmp	r6, #10
 80013ea:	dd1c      	ble.n	8001426 <__aeabi_dmul+0xca>
 80013ec:	003a      	movs	r2, r7
 80013ee:	2e0b      	cmp	r6, #11
 80013f0:	d05e      	beq.n	80014b0 <__aeabi_dmul+0x154>
 80013f2:	4647      	mov	r7, r8
 80013f4:	e056      	b.n	80014a4 <__aeabi_dmul+0x148>
 80013f6:	4649      	mov	r1, r9
 80013f8:	4bb0      	ldr	r3, [pc, #704]	; (80016bc <__aeabi_dmul+0x360>)
 80013fa:	4321      	orrs	r1, r4
 80013fc:	18eb      	adds	r3, r5, r3
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2900      	cmp	r1, #0
 8001402:	d12a      	bne.n	800145a <__aeabi_dmul+0xfe>
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	2202      	movs	r2, #2
 8001408:	0100      	lsls	r0, r0, #4
 800140a:	002b      	movs	r3, r5
 800140c:	4684      	mov	ip, r0
 800140e:	4316      	orrs	r6, r2
 8001410:	4642      	mov	r2, r8
 8001412:	4463      	add	r3, ip
 8001414:	407a      	eors	r2, r7
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	2e0a      	cmp	r6, #10
 800141c:	dd00      	ble.n	8001420 <__aeabi_dmul+0xc4>
 800141e:	e231      	b.n	8001884 <__aeabi_dmul+0x528>
 8001420:	2000      	movs	r0, #0
 8001422:	2400      	movs	r4, #0
 8001424:	2102      	movs	r1, #2
 8001426:	2e02      	cmp	r6, #2
 8001428:	dc26      	bgt.n	8001478 <__aeabi_dmul+0x11c>
 800142a:	3e01      	subs	r6, #1
 800142c:	2e01      	cmp	r6, #1
 800142e:	d852      	bhi.n	80014d6 <__aeabi_dmul+0x17a>
 8001430:	2902      	cmp	r1, #2
 8001432:	d04c      	beq.n	80014ce <__aeabi_dmul+0x172>
 8001434:	2901      	cmp	r1, #1
 8001436:	d000      	beq.n	800143a <__aeabi_dmul+0xde>
 8001438:	e118      	b.n	800166c <__aeabi_dmul+0x310>
 800143a:	2300      	movs	r3, #0
 800143c:	2400      	movs	r4, #0
 800143e:	2500      	movs	r5, #0
 8001440:	051b      	lsls	r3, r3, #20
 8001442:	4323      	orrs	r3, r4
 8001444:	07d2      	lsls	r2, r2, #31
 8001446:	4313      	orrs	r3, r2
 8001448:	0028      	movs	r0, r5
 800144a:	0019      	movs	r1, r3
 800144c:	b007      	add	sp, #28
 800144e:	bcf0      	pop	{r4, r5, r6, r7}
 8001450:	46bb      	mov	fp, r7
 8001452:	46b2      	mov	sl, r6
 8001454:	46a9      	mov	r9, r5
 8001456:	46a0      	mov	r8, r4
 8001458:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	2203      	movs	r2, #3
 800145e:	0109      	lsls	r1, r1, #4
 8001460:	002b      	movs	r3, r5
 8001462:	468c      	mov	ip, r1
 8001464:	4316      	orrs	r6, r2
 8001466:	4642      	mov	r2, r8
 8001468:	4463      	add	r3, ip
 800146a:	407a      	eors	r2, r7
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2e0a      	cmp	r6, #10
 8001472:	dd00      	ble.n	8001476 <__aeabi_dmul+0x11a>
 8001474:	e228      	b.n	80018c8 <__aeabi_dmul+0x56c>
 8001476:	2103      	movs	r1, #3
 8001478:	2501      	movs	r5, #1
 800147a:	40b5      	lsls	r5, r6
 800147c:	46ac      	mov	ip, r5
 800147e:	26a6      	movs	r6, #166	; 0xa6
 8001480:	4663      	mov	r3, ip
 8001482:	00f6      	lsls	r6, r6, #3
 8001484:	4035      	ands	r5, r6
 8001486:	4233      	tst	r3, r6
 8001488:	d10b      	bne.n	80014a2 <__aeabi_dmul+0x146>
 800148a:	2690      	movs	r6, #144	; 0x90
 800148c:	00b6      	lsls	r6, r6, #2
 800148e:	4233      	tst	r3, r6
 8001490:	d118      	bne.n	80014c4 <__aeabi_dmul+0x168>
 8001492:	3eb9      	subs	r6, #185	; 0xb9
 8001494:	3eff      	subs	r6, #255	; 0xff
 8001496:	421e      	tst	r6, r3
 8001498:	d01d      	beq.n	80014d6 <__aeabi_dmul+0x17a>
 800149a:	46a3      	mov	fp, r4
 800149c:	4682      	mov	sl, r0
 800149e:	9100      	str	r1, [sp, #0]
 80014a0:	e000      	b.n	80014a4 <__aeabi_dmul+0x148>
 80014a2:	0017      	movs	r7, r2
 80014a4:	9900      	ldr	r1, [sp, #0]
 80014a6:	003a      	movs	r2, r7
 80014a8:	2902      	cmp	r1, #2
 80014aa:	d010      	beq.n	80014ce <__aeabi_dmul+0x172>
 80014ac:	465c      	mov	r4, fp
 80014ae:	4650      	mov	r0, sl
 80014b0:	2903      	cmp	r1, #3
 80014b2:	d1bf      	bne.n	8001434 <__aeabi_dmul+0xd8>
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	031b      	lsls	r3, r3, #12
 80014b8:	431c      	orrs	r4, r3
 80014ba:	0324      	lsls	r4, r4, #12
 80014bc:	0005      	movs	r5, r0
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <__aeabi_dmul+0x360>)
 80014c0:	0b24      	lsrs	r4, r4, #12
 80014c2:	e7bd      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014c4:	2480      	movs	r4, #128	; 0x80
 80014c6:	2200      	movs	r2, #0
 80014c8:	4b7c      	ldr	r3, [pc, #496]	; (80016bc <__aeabi_dmul+0x360>)
 80014ca:	0324      	lsls	r4, r4, #12
 80014cc:	e7b8      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014ce:	2400      	movs	r4, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <__aeabi_dmul+0x360>)
 80014d4:	e7b4      	b.n	8001440 <__aeabi_dmul+0xe4>
 80014d6:	4653      	mov	r3, sl
 80014d8:	041e      	lsls	r6, r3, #16
 80014da:	0c36      	lsrs	r6, r6, #16
 80014dc:	0c1f      	lsrs	r7, r3, #16
 80014de:	0033      	movs	r3, r6
 80014e0:	0c01      	lsrs	r1, r0, #16
 80014e2:	0400      	lsls	r0, r0, #16
 80014e4:	0c00      	lsrs	r0, r0, #16
 80014e6:	4343      	muls	r3, r0
 80014e8:	4698      	mov	r8, r3
 80014ea:	0003      	movs	r3, r0
 80014ec:	437b      	muls	r3, r7
 80014ee:	4699      	mov	r9, r3
 80014f0:	0033      	movs	r3, r6
 80014f2:	434b      	muls	r3, r1
 80014f4:	469c      	mov	ip, r3
 80014f6:	4643      	mov	r3, r8
 80014f8:	000d      	movs	r5, r1
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	469a      	mov	sl, r3
 80014fe:	437d      	muls	r5, r7
 8001500:	44cc      	add	ip, r9
 8001502:	44d4      	add	ip, sl
 8001504:	9500      	str	r5, [sp, #0]
 8001506:	45e1      	cmp	r9, ip
 8001508:	d904      	bls.n	8001514 <__aeabi_dmul+0x1b8>
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	025b      	lsls	r3, r3, #9
 800150e:	4699      	mov	r9, r3
 8001510:	444d      	add	r5, r9
 8001512:	9500      	str	r5, [sp, #0]
 8001514:	4663      	mov	r3, ip
 8001516:	0c1b      	lsrs	r3, r3, #16
 8001518:	001d      	movs	r5, r3
 800151a:	4663      	mov	r3, ip
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	469c      	mov	ip, r3
 8001520:	4643      	mov	r3, r8
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	0c1b      	lsrs	r3, r3, #16
 8001526:	4698      	mov	r8, r3
 8001528:	4663      	mov	r3, ip
 800152a:	4443      	add	r3, r8
 800152c:	9303      	str	r3, [sp, #12]
 800152e:	0c23      	lsrs	r3, r4, #16
 8001530:	4698      	mov	r8, r3
 8001532:	0033      	movs	r3, r6
 8001534:	0424      	lsls	r4, r4, #16
 8001536:	0c24      	lsrs	r4, r4, #16
 8001538:	4363      	muls	r3, r4
 800153a:	469c      	mov	ip, r3
 800153c:	0023      	movs	r3, r4
 800153e:	437b      	muls	r3, r7
 8001540:	4699      	mov	r9, r3
 8001542:	4643      	mov	r3, r8
 8001544:	435e      	muls	r6, r3
 8001546:	435f      	muls	r7, r3
 8001548:	444e      	add	r6, r9
 800154a:	4663      	mov	r3, ip
 800154c:	46b2      	mov	sl, r6
 800154e:	0c1e      	lsrs	r6, r3, #16
 8001550:	4456      	add	r6, sl
 8001552:	45b1      	cmp	r9, r6
 8001554:	d903      	bls.n	800155e <__aeabi_dmul+0x202>
 8001556:	2380      	movs	r3, #128	; 0x80
 8001558:	025b      	lsls	r3, r3, #9
 800155a:	4699      	mov	r9, r3
 800155c:	444f      	add	r7, r9
 800155e:	0c33      	lsrs	r3, r6, #16
 8001560:	4699      	mov	r9, r3
 8001562:	003b      	movs	r3, r7
 8001564:	444b      	add	r3, r9
 8001566:	9305      	str	r3, [sp, #20]
 8001568:	4663      	mov	r3, ip
 800156a:	46ac      	mov	ip, r5
 800156c:	041f      	lsls	r7, r3, #16
 800156e:	0c3f      	lsrs	r7, r7, #16
 8001570:	0436      	lsls	r6, r6, #16
 8001572:	19f6      	adds	r6, r6, r7
 8001574:	44b4      	add	ip, r6
 8001576:	4663      	mov	r3, ip
 8001578:	9304      	str	r3, [sp, #16]
 800157a:	465b      	mov	r3, fp
 800157c:	0c1b      	lsrs	r3, r3, #16
 800157e:	469c      	mov	ip, r3
 8001580:	465b      	mov	r3, fp
 8001582:	041f      	lsls	r7, r3, #16
 8001584:	0c3f      	lsrs	r7, r7, #16
 8001586:	003b      	movs	r3, r7
 8001588:	4343      	muls	r3, r0
 800158a:	4699      	mov	r9, r3
 800158c:	4663      	mov	r3, ip
 800158e:	4343      	muls	r3, r0
 8001590:	469a      	mov	sl, r3
 8001592:	464b      	mov	r3, r9
 8001594:	4660      	mov	r0, ip
 8001596:	0c1b      	lsrs	r3, r3, #16
 8001598:	469b      	mov	fp, r3
 800159a:	4348      	muls	r0, r1
 800159c:	4379      	muls	r1, r7
 800159e:	4451      	add	r1, sl
 80015a0:	4459      	add	r1, fp
 80015a2:	458a      	cmp	sl, r1
 80015a4:	d903      	bls.n	80015ae <__aeabi_dmul+0x252>
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	469a      	mov	sl, r3
 80015ac:	4450      	add	r0, sl
 80015ae:	0c0b      	lsrs	r3, r1, #16
 80015b0:	469a      	mov	sl, r3
 80015b2:	464b      	mov	r3, r9
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	0c1b      	lsrs	r3, r3, #16
 80015b8:	4699      	mov	r9, r3
 80015ba:	003b      	movs	r3, r7
 80015bc:	4363      	muls	r3, r4
 80015be:	0409      	lsls	r1, r1, #16
 80015c0:	4645      	mov	r5, r8
 80015c2:	4449      	add	r1, r9
 80015c4:	4699      	mov	r9, r3
 80015c6:	4663      	mov	r3, ip
 80015c8:	435c      	muls	r4, r3
 80015ca:	436b      	muls	r3, r5
 80015cc:	469c      	mov	ip, r3
 80015ce:	464b      	mov	r3, r9
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	4698      	mov	r8, r3
 80015d4:	436f      	muls	r7, r5
 80015d6:	193f      	adds	r7, r7, r4
 80015d8:	4447      	add	r7, r8
 80015da:	4450      	add	r0, sl
 80015dc:	42bc      	cmp	r4, r7
 80015de:	d903      	bls.n	80015e8 <__aeabi_dmul+0x28c>
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4698      	mov	r8, r3
 80015e6:	44c4      	add	ip, r8
 80015e8:	9b04      	ldr	r3, [sp, #16]
 80015ea:	9d00      	ldr	r5, [sp, #0]
 80015ec:	4698      	mov	r8, r3
 80015ee:	4445      	add	r5, r8
 80015f0:	42b5      	cmp	r5, r6
 80015f2:	41b6      	sbcs	r6, r6
 80015f4:	4273      	negs	r3, r6
 80015f6:	4698      	mov	r8, r3
 80015f8:	464b      	mov	r3, r9
 80015fa:	041e      	lsls	r6, r3, #16
 80015fc:	9b05      	ldr	r3, [sp, #20]
 80015fe:	043c      	lsls	r4, r7, #16
 8001600:	4699      	mov	r9, r3
 8001602:	0c36      	lsrs	r6, r6, #16
 8001604:	19a4      	adds	r4, r4, r6
 8001606:	444c      	add	r4, r9
 8001608:	46a1      	mov	r9, r4
 800160a:	4683      	mov	fp, r0
 800160c:	186e      	adds	r6, r5, r1
 800160e:	44c1      	add	r9, r8
 8001610:	428e      	cmp	r6, r1
 8001612:	4189      	sbcs	r1, r1
 8001614:	44cb      	add	fp, r9
 8001616:	465d      	mov	r5, fp
 8001618:	4249      	negs	r1, r1
 800161a:	186d      	adds	r5, r5, r1
 800161c:	429c      	cmp	r4, r3
 800161e:	41a4      	sbcs	r4, r4
 8001620:	45c1      	cmp	r9, r8
 8001622:	419b      	sbcs	r3, r3
 8001624:	4583      	cmp	fp, r0
 8001626:	4180      	sbcs	r0, r0
 8001628:	428d      	cmp	r5, r1
 800162a:	4189      	sbcs	r1, r1
 800162c:	425b      	negs	r3, r3
 800162e:	4264      	negs	r4, r4
 8001630:	431c      	orrs	r4, r3
 8001632:	4240      	negs	r0, r0
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	4249      	negs	r1, r1
 8001638:	4301      	orrs	r1, r0
 800163a:	0270      	lsls	r0, r6, #9
 800163c:	0c3f      	lsrs	r7, r7, #16
 800163e:	4318      	orrs	r0, r3
 8001640:	19e4      	adds	r4, r4, r7
 8001642:	1e47      	subs	r7, r0, #1
 8001644:	41b8      	sbcs	r0, r7
 8001646:	1864      	adds	r4, r4, r1
 8001648:	4464      	add	r4, ip
 800164a:	0df6      	lsrs	r6, r6, #23
 800164c:	0261      	lsls	r1, r4, #9
 800164e:	4330      	orrs	r0, r6
 8001650:	0dec      	lsrs	r4, r5, #23
 8001652:	026e      	lsls	r6, r5, #9
 8001654:	430c      	orrs	r4, r1
 8001656:	4330      	orrs	r0, r6
 8001658:	01c9      	lsls	r1, r1, #7
 800165a:	d400      	bmi.n	800165e <__aeabi_dmul+0x302>
 800165c:	e0f1      	b.n	8001842 <__aeabi_dmul+0x4e6>
 800165e:	2101      	movs	r1, #1
 8001660:	0843      	lsrs	r3, r0, #1
 8001662:	4001      	ands	r1, r0
 8001664:	430b      	orrs	r3, r1
 8001666:	07e0      	lsls	r0, r4, #31
 8001668:	4318      	orrs	r0, r3
 800166a:	0864      	lsrs	r4, r4, #1
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <__aeabi_dmul+0x368>)
 800166e:	9b02      	ldr	r3, [sp, #8]
 8001670:	468c      	mov	ip, r1
 8001672:	4463      	add	r3, ip
 8001674:	2b00      	cmp	r3, #0
 8001676:	dc00      	bgt.n	800167a <__aeabi_dmul+0x31e>
 8001678:	e097      	b.n	80017aa <__aeabi_dmul+0x44e>
 800167a:	0741      	lsls	r1, r0, #29
 800167c:	d009      	beq.n	8001692 <__aeabi_dmul+0x336>
 800167e:	210f      	movs	r1, #15
 8001680:	4001      	ands	r1, r0
 8001682:	2904      	cmp	r1, #4
 8001684:	d005      	beq.n	8001692 <__aeabi_dmul+0x336>
 8001686:	1d01      	adds	r1, r0, #4
 8001688:	4281      	cmp	r1, r0
 800168a:	4180      	sbcs	r0, r0
 800168c:	4240      	negs	r0, r0
 800168e:	1824      	adds	r4, r4, r0
 8001690:	0008      	movs	r0, r1
 8001692:	01e1      	lsls	r1, r4, #7
 8001694:	d506      	bpl.n	80016a4 <__aeabi_dmul+0x348>
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	468c      	mov	ip, r1
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <__aeabi_dmul+0x36c>)
 800169e:	401c      	ands	r4, r3
 80016a0:	9b02      	ldr	r3, [sp, #8]
 80016a2:	4463      	add	r3, ip
 80016a4:	4909      	ldr	r1, [pc, #36]	; (80016cc <__aeabi_dmul+0x370>)
 80016a6:	428b      	cmp	r3, r1
 80016a8:	dd00      	ble.n	80016ac <__aeabi_dmul+0x350>
 80016aa:	e710      	b.n	80014ce <__aeabi_dmul+0x172>
 80016ac:	0761      	lsls	r1, r4, #29
 80016ae:	08c5      	lsrs	r5, r0, #3
 80016b0:	0264      	lsls	r4, r4, #9
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	430d      	orrs	r5, r1
 80016b6:	0b24      	lsrs	r4, r4, #12
 80016b8:	0d5b      	lsrs	r3, r3, #21
 80016ba:	e6c1      	b.n	8001440 <__aeabi_dmul+0xe4>
 80016bc:	000007ff 	.word	0x000007ff
 80016c0:	fffffc01 	.word	0xfffffc01
 80016c4:	000003ff 	.word	0x000003ff
 80016c8:	feffffff 	.word	0xfeffffff
 80016cc:	000007fe 	.word	0x000007fe
 80016d0:	464b      	mov	r3, r9
 80016d2:	4323      	orrs	r3, r4
 80016d4:	d059      	beq.n	800178a <__aeabi_dmul+0x42e>
 80016d6:	2c00      	cmp	r4, #0
 80016d8:	d100      	bne.n	80016dc <__aeabi_dmul+0x380>
 80016da:	e0a3      	b.n	8001824 <__aeabi_dmul+0x4c8>
 80016dc:	0020      	movs	r0, r4
 80016de:	f000 fd2b 	bl	8002138 <__clzsi2>
 80016e2:	0001      	movs	r1, r0
 80016e4:	0003      	movs	r3, r0
 80016e6:	390b      	subs	r1, #11
 80016e8:	221d      	movs	r2, #29
 80016ea:	1a52      	subs	r2, r2, r1
 80016ec:	4649      	mov	r1, r9
 80016ee:	0018      	movs	r0, r3
 80016f0:	40d1      	lsrs	r1, r2
 80016f2:	464a      	mov	r2, r9
 80016f4:	3808      	subs	r0, #8
 80016f6:	4082      	lsls	r2, r0
 80016f8:	4084      	lsls	r4, r0
 80016fa:	0010      	movs	r0, r2
 80016fc:	430c      	orrs	r4, r1
 80016fe:	4a74      	ldr	r2, [pc, #464]	; (80018d0 <__aeabi_dmul+0x574>)
 8001700:	1aeb      	subs	r3, r5, r3
 8001702:	4694      	mov	ip, r2
 8001704:	4642      	mov	r2, r8
 8001706:	4463      	add	r3, ip
 8001708:	9301      	str	r3, [sp, #4]
 800170a:	9b01      	ldr	r3, [sp, #4]
 800170c:	407a      	eors	r2, r7
 800170e:	3301      	adds	r3, #1
 8001710:	2100      	movs	r1, #0
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2e0a      	cmp	r6, #10
 8001718:	dd00      	ble.n	800171c <__aeabi_dmul+0x3c0>
 800171a:	e667      	b.n	80013ec <__aeabi_dmul+0x90>
 800171c:	e683      	b.n	8001426 <__aeabi_dmul+0xca>
 800171e:	465b      	mov	r3, fp
 8001720:	4303      	orrs	r3, r0
 8001722:	469a      	mov	sl, r3
 8001724:	d02a      	beq.n	800177c <__aeabi_dmul+0x420>
 8001726:	465b      	mov	r3, fp
 8001728:	2b00      	cmp	r3, #0
 800172a:	d06d      	beq.n	8001808 <__aeabi_dmul+0x4ac>
 800172c:	4658      	mov	r0, fp
 800172e:	f000 fd03 	bl	8002138 <__clzsi2>
 8001732:	0001      	movs	r1, r0
 8001734:	0003      	movs	r3, r0
 8001736:	390b      	subs	r1, #11
 8001738:	221d      	movs	r2, #29
 800173a:	1a52      	subs	r2, r2, r1
 800173c:	0021      	movs	r1, r4
 800173e:	0018      	movs	r0, r3
 8001740:	465d      	mov	r5, fp
 8001742:	40d1      	lsrs	r1, r2
 8001744:	3808      	subs	r0, #8
 8001746:	4085      	lsls	r5, r0
 8001748:	000a      	movs	r2, r1
 800174a:	4084      	lsls	r4, r0
 800174c:	432a      	orrs	r2, r5
 800174e:	4693      	mov	fp, r2
 8001750:	46a2      	mov	sl, r4
 8001752:	4d5f      	ldr	r5, [pc, #380]	; (80018d0 <__aeabi_dmul+0x574>)
 8001754:	2600      	movs	r6, #0
 8001756:	1aed      	subs	r5, r5, r3
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	e625      	b.n	80013aa <__aeabi_dmul+0x4e>
 800175e:	465b      	mov	r3, fp
 8001760:	4303      	orrs	r3, r0
 8001762:	469a      	mov	sl, r3
 8001764:	d105      	bne.n	8001772 <__aeabi_dmul+0x416>
 8001766:	2300      	movs	r3, #0
 8001768:	469b      	mov	fp, r3
 800176a:	3302      	adds	r3, #2
 800176c:	2608      	movs	r6, #8
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	e61b      	b.n	80013aa <__aeabi_dmul+0x4e>
 8001772:	2303      	movs	r3, #3
 8001774:	4682      	mov	sl, r0
 8001776:	260c      	movs	r6, #12
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	e616      	b.n	80013aa <__aeabi_dmul+0x4e>
 800177c:	2300      	movs	r3, #0
 800177e:	469b      	mov	fp, r3
 8001780:	3301      	adds	r3, #1
 8001782:	2604      	movs	r6, #4
 8001784:	2500      	movs	r5, #0
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	e60f      	b.n	80013aa <__aeabi_dmul+0x4e>
 800178a:	4642      	mov	r2, r8
 800178c:	3301      	adds	r3, #1
 800178e:	9501      	str	r5, [sp, #4]
 8001790:	431e      	orrs	r6, r3
 8001792:	9b01      	ldr	r3, [sp, #4]
 8001794:	407a      	eors	r2, r7
 8001796:	3301      	adds	r3, #1
 8001798:	2400      	movs	r4, #0
 800179a:	2000      	movs	r0, #0
 800179c:	2101      	movs	r1, #1
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2e0a      	cmp	r6, #10
 80017a4:	dd00      	ble.n	80017a8 <__aeabi_dmul+0x44c>
 80017a6:	e621      	b.n	80013ec <__aeabi_dmul+0x90>
 80017a8:	e63d      	b.n	8001426 <__aeabi_dmul+0xca>
 80017aa:	2101      	movs	r1, #1
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	2938      	cmp	r1, #56	; 0x38
 80017b0:	dd00      	ble.n	80017b4 <__aeabi_dmul+0x458>
 80017b2:	e642      	b.n	800143a <__aeabi_dmul+0xde>
 80017b4:	291f      	cmp	r1, #31
 80017b6:	dd47      	ble.n	8001848 <__aeabi_dmul+0x4ec>
 80017b8:	261f      	movs	r6, #31
 80017ba:	0025      	movs	r5, r4
 80017bc:	4276      	negs	r6, r6
 80017be:	1af3      	subs	r3, r6, r3
 80017c0:	40dd      	lsrs	r5, r3
 80017c2:	002b      	movs	r3, r5
 80017c4:	2920      	cmp	r1, #32
 80017c6:	d005      	beq.n	80017d4 <__aeabi_dmul+0x478>
 80017c8:	4942      	ldr	r1, [pc, #264]	; (80018d4 <__aeabi_dmul+0x578>)
 80017ca:	9d02      	ldr	r5, [sp, #8]
 80017cc:	468c      	mov	ip, r1
 80017ce:	4465      	add	r5, ip
 80017d0:	40ac      	lsls	r4, r5
 80017d2:	4320      	orrs	r0, r4
 80017d4:	1e41      	subs	r1, r0, #1
 80017d6:	4188      	sbcs	r0, r1
 80017d8:	4318      	orrs	r0, r3
 80017da:	2307      	movs	r3, #7
 80017dc:	001d      	movs	r5, r3
 80017de:	2400      	movs	r4, #0
 80017e0:	4005      	ands	r5, r0
 80017e2:	4203      	tst	r3, r0
 80017e4:	d04a      	beq.n	800187c <__aeabi_dmul+0x520>
 80017e6:	230f      	movs	r3, #15
 80017e8:	2400      	movs	r4, #0
 80017ea:	4003      	ands	r3, r0
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d042      	beq.n	8001876 <__aeabi_dmul+0x51a>
 80017f0:	1d03      	adds	r3, r0, #4
 80017f2:	4283      	cmp	r3, r0
 80017f4:	4180      	sbcs	r0, r0
 80017f6:	4240      	negs	r0, r0
 80017f8:	1824      	adds	r4, r4, r0
 80017fa:	0018      	movs	r0, r3
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d53a      	bpl.n	8001876 <__aeabi_dmul+0x51a>
 8001800:	2301      	movs	r3, #1
 8001802:	2400      	movs	r4, #0
 8001804:	2500      	movs	r5, #0
 8001806:	e61b      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001808:	f000 fc96 	bl	8002138 <__clzsi2>
 800180c:	0001      	movs	r1, r0
 800180e:	0003      	movs	r3, r0
 8001810:	3115      	adds	r1, #21
 8001812:	3320      	adds	r3, #32
 8001814:	291c      	cmp	r1, #28
 8001816:	dd8f      	ble.n	8001738 <__aeabi_dmul+0x3dc>
 8001818:	3808      	subs	r0, #8
 800181a:	2200      	movs	r2, #0
 800181c:	4084      	lsls	r4, r0
 800181e:	4692      	mov	sl, r2
 8001820:	46a3      	mov	fp, r4
 8001822:	e796      	b.n	8001752 <__aeabi_dmul+0x3f6>
 8001824:	f000 fc88 	bl	8002138 <__clzsi2>
 8001828:	0001      	movs	r1, r0
 800182a:	0003      	movs	r3, r0
 800182c:	3115      	adds	r1, #21
 800182e:	3320      	adds	r3, #32
 8001830:	291c      	cmp	r1, #28
 8001832:	dc00      	bgt.n	8001836 <__aeabi_dmul+0x4da>
 8001834:	e758      	b.n	80016e8 <__aeabi_dmul+0x38c>
 8001836:	0002      	movs	r2, r0
 8001838:	464c      	mov	r4, r9
 800183a:	3a08      	subs	r2, #8
 800183c:	2000      	movs	r0, #0
 800183e:	4094      	lsls	r4, r2
 8001840:	e75d      	b.n	80016fe <__aeabi_dmul+0x3a2>
 8001842:	9b01      	ldr	r3, [sp, #4]
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_dmul+0x310>
 8001848:	4b23      	ldr	r3, [pc, #140]	; (80018d8 <__aeabi_dmul+0x57c>)
 800184a:	0026      	movs	r6, r4
 800184c:	469c      	mov	ip, r3
 800184e:	0003      	movs	r3, r0
 8001850:	9d02      	ldr	r5, [sp, #8]
 8001852:	40cb      	lsrs	r3, r1
 8001854:	4465      	add	r5, ip
 8001856:	40ae      	lsls	r6, r5
 8001858:	431e      	orrs	r6, r3
 800185a:	0003      	movs	r3, r0
 800185c:	40ab      	lsls	r3, r5
 800185e:	1e58      	subs	r0, r3, #1
 8001860:	4183      	sbcs	r3, r0
 8001862:	0030      	movs	r0, r6
 8001864:	4318      	orrs	r0, r3
 8001866:	40cc      	lsrs	r4, r1
 8001868:	0743      	lsls	r3, r0, #29
 800186a:	d0c7      	beq.n	80017fc <__aeabi_dmul+0x4a0>
 800186c:	230f      	movs	r3, #15
 800186e:	4003      	ands	r3, r0
 8001870:	2b04      	cmp	r3, #4
 8001872:	d1bd      	bne.n	80017f0 <__aeabi_dmul+0x494>
 8001874:	e7c2      	b.n	80017fc <__aeabi_dmul+0x4a0>
 8001876:	0765      	lsls	r5, r4, #29
 8001878:	0264      	lsls	r4, r4, #9
 800187a:	0b24      	lsrs	r4, r4, #12
 800187c:	08c0      	lsrs	r0, r0, #3
 800187e:	2300      	movs	r3, #0
 8001880:	4305      	orrs	r5, r0
 8001882:	e5dd      	b.n	8001440 <__aeabi_dmul+0xe4>
 8001884:	2500      	movs	r5, #0
 8001886:	2302      	movs	r3, #2
 8001888:	2e0f      	cmp	r6, #15
 800188a:	d10c      	bne.n	80018a6 <__aeabi_dmul+0x54a>
 800188c:	2480      	movs	r4, #128	; 0x80
 800188e:	465b      	mov	r3, fp
 8001890:	0324      	lsls	r4, r4, #12
 8001892:	4223      	tst	r3, r4
 8001894:	d00e      	beq.n	80018b4 <__aeabi_dmul+0x558>
 8001896:	4221      	tst	r1, r4
 8001898:	d10c      	bne.n	80018b4 <__aeabi_dmul+0x558>
 800189a:	430c      	orrs	r4, r1
 800189c:	0324      	lsls	r4, r4, #12
 800189e:	003a      	movs	r2, r7
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <__aeabi_dmul+0x580>)
 80018a2:	0b24      	lsrs	r4, r4, #12
 80018a4:	e5cc      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018a6:	2e0b      	cmp	r6, #11
 80018a8:	d000      	beq.n	80018ac <__aeabi_dmul+0x550>
 80018aa:	e5a2      	b.n	80013f2 <__aeabi_dmul+0x96>
 80018ac:	468b      	mov	fp, r1
 80018ae:	46aa      	mov	sl, r5
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	e5f7      	b.n	80014a4 <__aeabi_dmul+0x148>
 80018b4:	2480      	movs	r4, #128	; 0x80
 80018b6:	465b      	mov	r3, fp
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	431c      	orrs	r4, r3
 80018bc:	0324      	lsls	r4, r4, #12
 80018be:	4642      	mov	r2, r8
 80018c0:	4655      	mov	r5, sl
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <__aeabi_dmul+0x580>)
 80018c4:	0b24      	lsrs	r4, r4, #12
 80018c6:	e5bb      	b.n	8001440 <__aeabi_dmul+0xe4>
 80018c8:	464d      	mov	r5, r9
 80018ca:	0021      	movs	r1, r4
 80018cc:	2303      	movs	r3, #3
 80018ce:	e7db      	b.n	8001888 <__aeabi_dmul+0x52c>
 80018d0:	fffffc0d 	.word	0xfffffc0d
 80018d4:	0000043e 	.word	0x0000043e
 80018d8:	0000041e 	.word	0x0000041e
 80018dc:	000007ff 	.word	0x000007ff

080018e0 <__aeabi_dsub>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4657      	mov	r7, sl
 80018e4:	464e      	mov	r6, r9
 80018e6:	4645      	mov	r5, r8
 80018e8:	46de      	mov	lr, fp
 80018ea:	b5e0      	push	{r5, r6, r7, lr}
 80018ec:	000d      	movs	r5, r1
 80018ee:	0004      	movs	r4, r0
 80018f0:	0019      	movs	r1, r3
 80018f2:	0010      	movs	r0, r2
 80018f4:	032b      	lsls	r3, r5, #12
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	0f62      	lsrs	r2, r4, #29
 80018fa:	431a      	orrs	r2, r3
 80018fc:	00e3      	lsls	r3, r4, #3
 80018fe:	030c      	lsls	r4, r1, #12
 8001900:	0a64      	lsrs	r4, r4, #9
 8001902:	0f47      	lsrs	r7, r0, #29
 8001904:	4327      	orrs	r7, r4
 8001906:	4cd0      	ldr	r4, [pc, #832]	; (8001c48 <__aeabi_dsub+0x368>)
 8001908:	006e      	lsls	r6, r5, #1
 800190a:	4691      	mov	r9, r2
 800190c:	b083      	sub	sp, #12
 800190e:	004a      	lsls	r2, r1, #1
 8001910:	00c0      	lsls	r0, r0, #3
 8001912:	4698      	mov	r8, r3
 8001914:	46a2      	mov	sl, r4
 8001916:	0d76      	lsrs	r6, r6, #21
 8001918:	0fed      	lsrs	r5, r5, #31
 800191a:	0d52      	lsrs	r2, r2, #21
 800191c:	0fc9      	lsrs	r1, r1, #31
 800191e:	9001      	str	r0, [sp, #4]
 8001920:	42a2      	cmp	r2, r4
 8001922:	d100      	bne.n	8001926 <__aeabi_dsub+0x46>
 8001924:	e0b9      	b.n	8001a9a <__aeabi_dsub+0x1ba>
 8001926:	2401      	movs	r4, #1
 8001928:	4061      	eors	r1, r4
 800192a:	468b      	mov	fp, r1
 800192c:	428d      	cmp	r5, r1
 800192e:	d100      	bne.n	8001932 <__aeabi_dsub+0x52>
 8001930:	e08d      	b.n	8001a4e <__aeabi_dsub+0x16e>
 8001932:	1ab4      	subs	r4, r6, r2
 8001934:	46a4      	mov	ip, r4
 8001936:	2c00      	cmp	r4, #0
 8001938:	dc00      	bgt.n	800193c <__aeabi_dsub+0x5c>
 800193a:	e0b7      	b.n	8001aac <__aeabi_dsub+0x1cc>
 800193c:	2a00      	cmp	r2, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dsub+0x62>
 8001940:	e0cb      	b.n	8001ada <__aeabi_dsub+0x1fa>
 8001942:	4ac1      	ldr	r2, [pc, #772]	; (8001c48 <__aeabi_dsub+0x368>)
 8001944:	4296      	cmp	r6, r2
 8001946:	d100      	bne.n	800194a <__aeabi_dsub+0x6a>
 8001948:	e186      	b.n	8001c58 <__aeabi_dsub+0x378>
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	4317      	orrs	r7, r2
 8001950:	4662      	mov	r2, ip
 8001952:	2a38      	cmp	r2, #56	; 0x38
 8001954:	dd00      	ble.n	8001958 <__aeabi_dsub+0x78>
 8001956:	e1a4      	b.n	8001ca2 <__aeabi_dsub+0x3c2>
 8001958:	2a1f      	cmp	r2, #31
 800195a:	dd00      	ble.n	800195e <__aeabi_dsub+0x7e>
 800195c:	e21d      	b.n	8001d9a <__aeabi_dsub+0x4ba>
 800195e:	4661      	mov	r1, ip
 8001960:	2220      	movs	r2, #32
 8001962:	003c      	movs	r4, r7
 8001964:	1a52      	subs	r2, r2, r1
 8001966:	0001      	movs	r1, r0
 8001968:	4090      	lsls	r0, r2
 800196a:	4094      	lsls	r4, r2
 800196c:	1e42      	subs	r2, r0, #1
 800196e:	4190      	sbcs	r0, r2
 8001970:	4662      	mov	r2, ip
 8001972:	46a0      	mov	r8, r4
 8001974:	4664      	mov	r4, ip
 8001976:	40d7      	lsrs	r7, r2
 8001978:	464a      	mov	r2, r9
 800197a:	40e1      	lsrs	r1, r4
 800197c:	4644      	mov	r4, r8
 800197e:	1bd2      	subs	r2, r2, r7
 8001980:	4691      	mov	r9, r2
 8001982:	430c      	orrs	r4, r1
 8001984:	4304      	orrs	r4, r0
 8001986:	1b1c      	subs	r4, r3, r4
 8001988:	42a3      	cmp	r3, r4
 800198a:	4192      	sbcs	r2, r2
 800198c:	464b      	mov	r3, r9
 800198e:	4252      	negs	r2, r2
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469a      	mov	sl, r3
 8001994:	4653      	mov	r3, sl
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	d400      	bmi.n	800199c <__aeabi_dsub+0xbc>
 800199a:	e12b      	b.n	8001bf4 <__aeabi_dsub+0x314>
 800199c:	4653      	mov	r3, sl
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	0a53      	lsrs	r3, r2, #9
 80019a2:	469a      	mov	sl, r3
 80019a4:	4653      	mov	r3, sl
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <__aeabi_dsub+0xcc>
 80019aa:	e166      	b.n	8001c7a <__aeabi_dsub+0x39a>
 80019ac:	4650      	mov	r0, sl
 80019ae:	f000 fbc3 	bl	8002138 <__clzsi2>
 80019b2:	0003      	movs	r3, r0
 80019b4:	3b08      	subs	r3, #8
 80019b6:	2220      	movs	r2, #32
 80019b8:	0020      	movs	r0, r4
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	4651      	mov	r1, sl
 80019be:	40d0      	lsrs	r0, r2
 80019c0:	4099      	lsls	r1, r3
 80019c2:	0002      	movs	r2, r0
 80019c4:	409c      	lsls	r4, r3
 80019c6:	430a      	orrs	r2, r1
 80019c8:	429e      	cmp	r6, r3
 80019ca:	dd00      	ble.n	80019ce <__aeabi_dsub+0xee>
 80019cc:	e164      	b.n	8001c98 <__aeabi_dsub+0x3b8>
 80019ce:	1b9b      	subs	r3, r3, r6
 80019d0:	1c59      	adds	r1, r3, #1
 80019d2:	291f      	cmp	r1, #31
 80019d4:	dd00      	ble.n	80019d8 <__aeabi_dsub+0xf8>
 80019d6:	e0fe      	b.n	8001bd6 <__aeabi_dsub+0x2f6>
 80019d8:	2320      	movs	r3, #32
 80019da:	0010      	movs	r0, r2
 80019dc:	0026      	movs	r6, r4
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	409c      	lsls	r4, r3
 80019e2:	4098      	lsls	r0, r3
 80019e4:	40ce      	lsrs	r6, r1
 80019e6:	40ca      	lsrs	r2, r1
 80019e8:	1e63      	subs	r3, r4, #1
 80019ea:	419c      	sbcs	r4, r3
 80019ec:	4330      	orrs	r0, r6
 80019ee:	4692      	mov	sl, r2
 80019f0:	2600      	movs	r6, #0
 80019f2:	4304      	orrs	r4, r0
 80019f4:	0763      	lsls	r3, r4, #29
 80019f6:	d009      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 80019f8:	230f      	movs	r3, #15
 80019fa:	4023      	ands	r3, r4
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d005      	beq.n	8001a0c <__aeabi_dsub+0x12c>
 8001a00:	1d23      	adds	r3, r4, #4
 8001a02:	42a3      	cmp	r3, r4
 8001a04:	41a4      	sbcs	r4, r4
 8001a06:	4264      	negs	r4, r4
 8001a08:	44a2      	add	sl, r4
 8001a0a:	001c      	movs	r4, r3
 8001a0c:	4653      	mov	r3, sl
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	d400      	bmi.n	8001a14 <__aeabi_dsub+0x134>
 8001a12:	e0f2      	b.n	8001bfa <__aeabi_dsub+0x31a>
 8001a14:	4b8c      	ldr	r3, [pc, #560]	; (8001c48 <__aeabi_dsub+0x368>)
 8001a16:	3601      	adds	r6, #1
 8001a18:	429e      	cmp	r6, r3
 8001a1a:	d100      	bne.n	8001a1e <__aeabi_dsub+0x13e>
 8001a1c:	e10f      	b.n	8001c3e <__aeabi_dsub+0x35e>
 8001a1e:	4653      	mov	r3, sl
 8001a20:	498a      	ldr	r1, [pc, #552]	; (8001c4c <__aeabi_dsub+0x36c>)
 8001a22:	08e4      	lsrs	r4, r4, #3
 8001a24:	400b      	ands	r3, r1
 8001a26:	0019      	movs	r1, r3
 8001a28:	075b      	lsls	r3, r3, #29
 8001a2a:	4323      	orrs	r3, r4
 8001a2c:	0572      	lsls	r2, r6, #21
 8001a2e:	024c      	lsls	r4, r1, #9
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	0d52      	lsrs	r2, r2, #21
 8001a34:	0512      	lsls	r2, r2, #20
 8001a36:	4322      	orrs	r2, r4
 8001a38:	07ed      	lsls	r5, r5, #31
 8001a3a:	432a      	orrs	r2, r5
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	0011      	movs	r1, r2
 8001a40:	b003      	add	sp, #12
 8001a42:	bcf0      	pop	{r4, r5, r6, r7}
 8001a44:	46bb      	mov	fp, r7
 8001a46:	46b2      	mov	sl, r6
 8001a48:	46a9      	mov	r9, r5
 8001a4a:	46a0      	mov	r8, r4
 8001a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4e:	1ab4      	subs	r4, r6, r2
 8001a50:	46a4      	mov	ip, r4
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	dd59      	ble.n	8001b0a <__aeabi_dsub+0x22a>
 8001a56:	2a00      	cmp	r2, #0
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dsub+0x17c>
 8001a5a:	e0b0      	b.n	8001bbe <__aeabi_dsub+0x2de>
 8001a5c:	4556      	cmp	r6, sl
 8001a5e:	d100      	bne.n	8001a62 <__aeabi_dsub+0x182>
 8001a60:	e0fa      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	0412      	lsls	r2, r2, #16
 8001a66:	4317      	orrs	r7, r2
 8001a68:	4662      	mov	r2, ip
 8001a6a:	2a38      	cmp	r2, #56	; 0x38
 8001a6c:	dd00      	ble.n	8001a70 <__aeabi_dsub+0x190>
 8001a6e:	e0d4      	b.n	8001c1a <__aeabi_dsub+0x33a>
 8001a70:	2a1f      	cmp	r2, #31
 8001a72:	dc00      	bgt.n	8001a76 <__aeabi_dsub+0x196>
 8001a74:	e1c0      	b.n	8001df8 <__aeabi_dsub+0x518>
 8001a76:	0039      	movs	r1, r7
 8001a78:	3a20      	subs	r2, #32
 8001a7a:	40d1      	lsrs	r1, r2
 8001a7c:	4662      	mov	r2, ip
 8001a7e:	2a20      	cmp	r2, #32
 8001a80:	d006      	beq.n	8001a90 <__aeabi_dsub+0x1b0>
 8001a82:	4664      	mov	r4, ip
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	1b12      	subs	r2, r2, r4
 8001a88:	003c      	movs	r4, r7
 8001a8a:	4094      	lsls	r4, r2
 8001a8c:	4304      	orrs	r4, r0
 8001a8e:	9401      	str	r4, [sp, #4]
 8001a90:	9c01      	ldr	r4, [sp, #4]
 8001a92:	1e62      	subs	r2, r4, #1
 8001a94:	4194      	sbcs	r4, r2
 8001a96:	430c      	orrs	r4, r1
 8001a98:	e0c3      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001a9a:	003c      	movs	r4, r7
 8001a9c:	4304      	orrs	r4, r0
 8001a9e:	d02b      	beq.n	8001af8 <__aeabi_dsub+0x218>
 8001aa0:	468b      	mov	fp, r1
 8001aa2:	428d      	cmp	r5, r1
 8001aa4:	d02e      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001aa6:	4c6a      	ldr	r4, [pc, #424]	; (8001c50 <__aeabi_dsub+0x370>)
 8001aa8:	46a4      	mov	ip, r4
 8001aaa:	44b4      	add	ip, r6
 8001aac:	4664      	mov	r4, ip
 8001aae:	2c00      	cmp	r4, #0
 8001ab0:	d05f      	beq.n	8001b72 <__aeabi_dsub+0x292>
 8001ab2:	1b94      	subs	r4, r2, r6
 8001ab4:	46a4      	mov	ip, r4
 8001ab6:	2e00      	cmp	r6, #0
 8001ab8:	d000      	beq.n	8001abc <__aeabi_dsub+0x1dc>
 8001aba:	e120      	b.n	8001cfe <__aeabi_dsub+0x41e>
 8001abc:	464c      	mov	r4, r9
 8001abe:	431c      	orrs	r4, r3
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_dsub+0x1e4>
 8001ac2:	e1c7      	b.n	8001e54 <__aeabi_dsub+0x574>
 8001ac4:	4661      	mov	r1, ip
 8001ac6:	1e4c      	subs	r4, r1, #1
 8001ac8:	2901      	cmp	r1, #1
 8001aca:	d100      	bne.n	8001ace <__aeabi_dsub+0x1ee>
 8001acc:	e223      	b.n	8001f16 <__aeabi_dsub+0x636>
 8001ace:	4d5e      	ldr	r5, [pc, #376]	; (8001c48 <__aeabi_dsub+0x368>)
 8001ad0:	45ac      	cmp	ip, r5
 8001ad2:	d100      	bne.n	8001ad6 <__aeabi_dsub+0x1f6>
 8001ad4:	e1d8      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001ad6:	46a4      	mov	ip, r4
 8001ad8:	e11a      	b.n	8001d10 <__aeabi_dsub+0x430>
 8001ada:	003a      	movs	r2, r7
 8001adc:	4302      	orrs	r2, r0
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x202>
 8001ae0:	e0e4      	b.n	8001cac <__aeabi_dsub+0x3cc>
 8001ae2:	0022      	movs	r2, r4
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	2c01      	cmp	r4, #1
 8001ae8:	d100      	bne.n	8001aec <__aeabi_dsub+0x20c>
 8001aea:	e1c3      	b.n	8001e74 <__aeabi_dsub+0x594>
 8001aec:	4956      	ldr	r1, [pc, #344]	; (8001c48 <__aeabi_dsub+0x368>)
 8001aee:	428c      	cmp	r4, r1
 8001af0:	d100      	bne.n	8001af4 <__aeabi_dsub+0x214>
 8001af2:	e0b1      	b.n	8001c58 <__aeabi_dsub+0x378>
 8001af4:	4694      	mov	ip, r2
 8001af6:	e72b      	b.n	8001950 <__aeabi_dsub+0x70>
 8001af8:	2401      	movs	r4, #1
 8001afa:	4061      	eors	r1, r4
 8001afc:	468b      	mov	fp, r1
 8001afe:	428d      	cmp	r5, r1
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dsub+0x224>
 8001b02:	e716      	b.n	8001932 <__aeabi_dsub+0x52>
 8001b04:	4952      	ldr	r1, [pc, #328]	; (8001c50 <__aeabi_dsub+0x370>)
 8001b06:	468c      	mov	ip, r1
 8001b08:	44b4      	add	ip, r6
 8001b0a:	4664      	mov	r4, ip
 8001b0c:	2c00      	cmp	r4, #0
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_dsub+0x232>
 8001b10:	e0d3      	b.n	8001cba <__aeabi_dsub+0x3da>
 8001b12:	1b91      	subs	r1, r2, r6
 8001b14:	468c      	mov	ip, r1
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x23c>
 8001b1a:	e15e      	b.n	8001dda <__aeabi_dsub+0x4fa>
 8001b1c:	494a      	ldr	r1, [pc, #296]	; (8001c48 <__aeabi_dsub+0x368>)
 8001b1e:	428a      	cmp	r2, r1
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x244>
 8001b22:	e1be      	b.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	464c      	mov	r4, r9
 8001b28:	0409      	lsls	r1, r1, #16
 8001b2a:	430c      	orrs	r4, r1
 8001b2c:	46a1      	mov	r9, r4
 8001b2e:	4661      	mov	r1, ip
 8001b30:	2938      	cmp	r1, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x256>
 8001b34:	e1ba      	b.n	8001eac <__aeabi_dsub+0x5cc>
 8001b36:	291f      	cmp	r1, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x25c>
 8001b3a:	e227      	b.n	8001f8c <__aeabi_dsub+0x6ac>
 8001b3c:	2420      	movs	r4, #32
 8001b3e:	1a64      	subs	r4, r4, r1
 8001b40:	4649      	mov	r1, r9
 8001b42:	40a1      	lsls	r1, r4
 8001b44:	001e      	movs	r6, r3
 8001b46:	4688      	mov	r8, r1
 8001b48:	4661      	mov	r1, ip
 8001b4a:	40a3      	lsls	r3, r4
 8001b4c:	40ce      	lsrs	r6, r1
 8001b4e:	4641      	mov	r1, r8
 8001b50:	1e5c      	subs	r4, r3, #1
 8001b52:	41a3      	sbcs	r3, r4
 8001b54:	4331      	orrs	r1, r6
 8001b56:	4319      	orrs	r1, r3
 8001b58:	000c      	movs	r4, r1
 8001b5a:	4663      	mov	r3, ip
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	40d9      	lsrs	r1, r3
 8001b60:	187f      	adds	r7, r7, r1
 8001b62:	1824      	adds	r4, r4, r0
 8001b64:	4284      	cmp	r4, r0
 8001b66:	419b      	sbcs	r3, r3
 8001b68:	425b      	negs	r3, r3
 8001b6a:	469a      	mov	sl, r3
 8001b6c:	0016      	movs	r6, r2
 8001b6e:	44ba      	add	sl, r7
 8001b70:	e05d      	b.n	8001c2e <__aeabi_dsub+0x34e>
 8001b72:	4c38      	ldr	r4, [pc, #224]	; (8001c54 <__aeabi_dsub+0x374>)
 8001b74:	1c72      	adds	r2, r6, #1
 8001b76:	4222      	tst	r2, r4
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x29c>
 8001b7a:	e0df      	b.n	8001d3c <__aeabi_dsub+0x45c>
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	2e00      	cmp	r6, #0
 8001b82:	d000      	beq.n	8001b86 <__aeabi_dsub+0x2a6>
 8001b84:	e15c      	b.n	8001e40 <__aeabi_dsub+0x560>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d100      	bne.n	8001b8c <__aeabi_dsub+0x2ac>
 8001b8a:	e1cf      	b.n	8001f2c <__aeabi_dsub+0x64c>
 8001b8c:	003a      	movs	r2, r7
 8001b8e:	4302      	orrs	r2, r0
 8001b90:	d100      	bne.n	8001b94 <__aeabi_dsub+0x2b4>
 8001b92:	e17f      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001b94:	1a1c      	subs	r4, r3, r0
 8001b96:	464a      	mov	r2, r9
 8001b98:	42a3      	cmp	r3, r4
 8001b9a:	4189      	sbcs	r1, r1
 8001b9c:	1bd2      	subs	r2, r2, r7
 8001b9e:	4249      	negs	r1, r1
 8001ba0:	1a52      	subs	r2, r2, r1
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	0212      	lsls	r2, r2, #8
 8001ba6:	d400      	bmi.n	8001baa <__aeabi_dsub+0x2ca>
 8001ba8:	e20a      	b.n	8001fc0 <__aeabi_dsub+0x6e0>
 8001baa:	1ac4      	subs	r4, r0, r3
 8001bac:	42a0      	cmp	r0, r4
 8001bae:	4180      	sbcs	r0, r0
 8001bb0:	464b      	mov	r3, r9
 8001bb2:	4240      	negs	r0, r0
 8001bb4:	1aff      	subs	r7, r7, r3
 8001bb6:	1a3b      	subs	r3, r7, r0
 8001bb8:	469a      	mov	sl, r3
 8001bba:	465d      	mov	r5, fp
 8001bbc:	e71a      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001bbe:	003a      	movs	r2, r7
 8001bc0:	4302      	orrs	r2, r0
 8001bc2:	d073      	beq.n	8001cac <__aeabi_dsub+0x3cc>
 8001bc4:	0022      	movs	r2, r4
 8001bc6:	3a01      	subs	r2, #1
 8001bc8:	2c01      	cmp	r4, #1
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x2ee>
 8001bcc:	e0cb      	b.n	8001d66 <__aeabi_dsub+0x486>
 8001bce:	4554      	cmp	r4, sl
 8001bd0:	d042      	beq.n	8001c58 <__aeabi_dsub+0x378>
 8001bd2:	4694      	mov	ip, r2
 8001bd4:	e748      	b.n	8001a68 <__aeabi_dsub+0x188>
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	3b1f      	subs	r3, #31
 8001bda:	40d8      	lsrs	r0, r3
 8001bdc:	2920      	cmp	r1, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dsub+0x308>
 8001be0:	2340      	movs	r3, #64	; 0x40
 8001be2:	1a5b      	subs	r3, r3, r1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	4314      	orrs	r4, r2
 8001be8:	1e63      	subs	r3, r4, #1
 8001bea:	419c      	sbcs	r4, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	2600      	movs	r6, #0
 8001bf0:	469a      	mov	sl, r3
 8001bf2:	4304      	orrs	r4, r0
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d000      	beq.n	8001bfa <__aeabi_dsub+0x31a>
 8001bf8:	e6fe      	b.n	80019f8 <__aeabi_dsub+0x118>
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	08e3      	lsrs	r3, r4, #3
 8001bfe:	0752      	lsls	r2, r2, #29
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4652      	mov	r2, sl
 8001c04:	46b4      	mov	ip, r6
 8001c06:	08d2      	lsrs	r2, r2, #3
 8001c08:	490f      	ldr	r1, [pc, #60]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c0a:	458c      	cmp	ip, r1
 8001c0c:	d02a      	beq.n	8001c64 <__aeabi_dsub+0x384>
 8001c0e:	0312      	lsls	r2, r2, #12
 8001c10:	0b14      	lsrs	r4, r2, #12
 8001c12:	4662      	mov	r2, ip
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	0d52      	lsrs	r2, r2, #21
 8001c18:	e70c      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c1a:	003c      	movs	r4, r7
 8001c1c:	4304      	orrs	r4, r0
 8001c1e:	1e62      	subs	r2, r4, #1
 8001c20:	4194      	sbcs	r4, r2
 8001c22:	18e4      	adds	r4, r4, r3
 8001c24:	429c      	cmp	r4, r3
 8001c26:	4192      	sbcs	r2, r2
 8001c28:	4252      	negs	r2, r2
 8001c2a:	444a      	add	r2, r9
 8001c2c:	4692      	mov	sl, r2
 8001c2e:	4653      	mov	r3, sl
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	d5df      	bpl.n	8001bf4 <__aeabi_dsub+0x314>
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <__aeabi_dsub+0x368>)
 8001c36:	3601      	adds	r6, #1
 8001c38:	429e      	cmp	r6, r3
 8001c3a:	d000      	beq.n	8001c3e <__aeabi_dsub+0x35e>
 8001c3c:	e0a0      	b.n	8001d80 <__aeabi_dsub+0x4a0>
 8001c3e:	0032      	movs	r2, r6
 8001c40:	2400      	movs	r4, #0
 8001c42:	2300      	movs	r3, #0
 8001c44:	e6f6      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	000007ff 	.word	0x000007ff
 8001c4c:	ff7fffff 	.word	0xff7fffff
 8001c50:	fffff801 	.word	0xfffff801
 8001c54:	000007fe 	.word	0x000007fe
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	0752      	lsls	r2, r2, #29
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	464a      	mov	r2, r9
 8001c62:	08d2      	lsrs	r2, r2, #3
 8001c64:	0019      	movs	r1, r3
 8001c66:	4311      	orrs	r1, r2
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x38c>
 8001c6a:	e1b5      	b.n	8001fd8 <__aeabi_dsub+0x6f8>
 8001c6c:	2480      	movs	r4, #128	; 0x80
 8001c6e:	0324      	lsls	r4, r4, #12
 8001c70:	4314      	orrs	r4, r2
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	4ad5      	ldr	r2, [pc, #852]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001c76:	0b24      	lsrs	r4, r4, #12
 8001c78:	e6dc      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001c7a:	0020      	movs	r0, r4
 8001c7c:	f000 fa5c 	bl	8002138 <__clzsi2>
 8001c80:	0003      	movs	r3, r0
 8001c82:	3318      	adds	r3, #24
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	dc00      	bgt.n	8001c8a <__aeabi_dsub+0x3aa>
 8001c88:	e695      	b.n	80019b6 <__aeabi_dsub+0xd6>
 8001c8a:	0022      	movs	r2, r4
 8001c8c:	3808      	subs	r0, #8
 8001c8e:	4082      	lsls	r2, r0
 8001c90:	2400      	movs	r4, #0
 8001c92:	429e      	cmp	r6, r3
 8001c94:	dc00      	bgt.n	8001c98 <__aeabi_dsub+0x3b8>
 8001c96:	e69a      	b.n	80019ce <__aeabi_dsub+0xee>
 8001c98:	1af6      	subs	r6, r6, r3
 8001c9a:	4bcd      	ldr	r3, [pc, #820]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	4692      	mov	sl, r2
 8001ca0:	e6a8      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001ca2:	003c      	movs	r4, r7
 8001ca4:	4304      	orrs	r4, r0
 8001ca6:	1e62      	subs	r2, r4, #1
 8001ca8:	4194      	sbcs	r4, r2
 8001caa:	e66c      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001cac:	464a      	mov	r2, r9
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	0752      	lsls	r2, r2, #29
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	e7a6      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001cba:	4cc6      	ldr	r4, [pc, #792]	; (8001fd4 <__aeabi_dsub+0x6f4>)
 8001cbc:	1c72      	adds	r2, r6, #1
 8001cbe:	4222      	tst	r2, r4
 8001cc0:	d000      	beq.n	8001cc4 <__aeabi_dsub+0x3e4>
 8001cc2:	e0ac      	b.n	8001e1e <__aeabi_dsub+0x53e>
 8001cc4:	464a      	mov	r2, r9
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	2e00      	cmp	r6, #0
 8001cca:	d000      	beq.n	8001cce <__aeabi_dsub+0x3ee>
 8001ccc:	e105      	b.n	8001eda <__aeabi_dsub+0x5fa>
 8001cce:	2a00      	cmp	r2, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x3f4>
 8001cd2:	e156      	b.n	8001f82 <__aeabi_dsub+0x6a2>
 8001cd4:	003a      	movs	r2, r7
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x3fc>
 8001cda:	e0db      	b.n	8001e94 <__aeabi_dsub+0x5b4>
 8001cdc:	181c      	adds	r4, r3, r0
 8001cde:	429c      	cmp	r4, r3
 8001ce0:	419b      	sbcs	r3, r3
 8001ce2:	444f      	add	r7, r9
 8001ce4:	46ba      	mov	sl, r7
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	449a      	add	sl, r3
 8001cea:	4653      	mov	r3, sl
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	d400      	bmi.n	8001cf2 <__aeabi_dsub+0x412>
 8001cf0:	e780      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cf2:	4652      	mov	r2, sl
 8001cf4:	4bb6      	ldr	r3, [pc, #728]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001cf6:	2601      	movs	r6, #1
 8001cf8:	401a      	ands	r2, r3
 8001cfa:	4692      	mov	sl, r2
 8001cfc:	e77a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001cfe:	4cb3      	ldr	r4, [pc, #716]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001d00:	42a2      	cmp	r2, r4
 8001d02:	d100      	bne.n	8001d06 <__aeabi_dsub+0x426>
 8001d04:	e0c0      	b.n	8001e88 <__aeabi_dsub+0x5a8>
 8001d06:	2480      	movs	r4, #128	; 0x80
 8001d08:	464d      	mov	r5, r9
 8001d0a:	0424      	lsls	r4, r4, #16
 8001d0c:	4325      	orrs	r5, r4
 8001d0e:	46a9      	mov	r9, r5
 8001d10:	4664      	mov	r4, ip
 8001d12:	2c38      	cmp	r4, #56	; 0x38
 8001d14:	dc53      	bgt.n	8001dbe <__aeabi_dsub+0x4de>
 8001d16:	4661      	mov	r1, ip
 8001d18:	2c1f      	cmp	r4, #31
 8001d1a:	dd00      	ble.n	8001d1e <__aeabi_dsub+0x43e>
 8001d1c:	e0cd      	b.n	8001eba <__aeabi_dsub+0x5da>
 8001d1e:	2520      	movs	r5, #32
 8001d20:	001e      	movs	r6, r3
 8001d22:	1b2d      	subs	r5, r5, r4
 8001d24:	464c      	mov	r4, r9
 8001d26:	40ab      	lsls	r3, r5
 8001d28:	40ac      	lsls	r4, r5
 8001d2a:	40ce      	lsrs	r6, r1
 8001d2c:	1e5d      	subs	r5, r3, #1
 8001d2e:	41ab      	sbcs	r3, r5
 8001d30:	4334      	orrs	r4, r6
 8001d32:	4323      	orrs	r3, r4
 8001d34:	464c      	mov	r4, r9
 8001d36:	40cc      	lsrs	r4, r1
 8001d38:	1b3f      	subs	r7, r7, r4
 8001d3a:	e045      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001d3c:	464a      	mov	r2, r9
 8001d3e:	1a1c      	subs	r4, r3, r0
 8001d40:	1bd1      	subs	r1, r2, r7
 8001d42:	42a3      	cmp	r3, r4
 8001d44:	4192      	sbcs	r2, r2
 8001d46:	4252      	negs	r2, r2
 8001d48:	4692      	mov	sl, r2
 8001d4a:	000a      	movs	r2, r1
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	1a52      	subs	r2, r2, r1
 8001d50:	4692      	mov	sl, r2
 8001d52:	0212      	lsls	r2, r2, #8
 8001d54:	d500      	bpl.n	8001d58 <__aeabi_dsub+0x478>
 8001d56:	e083      	b.n	8001e60 <__aeabi_dsub+0x580>
 8001d58:	4653      	mov	r3, sl
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	d000      	beq.n	8001d60 <__aeabi_dsub+0x480>
 8001d5e:	e621      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001d60:	2200      	movs	r2, #0
 8001d62:	2500      	movs	r5, #0
 8001d64:	e753      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001d66:	181c      	adds	r4, r3, r0
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	419b      	sbcs	r3, r3
 8001d6c:	444f      	add	r7, r9
 8001d6e:	46ba      	mov	sl, r7
 8001d70:	425b      	negs	r3, r3
 8001d72:	449a      	add	sl, r3
 8001d74:	4653      	mov	r3, sl
 8001d76:	2601      	movs	r6, #1
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	d400      	bmi.n	8001d7e <__aeabi_dsub+0x49e>
 8001d7c:	e73a      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001d7e:	2602      	movs	r6, #2
 8001d80:	4652      	mov	r2, sl
 8001d82:	4b93      	ldr	r3, [pc, #588]	; (8001fd0 <__aeabi_dsub+0x6f0>)
 8001d84:	2101      	movs	r1, #1
 8001d86:	401a      	ands	r2, r3
 8001d88:	0013      	movs	r3, r2
 8001d8a:	4021      	ands	r1, r4
 8001d8c:	0862      	lsrs	r2, r4, #1
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	07dc      	lsls	r4, r3, #31
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	469a      	mov	sl, r3
 8001d96:	4314      	orrs	r4, r2
 8001d98:	e62c      	b.n	80019f4 <__aeabi_dsub+0x114>
 8001d9a:	0039      	movs	r1, r7
 8001d9c:	3a20      	subs	r2, #32
 8001d9e:	40d1      	lsrs	r1, r2
 8001da0:	4662      	mov	r2, ip
 8001da2:	2a20      	cmp	r2, #32
 8001da4:	d006      	beq.n	8001db4 <__aeabi_dsub+0x4d4>
 8001da6:	4664      	mov	r4, ip
 8001da8:	2240      	movs	r2, #64	; 0x40
 8001daa:	1b12      	subs	r2, r2, r4
 8001dac:	003c      	movs	r4, r7
 8001dae:	4094      	lsls	r4, r2
 8001db0:	4304      	orrs	r4, r0
 8001db2:	9401      	str	r4, [sp, #4]
 8001db4:	9c01      	ldr	r4, [sp, #4]
 8001db6:	1e62      	subs	r2, r4, #1
 8001db8:	4194      	sbcs	r4, r2
 8001dba:	430c      	orrs	r4, r1
 8001dbc:	e5e3      	b.n	8001986 <__aeabi_dsub+0xa6>
 8001dbe:	4649      	mov	r1, r9
 8001dc0:	4319      	orrs	r1, r3
 8001dc2:	000b      	movs	r3, r1
 8001dc4:	1e5c      	subs	r4, r3, #1
 8001dc6:	41a3      	sbcs	r3, r4
 8001dc8:	1ac4      	subs	r4, r0, r3
 8001dca:	42a0      	cmp	r0, r4
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	425b      	negs	r3, r3
 8001dd0:	1afb      	subs	r3, r7, r3
 8001dd2:	469a      	mov	sl, r3
 8001dd4:	465d      	mov	r5, fp
 8001dd6:	0016      	movs	r6, r2
 8001dd8:	e5dc      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001dda:	4649      	mov	r1, r9
 8001ddc:	4319      	orrs	r1, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x502>
 8001de0:	e0ae      	b.n	8001f40 <__aeabi_dsub+0x660>
 8001de2:	4661      	mov	r1, ip
 8001de4:	4664      	mov	r4, ip
 8001de6:	3901      	subs	r1, #1
 8001de8:	2c01      	cmp	r4, #1
 8001dea:	d100      	bne.n	8001dee <__aeabi_dsub+0x50e>
 8001dec:	e0e0      	b.n	8001fb0 <__aeabi_dsub+0x6d0>
 8001dee:	4c77      	ldr	r4, [pc, #476]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001df0:	45a4      	cmp	ip, r4
 8001df2:	d056      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001df4:	468c      	mov	ip, r1
 8001df6:	e69a      	b.n	8001b2e <__aeabi_dsub+0x24e>
 8001df8:	4661      	mov	r1, ip
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	003c      	movs	r4, r7
 8001dfe:	1a52      	subs	r2, r2, r1
 8001e00:	4094      	lsls	r4, r2
 8001e02:	0001      	movs	r1, r0
 8001e04:	4090      	lsls	r0, r2
 8001e06:	46a0      	mov	r8, r4
 8001e08:	4664      	mov	r4, ip
 8001e0a:	1e42      	subs	r2, r0, #1
 8001e0c:	4190      	sbcs	r0, r2
 8001e0e:	4662      	mov	r2, ip
 8001e10:	40e1      	lsrs	r1, r4
 8001e12:	4644      	mov	r4, r8
 8001e14:	40d7      	lsrs	r7, r2
 8001e16:	430c      	orrs	r4, r1
 8001e18:	4304      	orrs	r4, r0
 8001e1a:	44b9      	add	r9, r7
 8001e1c:	e701      	b.n	8001c22 <__aeabi_dsub+0x342>
 8001e1e:	496b      	ldr	r1, [pc, #428]	; (8001fcc <__aeabi_dsub+0x6ec>)
 8001e20:	428a      	cmp	r2, r1
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dsub+0x546>
 8001e24:	e70c      	b.n	8001c40 <__aeabi_dsub+0x360>
 8001e26:	1818      	adds	r0, r3, r0
 8001e28:	4298      	cmp	r0, r3
 8001e2a:	419b      	sbcs	r3, r3
 8001e2c:	444f      	add	r7, r9
 8001e2e:	425b      	negs	r3, r3
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	07dc      	lsls	r4, r3, #31
 8001e34:	0840      	lsrs	r0, r0, #1
 8001e36:	085b      	lsrs	r3, r3, #1
 8001e38:	469a      	mov	sl, r3
 8001e3a:	0016      	movs	r6, r2
 8001e3c:	4304      	orrs	r4, r0
 8001e3e:	e6d9      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	d000      	beq.n	8001e46 <__aeabi_dsub+0x566>
 8001e44:	e081      	b.n	8001f4a <__aeabi_dsub+0x66a>
 8001e46:	003b      	movs	r3, r7
 8001e48:	4303      	orrs	r3, r0
 8001e4a:	d11d      	bne.n	8001e88 <__aeabi_dsub+0x5a8>
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	2500      	movs	r5, #0
 8001e50:	0312      	lsls	r2, r2, #12
 8001e52:	e70b      	b.n	8001c6c <__aeabi_dsub+0x38c>
 8001e54:	08c0      	lsrs	r0, r0, #3
 8001e56:	077b      	lsls	r3, r7, #29
 8001e58:	465d      	mov	r5, fp
 8001e5a:	4303      	orrs	r3, r0
 8001e5c:	08fa      	lsrs	r2, r7, #3
 8001e5e:	e6d3      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001e60:	1ac4      	subs	r4, r0, r3
 8001e62:	42a0      	cmp	r0, r4
 8001e64:	4180      	sbcs	r0, r0
 8001e66:	464b      	mov	r3, r9
 8001e68:	4240      	negs	r0, r0
 8001e6a:	1aff      	subs	r7, r7, r3
 8001e6c:	1a3b      	subs	r3, r7, r0
 8001e6e:	469a      	mov	sl, r3
 8001e70:	465d      	mov	r5, fp
 8001e72:	e597      	b.n	80019a4 <__aeabi_dsub+0xc4>
 8001e74:	1a1c      	subs	r4, r3, r0
 8001e76:	464a      	mov	r2, r9
 8001e78:	42a3      	cmp	r3, r4
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	1bd7      	subs	r7, r2, r7
 8001e7e:	425b      	negs	r3, r3
 8001e80:	1afb      	subs	r3, r7, r3
 8001e82:	469a      	mov	sl, r3
 8001e84:	2601      	movs	r6, #1
 8001e86:	e585      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001e88:	08c0      	lsrs	r0, r0, #3
 8001e8a:	077b      	lsls	r3, r7, #29
 8001e8c:	465d      	mov	r5, fp
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	08fa      	lsrs	r2, r7, #3
 8001e92:	e6e7      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001e94:	464a      	mov	r2, r9
 8001e96:	08db      	lsrs	r3, r3, #3
 8001e98:	0752      	lsls	r2, r2, #29
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	464a      	mov	r2, r9
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	e6b5      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001ea2:	08c0      	lsrs	r0, r0, #3
 8001ea4:	077b      	lsls	r3, r7, #29
 8001ea6:	4303      	orrs	r3, r0
 8001ea8:	08fa      	lsrs	r2, r7, #3
 8001eaa:	e6db      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001eac:	4649      	mov	r1, r9
 8001eae:	4319      	orrs	r1, r3
 8001eb0:	000b      	movs	r3, r1
 8001eb2:	1e59      	subs	r1, r3, #1
 8001eb4:	418b      	sbcs	r3, r1
 8001eb6:	001c      	movs	r4, r3
 8001eb8:	e653      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001eba:	464d      	mov	r5, r9
 8001ebc:	3c20      	subs	r4, #32
 8001ebe:	40e5      	lsrs	r5, r4
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d005      	beq.n	8001ed0 <__aeabi_dsub+0x5f0>
 8001ec4:	2440      	movs	r4, #64	; 0x40
 8001ec6:	1a64      	subs	r4, r4, r1
 8001ec8:	4649      	mov	r1, r9
 8001eca:	40a1      	lsls	r1, r4
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	4698      	mov	r8, r3
 8001ed0:	4643      	mov	r3, r8
 8001ed2:	1e5c      	subs	r4, r3, #1
 8001ed4:	41a3      	sbcs	r3, r4
 8001ed6:	432b      	orrs	r3, r5
 8001ed8:	e776      	b.n	8001dc8 <__aeabi_dsub+0x4e8>
 8001eda:	2a00      	cmp	r2, #0
 8001edc:	d0e1      	beq.n	8001ea2 <__aeabi_dsub+0x5c2>
 8001ede:	003a      	movs	r2, r7
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x608>
 8001ee6:	e6b8      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001ee8:	464a      	mov	r2, r9
 8001eea:	0752      	lsls	r2, r2, #29
 8001eec:	2480      	movs	r4, #128	; 0x80
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	464a      	mov	r2, r9
 8001ef2:	0324      	lsls	r4, r4, #12
 8001ef4:	08d2      	lsrs	r2, r2, #3
 8001ef6:	4222      	tst	r2, r4
 8001ef8:	d007      	beq.n	8001f0a <__aeabi_dsub+0x62a>
 8001efa:	08fe      	lsrs	r6, r7, #3
 8001efc:	4226      	tst	r6, r4
 8001efe:	d104      	bne.n	8001f0a <__aeabi_dsub+0x62a>
 8001f00:	465d      	mov	r5, fp
 8001f02:	0032      	movs	r2, r6
 8001f04:	08c3      	lsrs	r3, r0, #3
 8001f06:	077f      	lsls	r7, r7, #29
 8001f08:	433b      	orrs	r3, r7
 8001f0a:	0f59      	lsrs	r1, r3, #29
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	0749      	lsls	r1, r1, #29
 8001f10:	08db      	lsrs	r3, r3, #3
 8001f12:	430b      	orrs	r3, r1
 8001f14:	e6a6      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f16:	1ac4      	subs	r4, r0, r3
 8001f18:	42a0      	cmp	r0, r4
 8001f1a:	4180      	sbcs	r0, r0
 8001f1c:	464b      	mov	r3, r9
 8001f1e:	4240      	negs	r0, r0
 8001f20:	1aff      	subs	r7, r7, r3
 8001f22:	1a3b      	subs	r3, r7, r0
 8001f24:	469a      	mov	sl, r3
 8001f26:	465d      	mov	r5, fp
 8001f28:	2601      	movs	r6, #1
 8001f2a:	e533      	b.n	8001994 <__aeabi_dsub+0xb4>
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_dsub+0x654>
 8001f32:	e715      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e666      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f40:	08c0      	lsrs	r0, r0, #3
 8001f42:	077b      	lsls	r3, r7, #29
 8001f44:	4303      	orrs	r3, r0
 8001f46:	08fa      	lsrs	r2, r7, #3
 8001f48:	e65e      	b.n	8001c08 <__aeabi_dsub+0x328>
 8001f4a:	003a      	movs	r2, r7
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	d100      	bne.n	8001f54 <__aeabi_dsub+0x674>
 8001f52:	e682      	b.n	8001c5a <__aeabi_dsub+0x37a>
 8001f54:	464a      	mov	r2, r9
 8001f56:	0752      	lsls	r2, r2, #29
 8001f58:	2480      	movs	r4, #128	; 0x80
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	464a      	mov	r2, r9
 8001f5e:	0324      	lsls	r4, r4, #12
 8001f60:	08d2      	lsrs	r2, r2, #3
 8001f62:	4222      	tst	r2, r4
 8001f64:	d007      	beq.n	8001f76 <__aeabi_dsub+0x696>
 8001f66:	08fe      	lsrs	r6, r7, #3
 8001f68:	4226      	tst	r6, r4
 8001f6a:	d104      	bne.n	8001f76 <__aeabi_dsub+0x696>
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	0032      	movs	r2, r6
 8001f70:	08c3      	lsrs	r3, r0, #3
 8001f72:	077f      	lsls	r7, r7, #29
 8001f74:	433b      	orrs	r3, r7
 8001f76:	0f59      	lsrs	r1, r3, #29
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	08db      	lsrs	r3, r3, #3
 8001f7c:	0749      	lsls	r1, r1, #29
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	e670      	b.n	8001c64 <__aeabi_dsub+0x384>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e640      	b.n	8001c0e <__aeabi_dsub+0x32e>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	3920      	subs	r1, #32
 8001f90:	40cc      	lsrs	r4, r1
 8001f92:	4661      	mov	r1, ip
 8001f94:	2920      	cmp	r1, #32
 8001f96:	d006      	beq.n	8001fa6 <__aeabi_dsub+0x6c6>
 8001f98:	4666      	mov	r6, ip
 8001f9a:	2140      	movs	r1, #64	; 0x40
 8001f9c:	1b89      	subs	r1, r1, r6
 8001f9e:	464e      	mov	r6, r9
 8001fa0:	408e      	lsls	r6, r1
 8001fa2:	4333      	orrs	r3, r6
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	4643      	mov	r3, r8
 8001fa8:	1e59      	subs	r1, r3, #1
 8001faa:	418b      	sbcs	r3, r1
 8001fac:	431c      	orrs	r4, r3
 8001fae:	e5d8      	b.n	8001b62 <__aeabi_dsub+0x282>
 8001fb0:	181c      	adds	r4, r3, r0
 8001fb2:	4284      	cmp	r4, r0
 8001fb4:	4180      	sbcs	r0, r0
 8001fb6:	444f      	add	r7, r9
 8001fb8:	46ba      	mov	sl, r7
 8001fba:	4240      	negs	r0, r0
 8001fbc:	4482      	add	sl, r0
 8001fbe:	e6d9      	b.n	8001d74 <__aeabi_dsub+0x494>
 8001fc0:	4653      	mov	r3, sl
 8001fc2:	4323      	orrs	r3, r4
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x6e8>
 8001fc6:	e6cb      	b.n	8001d60 <__aeabi_dsub+0x480>
 8001fc8:	e614      	b.n	8001bf4 <__aeabi_dsub+0x314>
 8001fca:	46c0      	nop			; (mov r8, r8)
 8001fcc:	000007ff 	.word	0x000007ff
 8001fd0:	ff7fffff 	.word	0xff7fffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	2300      	movs	r3, #0
 8001fda:	4a01      	ldr	r2, [pc, #4]	; (8001fe0 <__aeabi_dsub+0x700>)
 8001fdc:	001c      	movs	r4, r3
 8001fde:	e529      	b.n	8001a34 <__aeabi_dsub+0x154>
 8001fe0:	000007ff 	.word	0x000007ff

08001fe4 <__aeabi_dcmpun>:
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	0005      	movs	r5, r0
 8001fe8:	480c      	ldr	r0, [pc, #48]	; (800201c <__aeabi_dcmpun+0x38>)
 8001fea:	031c      	lsls	r4, r3, #12
 8001fec:	0016      	movs	r6, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	030a      	lsls	r2, r1, #12
 8001ff2:	0049      	lsls	r1, r1, #1
 8001ff4:	0b12      	lsrs	r2, r2, #12
 8001ff6:	0d49      	lsrs	r1, r1, #21
 8001ff8:	0b24      	lsrs	r4, r4, #12
 8001ffa:	0d5b      	lsrs	r3, r3, #21
 8001ffc:	4281      	cmp	r1, r0
 8001ffe:	d008      	beq.n	8002012 <__aeabi_dcmpun+0x2e>
 8002000:	4a06      	ldr	r2, [pc, #24]	; (800201c <__aeabi_dcmpun+0x38>)
 8002002:	2000      	movs	r0, #0
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002008:	0020      	movs	r0, r4
 800200a:	4330      	orrs	r0, r6
 800200c:	1e43      	subs	r3, r0, #1
 800200e:	4198      	sbcs	r0, r3
 8002010:	bd70      	pop	{r4, r5, r6, pc}
 8002012:	2001      	movs	r0, #1
 8002014:	432a      	orrs	r2, r5
 8002016:	d1fb      	bne.n	8002010 <__aeabi_dcmpun+0x2c>
 8002018:	e7f2      	b.n	8002000 <__aeabi_dcmpun+0x1c>
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	000007ff 	.word	0x000007ff

08002020 <__aeabi_d2iz>:
 8002020:	000a      	movs	r2, r1
 8002022:	b530      	push	{r4, r5, lr}
 8002024:	4c13      	ldr	r4, [pc, #76]	; (8002074 <__aeabi_d2iz+0x54>)
 8002026:	0053      	lsls	r3, r2, #1
 8002028:	0309      	lsls	r1, r1, #12
 800202a:	0005      	movs	r5, r0
 800202c:	0b09      	lsrs	r1, r1, #12
 800202e:	2000      	movs	r0, #0
 8002030:	0d5b      	lsrs	r3, r3, #21
 8002032:	0fd2      	lsrs	r2, r2, #31
 8002034:	42a3      	cmp	r3, r4
 8002036:	dd04      	ble.n	8002042 <__aeabi_d2iz+0x22>
 8002038:	480f      	ldr	r0, [pc, #60]	; (8002078 <__aeabi_d2iz+0x58>)
 800203a:	4283      	cmp	r3, r0
 800203c:	dd02      	ble.n	8002044 <__aeabi_d2iz+0x24>
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <__aeabi_d2iz+0x5c>)
 8002040:	18d0      	adds	r0, r2, r3
 8002042:	bd30      	pop	{r4, r5, pc}
 8002044:	2080      	movs	r0, #128	; 0x80
 8002046:	0340      	lsls	r0, r0, #13
 8002048:	4301      	orrs	r1, r0
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <__aeabi_d2iz+0x60>)
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	281f      	cmp	r0, #31
 8002050:	dd08      	ble.n	8002064 <__aeabi_d2iz+0x44>
 8002052:	480c      	ldr	r0, [pc, #48]	; (8002084 <__aeabi_d2iz+0x64>)
 8002054:	1ac3      	subs	r3, r0, r3
 8002056:	40d9      	lsrs	r1, r3
 8002058:	000b      	movs	r3, r1
 800205a:	4258      	negs	r0, r3
 800205c:	2a00      	cmp	r2, #0
 800205e:	d1f0      	bne.n	8002042 <__aeabi_d2iz+0x22>
 8002060:	0018      	movs	r0, r3
 8002062:	e7ee      	b.n	8002042 <__aeabi_d2iz+0x22>
 8002064:	4c08      	ldr	r4, [pc, #32]	; (8002088 <__aeabi_d2iz+0x68>)
 8002066:	40c5      	lsrs	r5, r0
 8002068:	46a4      	mov	ip, r4
 800206a:	4463      	add	r3, ip
 800206c:	4099      	lsls	r1, r3
 800206e:	000b      	movs	r3, r1
 8002070:	432b      	orrs	r3, r5
 8002072:	e7f2      	b.n	800205a <__aeabi_d2iz+0x3a>
 8002074:	000003fe 	.word	0x000003fe
 8002078:	0000041d 	.word	0x0000041d
 800207c:	7fffffff 	.word	0x7fffffff
 8002080:	00000433 	.word	0x00000433
 8002084:	00000413 	.word	0x00000413
 8002088:	fffffbed 	.word	0xfffffbed

0800208c <__aeabi_i2d>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	2800      	cmp	r0, #0
 8002090:	d016      	beq.n	80020c0 <__aeabi_i2d+0x34>
 8002092:	17c3      	asrs	r3, r0, #31
 8002094:	18c5      	adds	r5, r0, r3
 8002096:	405d      	eors	r5, r3
 8002098:	0fc4      	lsrs	r4, r0, #31
 800209a:	0028      	movs	r0, r5
 800209c:	f000 f84c 	bl	8002138 <__clzsi2>
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <__aeabi_i2d+0x5c>)
 80020a2:	1a1b      	subs	r3, r3, r0
 80020a4:	280a      	cmp	r0, #10
 80020a6:	dc16      	bgt.n	80020d6 <__aeabi_i2d+0x4a>
 80020a8:	0002      	movs	r2, r0
 80020aa:	002e      	movs	r6, r5
 80020ac:	3215      	adds	r2, #21
 80020ae:	4096      	lsls	r6, r2
 80020b0:	220b      	movs	r2, #11
 80020b2:	1a12      	subs	r2, r2, r0
 80020b4:	40d5      	lsrs	r5, r2
 80020b6:	055b      	lsls	r3, r3, #21
 80020b8:	032d      	lsls	r5, r5, #12
 80020ba:	0b2d      	lsrs	r5, r5, #12
 80020bc:	0d5b      	lsrs	r3, r3, #21
 80020be:	e003      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020c0:	2400      	movs	r4, #0
 80020c2:	2300      	movs	r3, #0
 80020c4:	2500      	movs	r5, #0
 80020c6:	2600      	movs	r6, #0
 80020c8:	051b      	lsls	r3, r3, #20
 80020ca:	432b      	orrs	r3, r5
 80020cc:	07e4      	lsls	r4, r4, #31
 80020ce:	4323      	orrs	r3, r4
 80020d0:	0030      	movs	r0, r6
 80020d2:	0019      	movs	r1, r3
 80020d4:	bd70      	pop	{r4, r5, r6, pc}
 80020d6:	380b      	subs	r0, #11
 80020d8:	4085      	lsls	r5, r0
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	032d      	lsls	r5, r5, #12
 80020de:	2600      	movs	r6, #0
 80020e0:	0b2d      	lsrs	r5, r5, #12
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	e7f0      	b.n	80020c8 <__aeabi_i2d+0x3c>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	0000041e 	.word	0x0000041e

080020ec <__aeabi_ui2d>:
 80020ec:	b510      	push	{r4, lr}
 80020ee:	1e04      	subs	r4, r0, #0
 80020f0:	d010      	beq.n	8002114 <__aeabi_ui2d+0x28>
 80020f2:	f000 f821 	bl	8002138 <__clzsi2>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <__aeabi_ui2d+0x48>)
 80020f8:	1a1b      	subs	r3, r3, r0
 80020fa:	280a      	cmp	r0, #10
 80020fc:	dc11      	bgt.n	8002122 <__aeabi_ui2d+0x36>
 80020fe:	220b      	movs	r2, #11
 8002100:	0021      	movs	r1, r4
 8002102:	1a12      	subs	r2, r2, r0
 8002104:	40d1      	lsrs	r1, r2
 8002106:	3015      	adds	r0, #21
 8002108:	030a      	lsls	r2, r1, #12
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4084      	lsls	r4, r0
 800210e:	0b12      	lsrs	r2, r2, #12
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	e001      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	4313      	orrs	r3, r2
 800211c:	0020      	movs	r0, r4
 800211e:	0019      	movs	r1, r3
 8002120:	bd10      	pop	{r4, pc}
 8002122:	0022      	movs	r2, r4
 8002124:	380b      	subs	r0, #11
 8002126:	4082      	lsls	r2, r0
 8002128:	055b      	lsls	r3, r3, #21
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	2400      	movs	r4, #0
 800212e:	0b12      	lsrs	r2, r2, #12
 8002130:	0d5b      	lsrs	r3, r3, #21
 8002132:	e7f1      	b.n	8002118 <__aeabi_ui2d+0x2c>
 8002134:	0000041e 	.word	0x0000041e

08002138 <__clzsi2>:
 8002138:	211c      	movs	r1, #28
 800213a:	2301      	movs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4298      	cmp	r0, r3
 8002140:	d301      	bcc.n	8002146 <__clzsi2+0xe>
 8002142:	0c00      	lsrs	r0, r0, #16
 8002144:	3910      	subs	r1, #16
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	4298      	cmp	r0, r3
 800214a:	d301      	bcc.n	8002150 <__clzsi2+0x18>
 800214c:	0a00      	lsrs	r0, r0, #8
 800214e:	3908      	subs	r1, #8
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	4298      	cmp	r0, r3
 8002154:	d301      	bcc.n	800215a <__clzsi2+0x22>
 8002156:	0900      	lsrs	r0, r0, #4
 8002158:	3904      	subs	r1, #4
 800215a:	a202      	add	r2, pc, #8	; (adr r2, 8002164 <__clzsi2+0x2c>)
 800215c:	5c10      	ldrb	r0, [r2, r0]
 800215e:	1840      	adds	r0, r0, r1
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	02020304 	.word	0x02020304
 8002168:	01010101 	.word	0x01010101
	...

08002174 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e01a      	b.n	80021b8 <GetPage+0x44>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	4a10      	ldr	r2, [pc, #64]	; (80021c8 <GetPage+0x54>)
 8002186:	4694      	mov	ip, r2
 8002188:	4463      	add	r3, ip
 800218a:	029b      	lsls	r3, r3, #10
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d20f      	bcs.n	80021b2 <GetPage+0x3e>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	0292      	lsls	r2, r2, #10
 8002198:	4694      	mov	ip, r2
 800219a:	4463      	add	r3, ip
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d306      	bcc.n	80021b2 <GetPage+0x3e>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	0292      	lsls	r2, r2, #10
 80021aa:	4694      	mov	ip, r2
 80021ac:	4463      	add	r3, ip
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	e006      	b.n	80021c0 <GetPage+0x4c>
  for (int indx=0; indx<128; indx++)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3301      	adds	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2b7f      	cmp	r3, #127	; 0x7f
 80021bc:	dde1      	ble.n	8002182 <GetPage+0xe>
	  }
  }

  return 0;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b004      	add	sp, #16
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	00020001 	.word	0x00020001

080021cc <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint8_t *Data, uint16_t numberofwords)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b08a      	sub	sp, #40	; 0x28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	1dbb      	adds	r3, r7, #6
 80021d8:	801a      	strh	r2, [r3, #0]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80021de:	f001 f93b 	bl	8003458 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ffc5 	bl	8002174 <GetPage>
 80021ea:	0003      	movs	r3, r0
 80021ec:	623b      	str	r3, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80021ee:	1dbb      	adds	r3, r7, #6
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	001a      	movs	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff ffb8 	bl	8002174 <GetPage>
 8002204:	0003      	movs	r3, r0
 8002206:	61bb      	str	r3, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <Flash_Write_Data+0xbc>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <Flash_Write_Data+0xbc>)
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	605a      	str	r2, [r3, #4]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	0a9b      	lsrs	r3, r3, #10
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <Flash_Write_Data+0xbc>)
 8002220:	609a      	str	r2, [r3, #8]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8002222:	2314      	movs	r3, #20
 8002224:	18fa      	adds	r2, r7, r3
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <Flash_Write_Data+0xbc>)
 8002228:	0011      	movs	r1, r2
 800222a:	0018      	movs	r0, r3
 800222c:	f001 f9de 	bl	80035ec <HAL_FLASHEx_Erase>
 8002230:	1e03      	subs	r3, r0, #0
 8002232:	d01d      	beq.n	8002270 <Flash_Write_Data+0xa4>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8002234:	f001 f944 	bl	80034c0 <HAL_FLASH_GetError>
 8002238:	0003      	movs	r3, r0
 800223a:	e021      	b.n	8002280 <Flash_Write_Data+0xb4>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	001c      	movs	r4, r3
 8002246:	2300      	movs	r3, #0
 8002248:	001d      	movs	r5, r3
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	0022      	movs	r2, r4
 800224e:	002b      	movs	r3, r5
 8002250:	2002      	movs	r0, #2
 8002252:	f001 f86b 	bl	800332c <HAL_FLASH_Program>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d106      	bne.n	8002268 <Flash_Write_Data+0x9c>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8002260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e003      	b.n	8002270 <Flash_Write_Data+0xa4>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8002268:	f001 f92a 	bl	80034c0 <HAL_FLASH_GetError>
 800226c:	0003      	movs	r3, r0
 800226e:	e007      	b.n	8002280 <Flash_Write_Data+0xb4>
	   while (sofar<numberofwords)
 8002270:	1dbb      	adds	r3, r7, #6
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002276:	429a      	cmp	r2, r3
 8002278:	dbe0      	blt.n	800223c <Flash_Write_Data+0x70>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 800227a:	f001 f913 	bl	80034a4 <HAL_FLASH_Lock>

	   return 0;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b00a      	add	sp, #40	; 0x28
 8002286:	bdb0      	pop	{r4, r5, r7, pc}
 8002288:	20000204 	.word	0x20000204

0800228c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint8_t *RxBuf, uint16_t numberofwords)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	1dbb      	adds	r3, r7, #6
 8002298:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	701a      	strb	r2, [r3, #0]
		StartPageAddress += 4;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	3301      	adds	r3, #1
 80022ae:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80022b0:	1dbb      	adds	r3, r7, #6
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	1dba      	adds	r2, r7, #6
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	8011      	strh	r1, [r2, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d000      	beq.n	80022c0 <Flash_Read_Data+0x34>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 80022be:	e7ec      	b.n	800229a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80022c0:	46c0      	nop			; (mov r8, r8)
	}
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}

080022ca <Motor_forward>:
uint8_t Key_Card2[5] = {0xdc, 0x27, 0x87, 0x64, 0x18};
uint8_t Key_Card_Read[5] ;


void Motor_forward(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_HIGH;
 80022ce:	2390      	movs	r3, #144	; 0x90
 80022d0:	05db      	lsls	r3, r3, #23
 80022d2:	2201      	movs	r2, #1
 80022d4:	2108      	movs	r1, #8
 80022d6:	0018      	movs	r0, r3
 80022d8:	f001 fbc1 	bl	8003a5e <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_LOW;
 80022dc:	2390      	movs	r3, #144	; 0x90
 80022de:	05db      	lsls	r3, r3, #23
 80022e0:	2200      	movs	r2, #0
 80022e2:	2110      	movs	r1, #16
 80022e4:	0018      	movs	r0, r3
 80022e6:	f001 fbba 	bl	8003a5e <HAL_GPIO_WritePin>
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <Motor_backward>:

void Motor_backward(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_LOW;
 80022f4:	2390      	movs	r3, #144	; 0x90
 80022f6:	05db      	lsls	r3, r3, #23
 80022f8:	2200      	movs	r2, #0
 80022fa:	2108      	movs	r1, #8
 80022fc:	0018      	movs	r0, r3
 80022fe:	f001 fbae 	bl	8003a5e <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_HIGH;
 8002302:	2390      	movs	r3, #144	; 0x90
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	2201      	movs	r2, #1
 8002308:	2110      	movs	r1, #16
 800230a:	0018      	movs	r0, r3
 800230c:	f001 fba7 	bl	8003a5e <HAL_GPIO_WritePin>
}
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <Motor_stop>:

void Motor_stop(void)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	af00      	add	r7, sp, #0
	MOTOR_POSITIVE_HIGH;
 800231a:	2390      	movs	r3, #144	; 0x90
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	2201      	movs	r2, #1
 8002320:	2108      	movs	r1, #8
 8002322:	0018      	movs	r0, r3
 8002324:	f001 fb9b 	bl	8003a5e <HAL_GPIO_WritePin>
	MOTOR_NEGATIVE_HIGH;
 8002328:	2390      	movs	r3, #144	; 0x90
 800232a:	05db      	lsls	r3, r3, #23
 800232c:	2201      	movs	r2, #1
 800232e:	2110      	movs	r1, #16
 8002330:	0018      	movs	r0, r3
 8002332:	f001 fb94 	bl	8003a5e <HAL_GPIO_WritePin>
}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <Flap_open>:

void Flap_open(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
	Motor_forward();
 8002340:	f7ff ffc3 	bl	80022ca <Motor_forward>
	while(GET_LIMIT_MAX)
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	2390      	movs	r3, #144	; 0x90
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	2101      	movs	r1, #1
 800234c:	0018      	movs	r0, r3
 800234e:	f001 fb69 	bl	8003a24 <HAL_GPIO_ReadPin>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d1f7      	bne.n	8002346 <Flap_open+0xa>
	{

	}
	Motor_stop();
 8002356:	f7ff ffde 	bl	8002316 <Motor_stop>
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <Flap_close>:

void Flap_close(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	Motor_backward();
 8002364:	f7ff ffc4 	bl	80022f0 <Motor_backward>
	while(GET_LIMIT_MIN)
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	2390      	movs	r3, #144	; 0x90
 800236c:	05db      	lsls	r3, r3, #23
 800236e:	2102      	movs	r1, #2
 8002370:	0018      	movs	r0, r3
 8002372:	f001 fb57 	bl	8003a24 <HAL_GPIO_ReadPin>
 8002376:	1e03      	subs	r3, r0, #0
 8002378:	d1f7      	bne.n	800236a <Flap_close+0xa>
	{

	}
	Motor_stop();
 800237a:	f7ff ffcc 	bl	8002316 <Motor_stop>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <Flap_position>:

uint8_t Flap_position(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	if((GET_LIMIT_MIN == HIGH))
 8002388:	2390      	movs	r3, #144	; 0x90
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	2102      	movs	r1, #2
 800238e:	0018      	movs	r0, r3
 8002390:	f001 fb48 	bl	8003a24 <HAL_GPIO_ReadPin>
 8002394:	0003      	movs	r3, r0
 8002396:	2b01      	cmp	r3, #1
 8002398:	d101      	bne.n	800239e <Flap_position+0x1a>
	{
		return OPEN;
 800239a:	2301      	movs	r3, #1
 800239c:	e01f      	b.n	80023de <Flap_position+0x5a>
	}
	else if((GET_LIMIT_MAX == HIGH))
 800239e:	2390      	movs	r3, #144	; 0x90
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	2101      	movs	r1, #1
 80023a4:	0018      	movs	r0, r3
 80023a6:	f001 fb3d 	bl	8003a24 <HAL_GPIO_ReadPin>
 80023aa:	0003      	movs	r3, r0
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <Flap_position+0x30>
	{
		return CLOSE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	e014      	b.n	80023de <Flap_position+0x5a>
	}
	else if ((GET_LIMIT_MAX == HIGH) && (GET_LIMIT_MIN == HIGH))
 80023b4:	2390      	movs	r3, #144	; 0x90
 80023b6:	05db      	lsls	r3, r3, #23
 80023b8:	2101      	movs	r1, #1
 80023ba:	0018      	movs	r0, r3
 80023bc:	f001 fb32 	bl	8003a24 <HAL_GPIO_ReadPin>
 80023c0:	0003      	movs	r3, r0
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10a      	bne.n	80023dc <Flap_position+0x58>
 80023c6:	2390      	movs	r3, #144	; 0x90
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	2102      	movs	r1, #2
 80023cc:	0018      	movs	r0, r3
 80023ce:	f001 fb29 	bl	8003a24 <HAL_GPIO_ReadPin>
 80023d2:	0003      	movs	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <Flap_position+0x58>
	{
		return OPEN;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <Flap_position+0x5a>
	}
	else
	{
		return OPEN;
 80023dc:	2301      	movs	r3, #1
	}

}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <Card_detect>:

void Card_detect(void)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
	HAL_Delay(30*1000);
 80023ea:	4b46      	ldr	r3, [pc, #280]	; (8002504 <Card_detect+0x120>)
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 fec5 	bl	800317c <HAL_Delay>
	if(Flap_position() == OPEN)
 80023f2:	f7ff ffc7 	bl	8002384 <Flap_position>
 80023f6:	0003      	movs	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d101      	bne.n	8002400 <Card_detect+0x1c>
	{
		Flap_close();
 80023fc:	f7ff ffb0 	bl	8002360 <Flap_close>
	uint8_t str[16]; // Max_LEN = 16
	uint8_t status;

	while(1)
	{
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8002400:	2517      	movs	r5, #23
 8002402:	197c      	adds	r4, r7, r5
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	0019      	movs	r1, r3
 8002408:	2026      	movs	r0, #38	; 0x26
 800240a:	f000 fce1 	bl	8002dd0 <MFRC522_Request>
 800240e:	0003      	movs	r3, r0
 8002410:	7023      	strb	r3, [r4, #0]
		status = MFRC522_Anticoll(str);		//Take a collision, look up 5 bytes
 8002412:	197c      	adds	r4, r7, r5
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	0018      	movs	r0, r3
 8002418:	f000 fd09 	bl	8002e2e <MFRC522_Anticoll>
 800241c:	0003      	movs	r3, r0
 800241e:	7023      	strb	r3, [r4, #0]
		if(status == MI_OK)
 8002420:	197b      	adds	r3, r7, r5
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d000      	beq.n	800242a <Card_detect+0x46>
 8002428:	e067      	b.n	80024fa <Card_detect+0x116>
		{
			if( ((str[0] == Key_Card[0]) &&
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b36      	ldr	r3, [pc, #216]	; (8002508 <Card_detect+0x124>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d117      	bne.n	8002466 <Card_detect+0x82>
				(str[1] == Key_Card[1]) &&
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	785a      	ldrb	r2, [r3, #1]
 800243a:	4b33      	ldr	r3, [pc, #204]	; (8002508 <Card_detect+0x124>)
 800243c:	785b      	ldrb	r3, [r3, #1]
			if( ((str[0] == Key_Card[0]) &&
 800243e:	429a      	cmp	r2, r3
 8002440:	d111      	bne.n	8002466 <Card_detect+0x82>
				(str[2] == Key_Card[2]) &&
 8002442:	1d3b      	adds	r3, r7, #4
 8002444:	789a      	ldrb	r2, [r3, #2]
 8002446:	4b30      	ldr	r3, [pc, #192]	; (8002508 <Card_detect+0x124>)
 8002448:	789b      	ldrb	r3, [r3, #2]
				(str[1] == Key_Card[1]) &&
 800244a:	429a      	cmp	r2, r3
 800244c:	d10b      	bne.n	8002466 <Card_detect+0x82>
				(str[3] == Key_Card[3]) &&
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	78da      	ldrb	r2, [r3, #3]
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <Card_detect+0x124>)
 8002454:	78db      	ldrb	r3, [r3, #3]
				(str[2] == Key_Card[2]) &&
 8002456:	429a      	cmp	r2, r3
 8002458:	d105      	bne.n	8002466 <Card_detect+0x82>
				(str[4] == Key_Card[4])) ||
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	791a      	ldrb	r2, [r3, #4]
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <Card_detect+0x124>)
 8002460:	791b      	ldrb	r3, [r3, #4]
				(str[3] == Key_Card[3]) &&
 8002462:	429a      	cmp	r2, r3
 8002464:	d03b      	beq.n	80024de <Card_detect+0xfa>

				((str[0] == Key_Card2[0]) &&
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	4b28      	ldr	r3, [pc, #160]	; (800250c <Card_detect+0x128>)
 800246c:	781b      	ldrb	r3, [r3, #0]
				(str[4] == Key_Card[4])) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d117      	bne.n	80024a2 <Card_detect+0xbe>
				(str[1] == Key_Card2[1]) &&
 8002472:	1d3b      	adds	r3, r7, #4
 8002474:	785a      	ldrb	r2, [r3, #1]
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <Card_detect+0x128>)
 8002478:	785b      	ldrb	r3, [r3, #1]
				((str[0] == Key_Card2[0]) &&
 800247a:	429a      	cmp	r2, r3
 800247c:	d111      	bne.n	80024a2 <Card_detect+0xbe>
				(str[2] == Key_Card2[2]) &&
 800247e:	1d3b      	adds	r3, r7, #4
 8002480:	789a      	ldrb	r2, [r3, #2]
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <Card_detect+0x128>)
 8002484:	789b      	ldrb	r3, [r3, #2]
				(str[1] == Key_Card2[1]) &&
 8002486:	429a      	cmp	r2, r3
 8002488:	d10b      	bne.n	80024a2 <Card_detect+0xbe>
				(str[3] == Key_Card2[3]) &&
 800248a:	1d3b      	adds	r3, r7, #4
 800248c:	78da      	ldrb	r2, [r3, #3]
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <Card_detect+0x128>)
 8002490:	78db      	ldrb	r3, [r3, #3]
				(str[2] == Key_Card2[2]) &&
 8002492:	429a      	cmp	r2, r3
 8002494:	d105      	bne.n	80024a2 <Card_detect+0xbe>
				(str[4] == Key_Card2[4])) ||
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	791a      	ldrb	r2, [r3, #4]
 800249a:	4b1c      	ldr	r3, [pc, #112]	; (800250c <Card_detect+0x128>)
 800249c:	791b      	ldrb	r3, [r3, #4]
				(str[3] == Key_Card2[3]) &&
 800249e:	429a      	cmp	r2, r3
 80024a0:	d01d      	beq.n	80024de <Card_detect+0xfa>

				((str[0] == Key_Card_Read[0]) &&
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	781a      	ldrb	r2, [r3, #0]
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <Card_detect+0x12c>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
				(str[4] == Key_Card2[4])) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d125      	bne.n	80024fa <Card_detect+0x116>
				(str[1] == Key_Card_Read[1]) &&
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	785a      	ldrb	r2, [r3, #1]
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <Card_detect+0x12c>)
 80024b4:	785b      	ldrb	r3, [r3, #1]
				((str[0] == Key_Card_Read[0]) &&
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d11f      	bne.n	80024fa <Card_detect+0x116>
				(str[2] == Key_Card_Read[2]) &&
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	789a      	ldrb	r2, [r3, #2]
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <Card_detect+0x12c>)
 80024c0:	789b      	ldrb	r3, [r3, #2]
				(str[1] == Key_Card_Read[1]) &&
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d119      	bne.n	80024fa <Card_detect+0x116>
				(str[3] == Key_Card_Read[3]) &&
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	78da      	ldrb	r2, [r3, #3]
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <Card_detect+0x12c>)
 80024cc:	78db      	ldrb	r3, [r3, #3]
				(str[2] == Key_Card_Read[2]) &&
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d113      	bne.n	80024fa <Card_detect+0x116>
				(str[4] == Key_Card_Read[4])))
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	791a      	ldrb	r2, [r3, #4]
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <Card_detect+0x12c>)
 80024d8:	791b      	ldrb	r3, [r3, #4]
				(str[3] == Key_Card_Read[3]) &&
 80024da:	429a      	cmp	r2, r3
 80024dc:	d10d      	bne.n	80024fa <Card_detect+0x116>
			{
				WHITE_LED_ON;
 80024de:	2390      	movs	r3, #144	; 0x90
 80024e0:	05db      	lsls	r3, r3, #23
 80024e2:	2201      	movs	r2, #1
 80024e4:	2104      	movs	r1, #4
 80024e6:	0018      	movs	r0, r3
 80024e8:	f001 fab9 	bl	8003a5e <HAL_GPIO_WritePin>
				Flap_open();
 80024ec:	f7ff ff26 	bl	800233c <Flap_open>
				HAL_Delay(2*1000);
 80024f0:	23fa      	movs	r3, #250	; 0xfa
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 fe41 	bl	800317c <HAL_Delay>

			}

		}

		HAL_Delay(100);
 80024fa:	2064      	movs	r0, #100	; 0x64
 80024fc:	f000 fe3e 	bl	800317c <HAL_Delay>
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8002500:	e77e      	b.n	8002400 <Card_detect+0x1c>
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	00007530 	.word	0x00007530
 8002508:	20000000 	.word	0x20000000
 800250c:	20000008 	.word	0x20000008
 8002510:	20000210 	.word	0x20000210

08002514 <Store_UID>:

}


void Store_UID(void)
{
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
	if(!IS_READ_MODE_ACTIVE)
 800251a:	2380      	movs	r3, #128	; 0x80
 800251c:	00da      	lsls	r2, r3, #3
 800251e:	2390      	movs	r3, #144	; 0x90
 8002520:	05db      	lsls	r3, r3, #23
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f001 fa7d 	bl	8003a24 <HAL_GPIO_ReadPin>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d137      	bne.n	800259e <Store_UID+0x8a>
	uint8_t str[16]; // Max_LEN = 16
	uint8_t status;

	while(1)
	{
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800252e:	2513      	movs	r5, #19
 8002530:	197c      	adds	r4, r7, r5
 8002532:	003b      	movs	r3, r7
 8002534:	0019      	movs	r1, r3
 8002536:	2026      	movs	r0, #38	; 0x26
 8002538:	f000 fc4a 	bl	8002dd0 <MFRC522_Request>
 800253c:	0003      	movs	r3, r0
 800253e:	7023      	strb	r3, [r4, #0]
		status = MFRC522_Anticoll(str);				//Take a collision, look up 5 bytes
 8002540:	197c      	adds	r4, r7, r5
 8002542:	003b      	movs	r3, r7
 8002544:	0018      	movs	r0, r3
 8002546:	f000 fc72 	bl	8002e2e <MFRC522_Anticoll>
 800254a:	0003      	movs	r3, r0
 800254c:	7023      	strb	r3, [r4, #0]
		if(status == MI_OK)
 800254e:	197b      	adds	r3, r7, r5
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d118      	bne.n	8002588 <Store_UID+0x74>
		{

			  Flash_Write_Data(STORE_ADDRESS,str, 5);
 8002556:	003b      	movs	r3, r7
 8002558:	4813      	ldr	r0, [pc, #76]	; (80025a8 <Store_UID+0x94>)
 800255a:	2205      	movs	r2, #5
 800255c:	0019      	movs	r1, r3
 800255e:	f7ff fe35 	bl	80021cc <Flash_Write_Data>

			  for(int i=0;i<11;i++)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e00b      	b.n	8002580 <Store_UID+0x6c>
			  {
				  USER_LED_TOGGLE;
 8002568:	2390      	movs	r3, #144	; 0x90
 800256a:	05db      	lsls	r3, r3, #23
 800256c:	2120      	movs	r1, #32
 800256e:	0018      	movs	r0, r3
 8002570:	f001 fa92 	bl	8003a98 <HAL_GPIO_TogglePin>
				  HAL_Delay(100);
 8002574:	2064      	movs	r0, #100	; 0x64
 8002576:	f000 fe01 	bl	800317c <HAL_Delay>
			  for(int i=0;i<11;i++)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	3301      	adds	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	ddf0      	ble.n	8002568 <Store_UID+0x54>
			  }
			  return;
 8002586:	e00b      	b.n	80025a0 <Store_UID+0x8c>

		}
		USER_LED_oFF;
 8002588:	2390      	movs	r3, #144	; 0x90
 800258a:	05db      	lsls	r3, r3, #23
 800258c:	2201      	movs	r2, #1
 800258e:	2120      	movs	r1, #32
 8002590:	0018      	movs	r0, r3
 8002592:	f001 fa64 	bl	8003a5e <HAL_GPIO_WritePin>

		HAL_Delay(100);
 8002596:	2064      	movs	r0, #100	; 0x64
 8002598:	f000 fdf0 	bl	800317c <HAL_Delay>
		status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800259c:	e7c7      	b.n	800252e <Store_UID+0x1a>
		return;
 800259e:	46c0      	nop			; (mov r8, r8)

	}

//	NVIC_SystemReset();

}
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b006      	add	sp, #24
 80025a4:	bdb0      	pop	{r4, r5, r7, pc}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	0800fc00 	.word	0x0800fc00

080025ac <Retrieve_UID>:

void Retrieve_UID(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	Flash_Read_Data (STORE_ADDRESS, Key_Card_Read, 5);
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <Retrieve_UID+0x18>)
 80025b2:	4805      	ldr	r0, [pc, #20]	; (80025c8 <Retrieve_UID+0x1c>)
 80025b4:	2205      	movs	r2, #5
 80025b6:	0019      	movs	r1, r3
 80025b8:	f7ff fe68 	bl	800228c <Flash_Read_Data>

}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	20000210 	.word	0x20000210
 80025c8:	0800fc00 	.word	0x0800fc00

080025cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d0:	f000 fd70 	bl	80030b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d4:	f000 f84e 	bl	8002674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025d8:	f000 f8ca 	bl	8002770 <MX_GPIO_Init>
  MX_SPI1_Init();
 80025dc:	f000 f88a 	bl	80026f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 80025e0:	f000 fabc 	bl	8002b5c <MFRC522_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  USER_LED_ON;
 80025e4:	2390      	movs	r3, #144	; 0x90
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	2200      	movs	r2, #0
 80025ea:	2120      	movs	r1, #32
 80025ec:	0018      	movs	r0, r3
 80025ee:	f001 fa36 	bl	8003a5e <HAL_GPIO_WritePin>
  WHITE_LED_OFF;
 80025f2:	2390      	movs	r3, #144	; 0x90
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	2200      	movs	r2, #0
 80025f8:	2104      	movs	r1, #4
 80025fa:	0018      	movs	r0, r3
 80025fc:	f001 fa2f 	bl	8003a5e <HAL_GPIO_WritePin>
  Store_UID();
 8002600:	f7ff ff88 	bl	8002514 <Store_UID>
  Retrieve_UID();
 8002604:	f7ff ffd2 	bl	80025ac <Retrieve_UID>
//  uint32_t Key_Card[5]  = {0x93, 0x59, 0x93, 0x6, 0x5f};
//  Flash_Write_Data(STORE_ADDRESS,Key_Card, 5);



  Card_detect();
 8002608:	f7ff feec 	bl	80023e4 <Card_detect>

    /* USER CODE BEGIN 3 */



	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 800260c:	4b15      	ldr	r3, [pc, #84]	; (8002664 <main+0x98>)
 800260e:	0019      	movs	r1, r3
 8002610:	2026      	movs	r0, #38	; 0x26
 8002612:	f000 fbdd 	bl	8002dd0 <MFRC522_Request>
 8002616:	0003      	movs	r3, r0
 8002618:	001a      	movs	r2, r3
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <main+0x9c>)
 800261c:	701a      	strb	r2, [r3, #0]
	  status = MFRC522_Anticoll(str);		//Take a collision, look up 5 bytes
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <main+0x98>)
 8002620:	0018      	movs	r0, r3
 8002622:	f000 fc04 	bl	8002e2e <MFRC522_Anticoll>
 8002626:	0003      	movs	r3, r0
 8002628:	001a      	movs	r2, r3
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <main+0x9c>)
 800262c:	701a      	strb	r2, [r3, #0]
	  if(status == MI_OK)
 800262e:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <main+0x9c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d111      	bne.n	800265a <main+0x8e>
	  {
		  static int i =0;
		  i++;
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <main+0xa0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <main+0xa0>)
 800263e:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002640:	2390      	movs	r3, #144	; 0x90
 8002642:	05db      	lsls	r3, r3, #23
 8002644:	2120      	movs	r1, #32
 8002646:	0018      	movs	r0, r3
 8002648:	f001 fa26 	bl	8003a98 <HAL_GPIO_TogglePin>
		  printf("index = %d\n",i);
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <main+0xa0>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <main+0xa4>)
 8002652:	0011      	movs	r1, r2
 8002654:	0018      	movs	r0, r3
 8002656:	f002 ffcb 	bl	80055f0 <iprintf>

	  }

	  HAL_Delay(200);
 800265a:	20c8      	movs	r0, #200	; 0xc8
 800265c:	f000 fd8e 	bl	800317c <HAL_Delay>
	  status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8002660:	e7d4      	b.n	800260c <main+0x40>
 8002662:	46c0      	nop			; (mov r8, r8)
 8002664:	20000280 	.word	0x20000280
 8002668:	2000027c 	.word	0x2000027c
 800266c:	20000290 	.word	0x20000290
 8002670:	08007688 	.word	0x08007688

08002674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b091      	sub	sp, #68	; 0x44
 8002678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267a:	2410      	movs	r4, #16
 800267c:	193b      	adds	r3, r7, r4
 800267e:	0018      	movs	r0, r3
 8002680:	2330      	movs	r3, #48	; 0x30
 8002682:	001a      	movs	r2, r3
 8002684:	2100      	movs	r1, #0
 8002686:	f003 f80f 	bl	80056a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268a:	003b      	movs	r3, r7
 800268c:	0018      	movs	r0, r3
 800268e:	2310      	movs	r3, #16
 8002690:	001a      	movs	r2, r3
 8002692:	2100      	movs	r1, #0
 8002694:	f003 f808 	bl	80056a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002698:	0021      	movs	r1, r4
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2201      	movs	r2, #1
 80026a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2210      	movs	r2, #16
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2200      	movs	r2, #0
 80026b0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	0018      	movs	r0, r3
 80026b6:	f001 fa0b 	bl	8003ad0 <HAL_RCC_OscConfig>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80026be:	f000 f8bb 	bl	8002838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	003b      	movs	r3, r7
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80026c8:	003b      	movs	r3, r7
 80026ca:	2200      	movs	r2, #0
 80026cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ce:	003b      	movs	r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026d4:	003b      	movs	r3, r7
 80026d6:	2200      	movs	r2, #0
 80026d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026da:	003b      	movs	r3, r7
 80026dc:	2100      	movs	r1, #0
 80026de:	0018      	movs	r0, r3
 80026e0:	f001 fd10 	bl	8004104 <HAL_RCC_ClockConfig>
 80026e4:	1e03      	subs	r3, r0, #0
 80026e6:	d001      	beq.n	80026ec <SystemClock_Config+0x78>
  {
    Error_Handler();
 80026e8:	f000 f8a6 	bl	8002838 <Error_Handler>
  }
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b011      	add	sp, #68	; 0x44
 80026f2:	bd90      	pop	{r4, r7, pc}

080026f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <MX_SPI1_Init+0x74>)
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <MX_SPI1_Init+0x78>)
 80026fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <MX_SPI1_Init+0x74>)
 8002700:	2282      	movs	r2, #130	; 0x82
 8002702:	0052      	lsls	r2, r2, #1
 8002704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <MX_SPI1_Init+0x74>)
 8002708:	2200      	movs	r2, #0
 800270a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <MX_SPI1_Init+0x74>)
 800270e:	22e0      	movs	r2, #224	; 0xe0
 8002710:	00d2      	lsls	r2, r2, #3
 8002712:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <MX_SPI1_Init+0x74>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <MX_SPI1_Init+0x74>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <MX_SPI1_Init+0x74>)
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	0092      	lsls	r2, r2, #2
 8002726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <MX_SPI1_Init+0x74>)
 800272a:	2210      	movs	r2, #16
 800272c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800272e:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <MX_SPI1_Init+0x74>)
 8002730:	2200      	movs	r2, #0
 8002732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <MX_SPI1_Init+0x74>)
 8002736:	2200      	movs	r2, #0
 8002738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <MX_SPI1_Init+0x74>)
 800273c:	2200      	movs	r2, #0
 800273e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002740:	4b09      	ldr	r3, [pc, #36]	; (8002768 <MX_SPI1_Init+0x74>)
 8002742:	2207      	movs	r2, #7
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002746:	4b08      	ldr	r3, [pc, #32]	; (8002768 <MX_SPI1_Init+0x74>)
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <MX_SPI1_Init+0x74>)
 800274e:	2208      	movs	r2, #8
 8002750:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <MX_SPI1_Init+0x74>)
 8002754:	0018      	movs	r0, r3
 8002756:	f001 fdf9 	bl	800434c <HAL_SPI_Init>
 800275a:	1e03      	subs	r3, r0, #0
 800275c:	d001      	beq.n	8002762 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800275e:	f000 f86b 	bl	8002838 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000218 	.word	0x20000218
 800276c:	40013000 	.word	0x40013000

08002770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002776:	240c      	movs	r4, #12
 8002778:	193b      	adds	r3, r7, r4
 800277a:	0018      	movs	r0, r3
 800277c:	2314      	movs	r3, #20
 800277e:	001a      	movs	r2, r3
 8002780:	2100      	movs	r1, #0
 8002782:	f002 ff91 	bl	80056a8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <MX_GPIO_Init+0xc0>)
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	4b29      	ldr	r3, [pc, #164]	; (8002830 <MX_GPIO_Init+0xc0>)
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	0289      	lsls	r1, r1, #10
 8002790:	430a      	orrs	r2, r1
 8002792:	615a      	str	r2, [r3, #20]
 8002794:	4b26      	ldr	r3, [pc, #152]	; (8002830 <MX_GPIO_Init+0xc0>)
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	4013      	ands	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <MX_GPIO_Init+0xc0>)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <MX_GPIO_Init+0xc0>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	02c9      	lsls	r1, r1, #11
 80027ac:	430a      	orrs	r2, r1
 80027ae:	615a      	str	r2, [r3, #20]
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <MX_GPIO_Init+0xc0>)
 80027b2:	695a      	ldr	r2, [r3, #20]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	02db      	lsls	r3, r3, #11
 80027b8:	4013      	ands	r3, r2
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, W_led_Pin|M__Pin|M_A4_Pin|RST_Pin
 80027be:	23c7      	movs	r3, #199	; 0xc7
 80027c0:	0099      	lsls	r1, r3, #2
 80027c2:	2390      	movs	r3, #144	; 0x90
 80027c4:	05db      	lsls	r3, r3, #23
 80027c6:	2200      	movs	r2, #0
 80027c8:	0018      	movs	r0, r3
 80027ca:	f001 f948 	bl	8003a5e <HAL_GPIO_WritePin>
                          |CC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80027ce:	2390      	movs	r3, #144	; 0x90
 80027d0:	05db      	lsls	r3, r3, #23
 80027d2:	2201      	movs	r2, #1
 80027d4:	2120      	movs	r1, #32
 80027d6:	0018      	movs	r0, r3
 80027d8:	f001 f941 	bl	8003a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : limit_max_Pin limit_min_Pin Read_mode_pb_Pin */
  GPIO_InitStruct.Pin = limit_max_Pin|limit_min_Pin|Read_mode_pb_Pin;
 80027dc:	193b      	adds	r3, r7, r4
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <MX_GPIO_Init+0xc4>)
 80027e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	193b      	adds	r3, r7, r4
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e8:	193b      	adds	r3, r7, r4
 80027ea:	2201      	movs	r2, #1
 80027ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ee:	193a      	adds	r2, r7, r4
 80027f0:	2390      	movs	r3, #144	; 0x90
 80027f2:	05db      	lsls	r3, r3, #23
 80027f4:	0011      	movs	r1, r2
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 ffa4 	bl	8003744 <HAL_GPIO_Init>

  /*Configure GPIO pins : W_led_Pin M__Pin M_A4_Pin USR_LED_Pin
                           RST_Pin CC_Pin */
  GPIO_InitStruct.Pin = W_led_Pin|M__Pin|M_A4_Pin|USR_LED_Pin
 80027fc:	0021      	movs	r1, r4
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	22cf      	movs	r2, #207	; 0xcf
 8002802:	0092      	lsls	r2, r2, #2
 8002804:	601a      	str	r2, [r3, #0]
                          |RST_Pin|CC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	187b      	adds	r3, r7, r1
 8002808:	2201      	movs	r2, #1
 800280a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	187b      	adds	r3, r7, r1
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	187b      	adds	r3, r7, r1
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	187a      	adds	r2, r7, r1
 800281a:	2390      	movs	r3, #144	; 0x90
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	0011      	movs	r1, r2
 8002820:	0018      	movs	r0, r3
 8002822:	f000 ff8f 	bl	8003744 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	46bd      	mov	sp, r7
 800282a:	b009      	add	sp, #36	; 0x24
 800282c:	bd90      	pop	{r4, r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	40021000 	.word	0x40021000
 8002834:	00000403 	.word	0x00000403

08002838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800283c:	b672      	cpsid	i
}
 800283e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002840:	e7fe      	b.n	8002840 <Error_Handler+0x8>
	...

08002844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_MspInit+0x44>)
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_MspInit+0x44>)
 8002850:	2101      	movs	r1, #1
 8002852:	430a      	orrs	r2, r1
 8002854:	619a      	str	r2, [r3, #24]
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <HAL_MspInit+0x44>)
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_MspInit+0x44>)
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <HAL_MspInit+0x44>)
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0549      	lsls	r1, r1, #21
 800286c:	430a      	orrs	r2, r1
 800286e:	61da      	str	r2, [r3, #28]
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_MspInit+0x44>)
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	055b      	lsls	r3, r3, #21
 8002878:	4013      	ands	r3, r2
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40021000 	.word	0x40021000

0800288c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	2414      	movs	r4, #20
 8002896:	193b      	adds	r3, r7, r4
 8002898:	0018      	movs	r0, r3
 800289a:	2314      	movs	r3, #20
 800289c:	001a      	movs	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	f002 ff02 	bl	80056a8 <memset>
  if(hspi->Instance==SPI1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_SPI_MspInit+0xd8>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d155      	bne.n	800295a <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028b4:	2180      	movs	r1, #128	; 0x80
 80028b6:	0149      	lsls	r1, r1, #5
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	2380      	movs	r3, #128	; 0x80
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	4b27      	ldr	r3, [pc, #156]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0289      	lsls	r1, r1, #10
 80028d4:	430a      	orrs	r2, r1
 80028d6:	615a      	str	r2, [r3, #20]
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	029b      	lsls	r3, r3, #10
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028e8:	695a      	ldr	r2, [r3, #20]
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028ec:	2180      	movs	r1, #128	; 0x80
 80028ee:	02c9      	lsls	r1, r1, #11
 80028f0:	430a      	orrs	r2, r1
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <HAL_SPI_MspInit+0xdc>)
 80028f6:	695a      	ldr	r2, [r3, #20]
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	02db      	lsls	r3, r3, #11
 80028fc:	4013      	ands	r3, r2
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	22c0      	movs	r2, #192	; 0xc0
 8002906:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	193b      	adds	r3, r7, r4
 800290a:	2202      	movs	r2, #2
 800290c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	193b      	adds	r3, r7, r4
 8002916:	2203      	movs	r2, #3
 8002918:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800291a:	193b      	adds	r3, r7, r4
 800291c:	2200      	movs	r2, #0
 800291e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002920:	193a      	adds	r2, r7, r4
 8002922:	2390      	movs	r3, #144	; 0x90
 8002924:	05db      	lsls	r3, r3, #23
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f000 ff0b 	bl	8003744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800292e:	0021      	movs	r1, r4
 8002930:	187b      	adds	r3, r7, r1
 8002932:	2208      	movs	r2, #8
 8002934:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	187b      	adds	r3, r7, r1
 8002938:	2202      	movs	r2, #2
 800293a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	187b      	adds	r3, r7, r1
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002942:	187b      	adds	r3, r7, r1
 8002944:	2203      	movs	r2, #3
 8002946:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	187b      	adds	r3, r7, r1
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_SPI_MspInit+0xe0>)
 8002952:	0019      	movs	r1, r3
 8002954:	0010      	movs	r0, r2
 8002956:	f000 fef5 	bl	8003744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b00b      	add	sp, #44	; 0x2c
 8002960:	bd90      	pop	{r4, r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	40013000 	.word	0x40013000
 8002968:	40021000 	.word	0x40021000
 800296c:	48000400 	.word	0x48000400

08002970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002974:	e7fe      	b.n	8002974 <NMI_Handler+0x4>

08002976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297a:	e7fe      	b.n	800297a <HardFault_Handler+0x4>

0800297c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800298a:	46c0      	nop			; (mov r8, r8)
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002994:	f000 fbd6 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	0002      	movs	r2, r0
 80029a8:	1dfb      	adds	r3, r7, #7
 80029aa:	701a      	strb	r2, [r3, #0]
	uint8_t rx_data;
	HAL_StatusTypeDef errorCode = 5U;
 80029ac:	210f      	movs	r1, #15
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	2205      	movs	r2, #5
 80029b2:	701a      	strb	r2, [r3, #0]

	errorCode = HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 80029b4:	187c      	adds	r4, r7, r1
 80029b6:	250e      	movs	r5, #14
 80029b8:	197a      	adds	r2, r7, r5
 80029ba:	1df9      	adds	r1, r7, #7
 80029bc:	4806      	ldr	r0, [pc, #24]	; (80029d8 <RC522_SPI_Transfer+0x38>)
 80029be:	2364      	movs	r3, #100	; 0x64
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2301      	movs	r3, #1
 80029c4:	f001 fd7a 	bl	80044bc <HAL_SPI_TransmitReceive>
 80029c8:	0003      	movs	r3, r0
 80029ca:	7023      	strb	r3, [r4, #0]
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 80029cc:	197b      	adds	r3, r7, r5
 80029ce:	781b      	ldrb	r3, [r3, #0]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bdb0      	pop	{r4, r5, r7, pc}
 80029d8:	20000218 	.word	0x20000218

080029dc <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	0002      	movs	r2, r0
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	701a      	strb	r2, [r3, #0]
 80029e8:	1dbb      	adds	r3, r7, #6
 80029ea:	1c0a      	adds	r2, r1, #0
 80029ec:	701a      	strb	r2, [r3, #0]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_RESET);
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	0099      	lsls	r1, r3, #2
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	0018      	movs	r0, r3
 80029fa:	f001 f830 	bl	8003a5e <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	227e      	movs	r2, #126	; 0x7e
 8002a08:	4013      	ands	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f7ff ffc7 	bl	80029a0 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8002a12:	1dbb      	adds	r3, r7, #6
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f7ff ffc2 	bl	80029a0 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	0099      	lsls	r1, r3, #2
 8002a20:	2390      	movs	r3, #144	; 0x90
 8002a22:	05db      	lsls	r3, r3, #23
 8002a24:	2201      	movs	r2, #1
 8002a26:	0018      	movs	r0, r3
 8002a28:	f001 f819 	bl	8003a5e <HAL_GPIO_WritePin>
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8002a34:	b5b0      	push	{r4, r5, r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
	uint8_t val = 0x5;
 8002a40:	240f      	movs	r4, #15
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2205      	movs	r2, #5
 8002a46:	701a      	strb	r2, [r3, #0]

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_RESET);
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	2390      	movs	r3, #144	; 0x90
 8002a4e:	05db      	lsls	r3, r3, #23
 8002a50:	2200      	movs	r2, #0
 8002a52:	0018      	movs	r0, r3
 8002a54:	f001 f803 	bl	8003a5e <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	b25b      	sxtb	r3, r3
 8002a60:	227e      	movs	r2, #126	; 0x7e
 8002a62:	4013      	ands	r3, r2
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	4252      	negs	r2, r2
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	b25b      	sxtb	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7ff ff95 	bl	80029a0 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8002a76:	0025      	movs	r5, r4
 8002a78:	193c      	adds	r4, r7, r4
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7ff ff90 	bl	80029a0 <RC522_SPI_Transfer>
 8002a80:	0003      	movs	r3, r0
 8002a82:	7023      	strb	r3, [r4, #0]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	2390      	movs	r3, #144	; 0x90
 8002a8a:	05db      	lsls	r3, r3, #23
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 ffe5 	bl	8003a5e <HAL_GPIO_WritePin>
	return val;	
 8002a94:	197b      	adds	r3, r7, r5
 8002a96:	781b      	ldrb	r3, [r3, #0]
	
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b004      	add	sp, #16
 8002a9e:	bdb0      	pop	{r4, r5, r7, pc}

08002aa0 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8002aa0:	b5b0      	push	{r4, r5, r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	701a      	strb	r2, [r3, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	1c0a      	adds	r2, r1, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8002ab2:	250f      	movs	r5, #15
 8002ab4:	197c      	adds	r4, r7, r5
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ffba 	bl	8002a34 <Read_MFRC522>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002ac4:	197a      	adds	r2, r7, r5
 8002ac6:	1dbb      	adds	r3, r7, #6
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff ff80 	bl	80029dc <Write_MFRC522>
}
 8002adc:	46c0      	nop			; (mov r8, r8)
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b004      	add	sp, #16
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}

08002ae4 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	0002      	movs	r2, r0
 8002aec:	1dfb      	adds	r3, r7, #7
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	1c0a      	adds	r2, r1, #0
 8002af4:	701a      	strb	r2, [r3, #0]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8002af6:	250f      	movs	r5, #15
 8002af8:	197c      	adds	r4, r7, r5
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7ff ff98 	bl	8002a34 <Read_MFRC522>
 8002b04:	0003      	movs	r3, r0
 8002b06:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b25b      	sxtb	r3, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	197a      	adds	r2, r7, r5
 8002b14:	7812      	ldrb	r2, [r2, #0]
 8002b16:	b252      	sxtb	r2, r2
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b25b      	sxtb	r3, r3
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	0011      	movs	r1, r2
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7ff ff59 	bl	80029dc <Write_MFRC522>
} 
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bdb0      	pop	{r4, r5, r7, pc}

08002b32 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 8002b36:	2014      	movs	r0, #20
 8002b38:	f7ff ff7c 	bl	8002a34 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	2014      	movs	r0, #20
 8002b40:	f7ff ffae 	bl	8002aa0 <SetBitMask>
}
 8002b44:	46c0      	nop			; (mov r8, r8)
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8002b4e:	210f      	movs	r1, #15
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7ff ff43 	bl	80029dc <Write_MFRC522>
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(CC_PORT,CC_PIN,GPIO_PIN_SET);		//			A4
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	2390      	movs	r3, #144	; 0x90
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	2201      	movs	r2, #1
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 ff77 	bl	8003a5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RST_PORT,RST_PIN,GPIO_PIN_SET);		// 			B0
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	0059      	lsls	r1, r3, #1
 8002b74:	2390      	movs	r3, #144	; 0x90
 8002b76:	05db      	lsls	r3, r3, #23
 8002b78:	2201      	movs	r2, #1
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 ff6f 	bl	8003a5e <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 8002b80:	f7ff ffe3 	bl	8002b4a <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8002b84:	218d      	movs	r1, #141	; 0x8d
 8002b86:	202a      	movs	r0, #42	; 0x2a
 8002b88:	f7ff ff28 	bl	80029dc <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8002b8c:	213e      	movs	r1, #62	; 0x3e
 8002b8e:	202b      	movs	r0, #43	; 0x2b
 8002b90:	f7ff ff24 	bl	80029dc <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8002b94:	211e      	movs	r1, #30
 8002b96:	202d      	movs	r0, #45	; 0x2d
 8002b98:	f7ff ff20 	bl	80029dc <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	202c      	movs	r0, #44	; 0x2c
 8002ba0:	f7ff ff1c 	bl	80029dc <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8002ba4:	2140      	movs	r1, #64	; 0x40
 8002ba6:	2015      	movs	r0, #21
 8002ba8:	f7ff ff18 	bl	80029dc <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8002bac:	213d      	movs	r1, #61	; 0x3d
 8002bae:	2011      	movs	r0, #17
 8002bb0:	f7ff ff14 	bl	80029dc <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8002bb4:	f7ff ffbd 	bl	8002b32 <AntennaOn>
}
 8002bb8:	46c0      	nop			; (mov r8, r8)
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8002bbe:	b5b0      	push	{r4, r5, r7, lr}
 8002bc0:	b088      	sub	sp, #32
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	0011      	movs	r1, r2
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	240f      	movs	r4, #15
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	1c02      	adds	r2, r0, #0
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	230e      	movs	r3, #14
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	1c0a      	adds	r2, r1, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
    uint8_t status = MI_ERR;
 8002bda:	231f      	movs	r3, #31
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
    uint8_t irqEn = 0x00;
 8002be2:	211e      	movs	r1, #30
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	2200      	movs	r2, #0
 8002be8:	701a      	strb	r2, [r3, #0]
    uint8_t waitIRq = 0x00;
 8002bea:	201d      	movs	r0, #29
 8002bec:	183b      	adds	r3, r7, r0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 8002bf2:	193b      	adds	r3, r7, r4
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d008      	beq.n	8002c0c <MFRC522_ToCard+0x4e>
 8002bfa:	2b0e      	cmp	r3, #14
 8002bfc:	d10f      	bne.n	8002c1e <MFRC522_ToCard+0x60>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8002bfe:	187b      	adds	r3, r7, r1
 8002c00:	2212      	movs	r2, #18
 8002c02:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x10;
 8002c04:	183b      	adds	r3, r7, r0
 8002c06:	2210      	movs	r2, #16
 8002c08:	701a      	strb	r2, [r3, #0]
			break;
 8002c0a:	e009      	b.n	8002c20 <MFRC522_ToCard+0x62>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8002c0c:	231e      	movs	r3, #30
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2277      	movs	r2, #119	; 0x77
 8002c12:	701a      	strb	r2, [r3, #0]
			waitIRq = 0x30;
 8002c14:	231d      	movs	r3, #29
 8002c16:	18fb      	adds	r3, r7, r3
 8002c18:	2230      	movs	r2, #48	; 0x30
 8002c1a:	701a      	strb	r2, [r3, #0]
			break;
 8002c1c:	e000      	b.n	8002c20 <MFRC522_ToCard+0x62>
		}
		default:
			break;
 8002c1e:	46c0      	nop			; (mov r8, r8)
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 8002c20:	231e      	movs	r3, #30
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2280      	movs	r2, #128	; 0x80
 8002c28:	4252      	negs	r2, r2
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	0019      	movs	r1, r3
 8002c30:	2002      	movs	r0, #2
 8002c32:	f7ff fed3 	bl	80029dc <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8002c36:	2180      	movs	r1, #128	; 0x80
 8002c38:	2004      	movs	r0, #4
 8002c3a:	f7ff ff53 	bl	8002ae4 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	200a      	movs	r0, #10
 8002c42:	f7ff ff2d 	bl	8002aa0 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8002c46:	2100      	movs	r1, #0
 8002c48:	2001      	movs	r0, #1
 8002c4a:	f7ff fec7 	bl	80029dc <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	e00a      	b.n	8002c6a <MFRC522_ToCard+0xac>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	18d3      	adds	r3, r2, r3
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	2009      	movs	r0, #9
 8002c60:	f7ff febc 	bl	80029dc <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	3301      	adds	r3, #1
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	230e      	movs	r3, #14
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d3ee      	bcc.n	8002c54 <MFRC522_ToCard+0x96>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8002c76:	240f      	movs	r4, #15
 8002c78:	193b      	adds	r3, r7, r4
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	0019      	movs	r1, r3
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff feac 	bl	80029dc <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8002c84:	193b      	adds	r3, r7, r4
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d103      	bne.n	8002c94 <MFRC522_ToCard+0xd6>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	200d      	movs	r0, #13
 8002c90:	f7ff ff06 	bl	8002aa0 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8002c94:	23fa      	movs	r3, #250	; 0xfa
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002c9a:	251c      	movs	r5, #28
 8002c9c:	197c      	adds	r4, r7, r5
 8002c9e:	2004      	movs	r0, #4
 8002ca0:	f7ff fec8 	bl	8002a34 <Read_MFRC522>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	7023      	strb	r3, [r4, #0]
        i--;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00d      	beq.n	8002cd0 <MFRC522_ToCard+0x112>
 8002cb4:	197b      	adds	r3, r7, r5
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <MFRC522_ToCard+0x112>
 8002cbe:	197b      	adds	r3, r7, r5
 8002cc0:	221d      	movs	r2, #29
 8002cc2:	18ba      	adds	r2, r7, r2
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0e4      	beq.n	8002c9a <MFRC522_ToCard+0xdc>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	200d      	movs	r0, #13
 8002cd4:	f7ff ff06 	bl	8002ae4 <ClearBitMask>
	
    if (i != 0)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <MFRC522_ToCard+0x122>
 8002cde:	e070      	b.n	8002dc2 <MFRC522_ToCard+0x204>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8002ce0:	2006      	movs	r0, #6
 8002ce2:	f7ff fea7 	bl	8002a34 <Read_MFRC522>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	001a      	movs	r2, r3
 8002cea:	231b      	movs	r3, #27
 8002cec:	4013      	ands	r3, r2
 8002cee:	d164      	bne.n	8002dba <MFRC522_ToCard+0x1fc>
        {
            status = MI_OK;
 8002cf0:	211f      	movs	r1, #31
 8002cf2:	187b      	adds	r3, r7, r1
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	701a      	strb	r2, [r3, #0]
            if (n & irqEn & 0x01)
 8002cf8:	231c      	movs	r3, #28
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	221e      	movs	r2, #30
 8002cfe:	18ba      	adds	r2, r7, r2
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	7812      	ldrb	r2, [r2, #0]
 8002d04:	4013      	ands	r3, r2
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	001a      	movs	r2, r3
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d002      	beq.n	8002d16 <MFRC522_ToCard+0x158>
            {   
				status = MI_NOTAGERR;			//??   
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
			}

            if (command == PCD_TRANSCEIVE)
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b0c      	cmp	r3, #12
 8002d1e:	d150      	bne.n	8002dc2 <MFRC522_ToCard+0x204>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002d20:	251c      	movs	r5, #28
 8002d22:	197c      	adds	r4, r7, r5
 8002d24:	200a      	movs	r0, #10
 8002d26:	f7ff fe85 	bl	8002a34 <Read_MFRC522>
 8002d2a:	0003      	movs	r3, r0
 8002d2c:	7023      	strb	r3, [r4, #0]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002d2e:	200c      	movs	r0, #12
 8002d30:	f7ff fe80 	bl	8002a34 <Read_MFRC522>
 8002d34:	0003      	movs	r3, r0
 8002d36:	0019      	movs	r1, r3
 8002d38:	2017      	movs	r0, #23
 8002d3a:	183b      	adds	r3, r7, r0
 8002d3c:	2207      	movs	r2, #7
 8002d3e:	400a      	ands	r2, r1
 8002d40:	701a      	strb	r2, [r3, #0]
                if (lastBits)
 8002d42:	0001      	movs	r1, r0
 8002d44:	187b      	adds	r3, r7, r1
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <MFRC522_ToCard+0x1a4>
                {   
					*backLen = (n-1)*8 + lastBits;   
 8002d4c:	197b      	adds	r3, r7, r5
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	00da      	lsls	r2, r3, #3
 8002d54:	187b      	adds	r3, r7, r1
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	18d3      	adds	r3, r2, r3
 8002d5a:	001a      	movs	r2, r3
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e006      	b.n	8002d70 <MFRC522_ToCard+0x1b2>
				}
                else
                {   
					*backLen = n*8;   
 8002d62:	231c      	movs	r3, #28
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002d70:	221c      	movs	r2, #28
 8002d72:	18bb      	adds	r3, r7, r2
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d102      	bne.n	8002d80 <MFRC522_ToCard+0x1c2>
                {   
					n = 1;    
 8002d7a:	18bb      	adds	r3, r7, r2
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
				}
                if (n > MAX_LEN)
 8002d80:	221c      	movs	r2, #28
 8002d82:	18bb      	adds	r3, r7, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d902      	bls.n	8002d90 <MFRC522_ToCard+0x1d2>
                {   
					n = MAX_LEN;   
 8002d8a:	18bb      	adds	r3, r7, r2
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	701a      	strb	r2, [r3, #0]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e00a      	b.n	8002dac <MFRC522_ToCard+0x1ee>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	18d4      	adds	r4, r2, r3
 8002d9c:	2009      	movs	r0, #9
 8002d9e:	f7ff fe49 	bl	8002a34 <Read_MFRC522>
 8002da2:	0003      	movs	r3, r0
 8002da4:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
 8002dac:	231c      	movs	r3, #28
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d3ee      	bcc.n	8002d96 <MFRC522_ToCard+0x1d8>
 8002db8:	e003      	b.n	8002dc2 <MFRC522_ToCard+0x204>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8002dba:	231f      	movs	r3, #31
 8002dbc:	18fb      	adds	r3, r7, r3
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	701a      	strb	r2, [r3, #0]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
}
 8002dc8:	0018      	movs	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	b008      	add	sp, #32
 8002dce:	bdb0      	pop	{r4, r5, r7, pc}

08002dd0 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	0002      	movs	r2, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	1dfb      	adds	r3, r7, #7
 8002ddc:	701a      	strb	r2, [r3, #0]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8002dde:	2107      	movs	r1, #7
 8002de0:	200d      	movs	r0, #13
 8002de2:	f7ff fdfb 	bl	80029dc <Write_MFRC522>
	
	TagType[0] = reqMode;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	1dfa      	adds	r2, r7, #7
 8002dea:	7812      	ldrb	r2, [r2, #0]
 8002dec:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002dee:	250f      	movs	r5, #15
 8002df0:	197c      	adds	r4, r7, r5
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	6839      	ldr	r1, [r7, #0]
 8002df6:	2308      	movs	r3, #8
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	2201      	movs	r2, #1
 8002e00:	200c      	movs	r0, #12
 8002e02:	f7ff fedc 	bl	8002bbe <MFRC522_ToCard>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]

	if ((status != MI_OK) || (backBits != 0x10))
 8002e0a:	197b      	adds	r3, r7, r5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <MFRC522_Request+0x48>
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d003      	beq.n	8002e20 <MFRC522_Request+0x50>
	{    
		status = MI_ERR;
 8002e18:	230f      	movs	r3, #15
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	701a      	strb	r2, [r3, #0]
	}
   
	return status;
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
}
 8002e26:	0018      	movs	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	b004      	add	sp, #16
 8002e2c:	bdb0      	pop	{r4, r5, r7, pc}

08002e2e <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8002e2e:	b5b0      	push	{r4, r5, r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af02      	add	r7, sp, #8
 8002e34:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8002e36:	230d      	movs	r3, #13
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	200d      	movs	r0, #13
 8002e42:	f7ff fdcb 	bl	80029dc <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2293      	movs	r2, #147	; 0x93
 8002e4a:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	2220      	movs	r2, #32
 8002e52:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002e54:	250f      	movs	r5, #15
 8002e56:	197c      	adds	r4, r7, r5
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	2308      	movs	r3, #8
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	0013      	movs	r3, r2
 8002e64:	2202      	movs	r2, #2
 8002e66:	200c      	movs	r0, #12
 8002e68:	f7ff fea9 	bl	8002bbe <MFRC522_ToCard>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	7023      	strb	r3, [r4, #0]

    if (status == MI_OK)
 8002e70:	197b      	adds	r3, r7, r5
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d128      	bne.n	8002eca <MFRC522_Anticoll+0x9c>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8002e78:	230e      	movs	r3, #14
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	e010      	b.n	8002ea4 <MFRC522_Anticoll+0x76>
		{   
		 	serNumCheck ^= serNum[i];
 8002e82:	200e      	movs	r0, #14
 8002e84:	183b      	adds	r3, r7, r0
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	18d3      	adds	r3, r2, r3
 8002e8c:	7819      	ldrb	r1, [r3, #0]
 8002e8e:	220d      	movs	r2, #13
 8002e90:	18bb      	adds	r3, r7, r2
 8002e92:	18ba      	adds	r2, r7, r2
 8002e94:	7812      	ldrb	r2, [r2, #0]
 8002e96:	404a      	eors	r2, r1
 8002e98:	701a      	strb	r2, [r3, #0]
		for (i=0; i<4; i++)
 8002e9a:	183b      	adds	r3, r7, r0
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	3201      	adds	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	220e      	movs	r2, #14
 8002ea6:	18bb      	adds	r3, r7, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d9e9      	bls.n	8002e82 <MFRC522_Anticoll+0x54>
		}
		if (serNumCheck != serNum[i])
 8002eae:	18bb      	adds	r3, r7, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	18d3      	adds	r3, r2, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	220d      	movs	r2, #13
 8002eba:	18ba      	adds	r2, r7, r2
 8002ebc:	7812      	ldrb	r2, [r2, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d003      	beq.n	8002eca <MFRC522_Anticoll+0x9c>
		{   
			status = MI_ERR;    
 8002ec2:	230f      	movs	r3, #15
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	701a      	strb	r2, [r3, #0]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8002eca:	230f      	movs	r3, #15
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	781b      	ldrb	r3, [r3, #0]
} 
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bdb0      	pop	{r4, r5, r7, pc}

08002ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	0018      	movs	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <_kill>:

int _kill(int pid, int sig)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eee:	f002 fc35 	bl	800575c <__errno>
 8002ef2:	0003      	movs	r3, r0
 8002ef4:	2216      	movs	r2, #22
 8002ef6:	601a      	str	r2, [r3, #0]
  return -1;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	425b      	negs	r3, r3
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <_exit>:

void _exit (int status)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	425a      	negs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7ff ffe5 	bl	8002ee4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f1a:	e7fe      	b.n	8002f1a <_exit+0x16>

08002f1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e00a      	b.n	8002f44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f2e:	e000      	b.n	8002f32 <_read+0x16>
 8002f30:	bf00      	nop
 8002f32:	0001      	movs	r1, r0
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	60ba      	str	r2, [r7, #8]
 8002f3a:	b2ca      	uxtb	r2, r1
 8002f3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	3301      	adds	r3, #1
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	dbf0      	blt.n	8002f2e <_read+0x12>
  }

  return len;
 8002f4c:	687b      	ldr	r3, [r7, #4]
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b006      	add	sp, #24
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e009      	b.n	8002f7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	60ba      	str	r2, [r7, #8]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	e000      	b.n	8002f76 <_write+0x20>
 8002f74:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf1      	blt.n	8002f68 <_write+0x12>
  }
  return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b006      	add	sp, #24
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_close>:

int _close(int file)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	425b      	negs	r3, r3
}
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b002      	add	sp, #8
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2280      	movs	r2, #128	; 0x80
 8002fb0:	0192      	lsls	r2, r2, #6
 8002fb2:	605a      	str	r2, [r3, #4]
  return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <_isatty>:

int _isatty(int file)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b002      	add	sp, #8
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	0018      	movs	r0, r3
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	b004      	add	sp, #16
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <_sbrk+0x5c>)
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <_sbrk+0x60>)
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <_sbrk+0x64>)
 8003006:	4a12      	ldr	r2, [pc, #72]	; (8003050 <_sbrk+0x68>)
 8003008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <_sbrk+0x64>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	18d3      	adds	r3, r2, r3
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	429a      	cmp	r2, r3
 8003016:	d207      	bcs.n	8003028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003018:	f002 fba0 	bl	800575c <__errno>
 800301c:	0003      	movs	r3, r0
 800301e:	220c      	movs	r2, #12
 8003020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003022:	2301      	movs	r3, #1
 8003024:	425b      	negs	r3, r3
 8003026:	e009      	b.n	800303c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003028:	4b08      	ldr	r3, [pc, #32]	; (800304c <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <_sbrk+0x64>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	18d2      	adds	r2, r2, r3
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <_sbrk+0x64>)
 8003038:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800303a:	68fb      	ldr	r3, [r7, #12]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	b006      	add	sp, #24
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20002000 	.word	0x20002000
 8003048:	00000400 	.word	0x00000400
 800304c:	20000294 	.word	0x20000294
 8003050:	20000410 	.word	0x20000410

08003054 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003058:	46c0      	nop			; (mov r8, r8)
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003060:	480d      	ldr	r0, [pc, #52]	; (8003098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003062:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003064:	f7ff fff6 	bl	8003054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <LoopForever+0x6>)
  ldr r1, =_edata
 800306a:	490d      	ldr	r1, [pc, #52]	; (80030a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <LoopForever+0xe>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <LoopForever+0x16>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800308e:	f002 fb6b 	bl	8005768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003092:	f7ff fa9b 	bl	80025cc <main>

08003096 <LoopForever>:

LoopForever:
    b LoopForever
 8003096:	e7fe      	b.n	8003096 <LoopForever>
  ldr   r0, =_estack
 8003098:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800309c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80030a4:	08007a7c 	.word	0x08007a7c
  ldr r2, =_sbss
 80030a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80030ac:	2000040c 	.word	0x2000040c

080030b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC1_IRQHandler>
	...

080030b4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <HAL_Init+0x24>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_Init+0x24>)
 80030be:	2110      	movs	r1, #16
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80030c4:	2003      	movs	r0, #3
 80030c6:	f000 f809 	bl	80030dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ca:	f7ff fbbb 	bl	8002844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	46c0      	nop			; (mov r8, r8)
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_InitTick+0x5c>)
 80030e6:	681c      	ldr	r4, [r3, #0]
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_InitTick+0x60>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	0019      	movs	r1, r3
 80030ee:	23fa      	movs	r3, #250	; 0xfa
 80030f0:	0098      	lsls	r0, r3, #2
 80030f2:	f7fd f825 	bl	8000140 <__udivsi3>
 80030f6:	0003      	movs	r3, r0
 80030f8:	0019      	movs	r1, r3
 80030fa:	0020      	movs	r0, r4
 80030fc:	f7fd f820 	bl	8000140 <__udivsi3>
 8003100:	0003      	movs	r3, r0
 8003102:	0018      	movs	r0, r3
 8003104:	f000 f905 	bl	8003312 <HAL_SYSTICK_Config>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e00f      	b.n	8003130 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d80b      	bhi.n	800312e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	2301      	movs	r3, #1
 800311a:	425b      	negs	r3, r3
 800311c:	2200      	movs	r2, #0
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f8e2 	bl	80032e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_InitTick+0x64>)
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b003      	add	sp, #12
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	20000010 	.word	0x20000010
 800313c:	20000018 	.word	0x20000018
 8003140:	20000014 	.word	0x20000014

08003144 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_IncTick+0x1c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	001a      	movs	r2, r3
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_IncTick+0x20>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	18d2      	adds	r2, r2, r3
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_IncTick+0x20>)
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	20000018 	.word	0x20000018
 8003164:	20000298 	.word	0x20000298

08003168 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  return uwTick;
 800316c:	4b02      	ldr	r3, [pc, #8]	; (8003178 <HAL_GetTick+0x10>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	20000298 	.word	0x20000298

0800317c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003184:	f7ff fff0 	bl	8003168 <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	d005      	beq.n	80031a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003196:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <HAL_Delay+0x44>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	001a      	movs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	189b      	adds	r3, r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	f7ff ffe0 	bl	8003168 <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d8f7      	bhi.n	80031a4 <HAL_Delay+0x28>
  {
  }
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b004      	add	sp, #16
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	20000018 	.word	0x20000018

080031c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	0002      	movs	r2, r0
 80031cc:	6039      	str	r1, [r7, #0]
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031d2:	1dfb      	adds	r3, r7, #7
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b7f      	cmp	r3, #127	; 0x7f
 80031d8:	d828      	bhi.n	800322c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031da:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <__NVIC_SetPriority+0xd4>)
 80031dc:	1dfb      	adds	r3, r7, #7
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	33c0      	adds	r3, #192	; 0xc0
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	589b      	ldr	r3, [r3, r2]
 80031ea:	1dfa      	adds	r2, r7, #7
 80031ec:	7812      	ldrb	r2, [r2, #0]
 80031ee:	0011      	movs	r1, r2
 80031f0:	2203      	movs	r2, #3
 80031f2:	400a      	ands	r2, r1
 80031f4:	00d2      	lsls	r2, r2, #3
 80031f6:	21ff      	movs	r1, #255	; 0xff
 80031f8:	4091      	lsls	r1, r2
 80031fa:	000a      	movs	r2, r1
 80031fc:	43d2      	mvns	r2, r2
 80031fe:	401a      	ands	r2, r3
 8003200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	401a      	ands	r2, r3
 800320a:	1dfb      	adds	r3, r7, #7
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	0018      	movs	r0, r3
 8003210:	2303      	movs	r3, #3
 8003212:	4003      	ands	r3, r0
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003218:	481f      	ldr	r0, [pc, #124]	; (8003298 <__NVIC_SetPriority+0xd4>)
 800321a:	1dfb      	adds	r3, r7, #7
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b25b      	sxtb	r3, r3
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	430a      	orrs	r2, r1
 8003224:	33c0      	adds	r3, #192	; 0xc0
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800322a:	e031      	b.n	8003290 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <__NVIC_SetPriority+0xd8>)
 800322e:	1dfb      	adds	r3, r7, #7
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	0019      	movs	r1, r3
 8003234:	230f      	movs	r3, #15
 8003236:	400b      	ands	r3, r1
 8003238:	3b08      	subs	r3, #8
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3306      	adds	r3, #6
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	18d3      	adds	r3, r2, r3
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1dfa      	adds	r2, r7, #7
 8003248:	7812      	ldrb	r2, [r2, #0]
 800324a:	0011      	movs	r1, r2
 800324c:	2203      	movs	r2, #3
 800324e:	400a      	ands	r2, r1
 8003250:	00d2      	lsls	r2, r2, #3
 8003252:	21ff      	movs	r1, #255	; 0xff
 8003254:	4091      	lsls	r1, r2
 8003256:	000a      	movs	r2, r1
 8003258:	43d2      	mvns	r2, r2
 800325a:	401a      	ands	r2, r3
 800325c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	019b      	lsls	r3, r3, #6
 8003262:	22ff      	movs	r2, #255	; 0xff
 8003264:	401a      	ands	r2, r3
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	0018      	movs	r0, r3
 800326c:	2303      	movs	r3, #3
 800326e:	4003      	ands	r3, r0
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003274:	4809      	ldr	r0, [pc, #36]	; (800329c <__NVIC_SetPriority+0xd8>)
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	001c      	movs	r4, r3
 800327c:	230f      	movs	r3, #15
 800327e:	4023      	ands	r3, r4
 8003280:	3b08      	subs	r3, #8
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	430a      	orrs	r2, r1
 8003286:	3306      	adds	r3, #6
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	18c3      	adds	r3, r0, r3
 800328c:	3304      	adds	r3, #4
 800328e:	601a      	str	r2, [r3, #0]
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b003      	add	sp, #12
 8003296:	bd90      	pop	{r4, r7, pc}
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1e5a      	subs	r2, r3, #1
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	045b      	lsls	r3, r3, #17
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d301      	bcc.n	80032b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032b4:	2301      	movs	r3, #1
 80032b6:	e010      	b.n	80032da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b8:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <SysTick_Config+0x44>)
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	3a01      	subs	r2, #1
 80032be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c0:	2301      	movs	r3, #1
 80032c2:	425b      	negs	r3, r3
 80032c4:	2103      	movs	r1, #3
 80032c6:	0018      	movs	r0, r3
 80032c8:	f7ff ff7c 	bl	80031c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <SysTick_Config+0x44>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d2:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <SysTick_Config+0x44>)
 80032d4:	2207      	movs	r2, #7
 80032d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b002      	add	sp, #8
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	e000e010 	.word	0xe000e010

080032e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	210f      	movs	r1, #15
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	1c02      	adds	r2, r0, #0
 80032f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	b25b      	sxtb	r3, r3
 8003302:	0011      	movs	r1, r2
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff ff5d 	bl	80031c4 <__NVIC_SetPriority>
}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	46bd      	mov	sp, r7
 800330e:	b004      	add	sp, #16
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ffbf 	bl	80032a0 <SysTick_Config>
 8003322:	0003      	movs	r3, r0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b002      	add	sp, #8
 800332a:	bd80      	pop	{r7, pc}

0800332c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603a      	str	r2, [r7, #0]
 8003338:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800333a:	2317      	movs	r3, #23
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	2201      	movs	r2, #1
 8003340:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8003342:	2316      	movs	r3, #22
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	2200      	movs	r2, #0
 8003348:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800334a:	2315      	movs	r3, #21
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003352:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_FLASH_Program+0x120>)
 8003354:	7e1b      	ldrb	r3, [r3, #24]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_FLASH_Program+0x32>
 800335a:	2302      	movs	r3, #2
 800335c:	e072      	b.n	8003444 <HAL_FLASH_Program+0x118>
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_FLASH_Program+0x120>)
 8003360:	2201      	movs	r2, #1
 8003362:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003364:	2317      	movs	r3, #23
 8003366:	18fe      	adds	r6, r7, r3
 8003368:	4b39      	ldr	r3, [pc, #228]	; (8003450 <HAL_FLASH_Program+0x124>)
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f8ce 	bl	800350c <FLASH_WaitForLastOperation>
 8003370:	0003      	movs	r3, r0
 8003372:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8003374:	2317      	movs	r3, #23
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d15c      	bne.n	8003438 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d104      	bne.n	800338e <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003384:	2315      	movs	r3, #21
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2201      	movs	r2, #1
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	e00b      	b.n	80033a6 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d104      	bne.n	800339e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003394:	2315      	movs	r3, #21
 8003396:	18fb      	adds	r3, r7, r3
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e003      	b.n	80033a6 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800339e:	2315      	movs	r3, #21
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	2204      	movs	r2, #4
 80033a4:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80033a6:	2316      	movs	r3, #22
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e039      	b.n	8003424 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033b0:	2116      	movs	r1, #22
 80033b2:	187b      	adds	r3, r7, r1
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	005a      	lsls	r2, r3, #1
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	18d0      	adds	r0, r2, r3
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	001a      	movs	r2, r3
 80033c4:	3a20      	subs	r2, #32
 80033c6:	2a00      	cmp	r2, #0
 80033c8:	db03      	blt.n	80033d2 <HAL_FLASH_Program+0xa6>
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	40d1      	lsrs	r1, r2
 80033ce:	000c      	movs	r4, r1
 80033d0:	e008      	b.n	80033e4 <HAL_FLASH_Program+0xb8>
 80033d2:	2220      	movs	r2, #32
 80033d4:	1ad2      	subs	r2, r2, r3
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4091      	lsls	r1, r2
 80033da:	000a      	movs	r2, r1
 80033dc:	6839      	ldr	r1, [r7, #0]
 80033de:	40d9      	lsrs	r1, r3
 80033e0:	000c      	movs	r4, r1
 80033e2:	4314      	orrs	r4, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	40da      	lsrs	r2, r3
 80033e8:	0015      	movs	r5, r2
 80033ea:	b2a3      	uxth	r3, r4
 80033ec:	0019      	movs	r1, r3
 80033ee:	f000 f871 	bl	80034d4 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033f2:	2317      	movs	r3, #23
 80033f4:	18fe      	adds	r6, r7, r3
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_FLASH_Program+0x124>)
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f887 	bl	800350c <FLASH_WaitForLastOperation>
 80033fe:	0003      	movs	r3, r0
 8003400:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_FLASH_Program+0x128>)
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_FLASH_Program+0x128>)
 8003408:	2101      	movs	r1, #1
 800340a:	438a      	bics	r2, r1
 800340c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800340e:	2317      	movs	r3, #23
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10e      	bne.n	8003436 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8003418:	2116      	movs	r1, #22
 800341a:	187b      	adds	r3, r7, r1
 800341c:	781a      	ldrb	r2, [r3, #0]
 800341e:	187b      	adds	r3, r7, r1
 8003420:	3201      	adds	r2, #1
 8003422:	701a      	strb	r2, [r3, #0]
 8003424:	2316      	movs	r3, #22
 8003426:	18fa      	adds	r2, r7, r3
 8003428:	2315      	movs	r3, #21
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	7812      	ldrb	r2, [r2, #0]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3bd      	bcc.n	80033b0 <HAL_FLASH_Program+0x84>
 8003434:	e000      	b.n	8003438 <HAL_FLASH_Program+0x10c>
      {
        break;
 8003436:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <HAL_FLASH_Program+0x120>)
 800343a:	2200      	movs	r2, #0
 800343c:	761a      	strb	r2, [r3, #24]

  return status;
 800343e:	2317      	movs	r3, #23
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	781b      	ldrb	r3, [r3, #0]
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b007      	add	sp, #28
 800344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800344c:	200002a0 	.word	0x200002a0
 8003450:	0000c350 	.word	0x0000c350
 8003454:	40022000 	.word	0x40022000

08003458 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	1dfb      	adds	r3, r7, #7
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003464:	4b0c      	ldr	r3, [pc, #48]	; (8003498 <HAL_FLASH_Unlock+0x40>)
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2280      	movs	r2, #128	; 0x80
 800346a:	4013      	ands	r3, r2
 800346c:	d00d      	beq.n	800348a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_FLASH_Unlock+0x40>)
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_FLASH_Unlock+0x44>)
 8003472:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_FLASH_Unlock+0x40>)
 8003476:	4a0a      	ldr	r2, [pc, #40]	; (80034a0 <HAL_FLASH_Unlock+0x48>)
 8003478:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800347a:	4b07      	ldr	r3, [pc, #28]	; (8003498 <HAL_FLASH_Unlock+0x40>)
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	4013      	ands	r3, r2
 8003482:	d002      	beq.n	800348a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003484:	1dfb      	adds	r3, r7, #7
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	40022000 	.word	0x40022000
 800349c:	45670123 	.word	0x45670123
 80034a0:	cdef89ab 	.word	0xcdef89ab

080034a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80034a8:	4b04      	ldr	r3, [pc, #16]	; (80034bc <HAL_FLASH_Lock+0x18>)
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_FLASH_Lock+0x18>)
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	430a      	orrs	r2, r1
 80034b2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40022000 	.word	0x40022000

080034c0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80034c4:	4b02      	ldr	r3, [pc, #8]	; (80034d0 <HAL_FLASH_GetError+0x10>)
 80034c6:	69db      	ldr	r3, [r3, #28]
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	200002a0 	.word	0x200002a0

080034d4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	000a      	movs	r2, r1
 80034de:	1cbb      	adds	r3, r7, #2
 80034e0:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <FLASH_Program_HalfWord+0x30>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <FLASH_Program_HalfWord+0x34>)
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <FLASH_Program_HalfWord+0x34>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1cba      	adds	r2, r7, #2
 80034f8:	8812      	ldrh	r2, [r2, #0]
 80034fa:	801a      	strh	r2, [r3, #0]
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b002      	add	sp, #8
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200002a0 	.word	0x200002a0
 8003508:	40022000 	.word	0x40022000

0800350c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003514:	f7ff fe28 	bl	8003168 <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800351c:	e00f      	b.n	800353e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3301      	adds	r3, #1
 8003522:	d00c      	beq.n	800353e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d007      	beq.n	800353a <FLASH_WaitForLastOperation+0x2e>
 800352a:	f7ff fe1d 	bl	8003168 <HAL_GetTick>
 800352e:	0002      	movs	r2, r0
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	429a      	cmp	r2, r3
 8003538:	d201      	bcs.n	800353e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e01f      	b.n	800357e <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800353e:	4b12      	ldr	r3, [pc, #72]	; (8003588 <FLASH_WaitForLastOperation+0x7c>)
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	2b01      	cmp	r3, #1
 8003548:	d0e9      	beq.n	800351e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <FLASH_WaitForLastOperation+0x7c>)
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	4013      	ands	r3, r2
 8003552:	2b20      	cmp	r3, #32
 8003554:	d102      	bne.n	800355c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <FLASH_WaitForLastOperation+0x7c>)
 8003558:	2220      	movs	r2, #32
 800355a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <FLASH_WaitForLastOperation+0x7c>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2210      	movs	r2, #16
 8003562:	4013      	ands	r3, r2
 8003564:	2b10      	cmp	r3, #16
 8003566:	d005      	beq.n	8003574 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003568:	4b07      	ldr	r3, [pc, #28]	; (8003588 <FLASH_WaitForLastOperation+0x7c>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2204      	movs	r2, #4
 800356e:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003570:	2b04      	cmp	r3, #4
 8003572:	d103      	bne.n	800357c <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003574:	f000 f80a 	bl	800358c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	40022000 	.word	0x40022000

0800358c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003596:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <FLASH_SetErrorCode+0x58>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2210      	movs	r2, #16
 800359c:	4013      	ands	r3, r2
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d109      	bne.n	80035b6 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <FLASH_SetErrorCode+0x5c>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	2202      	movs	r2, #2
 80035a8:	431a      	orrs	r2, r3
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <FLASH_SetErrorCode+0x5c>)
 80035ac:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2210      	movs	r2, #16
 80035b2:	4313      	orrs	r3, r2
 80035b4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <FLASH_SetErrorCode+0x58>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d109      	bne.n	80035d6 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <FLASH_SetErrorCode+0x5c>)
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2201      	movs	r2, #1
 80035c8:	431a      	orrs	r2, r3
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <FLASH_SetErrorCode+0x5c>)
 80035cc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2204      	movs	r2, #4
 80035d2:	4313      	orrs	r3, r2
 80035d4:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035d6:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <FLASH_SetErrorCode+0x58>)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
}  
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40022000 	.word	0x40022000
 80035e8:	200002a0 	.word	0x200002a0

080035ec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035f6:	230f      	movs	r3, #15
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 8003604:	7e1b      	ldrb	r3, [r3, #24]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_FLASHEx_Erase+0x22>
 800360a:	2302      	movs	r3, #2
 800360c:	e05a      	b.n	80036c4 <HAL_FLASHEx_Erase+0xd8>
 800360e:	4b2f      	ldr	r3, [pc, #188]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 8003610:	2201      	movs	r2, #1
 8003612:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d116      	bne.n	800364a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800361c:	4b2c      	ldr	r3, [pc, #176]	; (80036d0 <HAL_FLASHEx_Erase+0xe4>)
 800361e:	0018      	movs	r0, r3
 8003620:	f7ff ff74 	bl	800350c <FLASH_WaitForLastOperation>
 8003624:	1e03      	subs	r3, r0, #0
 8003626:	d147      	bne.n	80036b8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003628:	f000 f856 	bl	80036d8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362c:	230f      	movs	r3, #15
 800362e:	18fc      	adds	r4, r7, r3
 8003630:	4b27      	ldr	r3, [pc, #156]	; (80036d0 <HAL_FLASHEx_Erase+0xe4>)
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff ff6a 	bl	800350c <FLASH_WaitForLastOperation>
 8003638:	0003      	movs	r3, r0
 800363a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800363c:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_FLASHEx_Erase+0xe8>)
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_FLASHEx_Erase+0xe8>)
 8003642:	2104      	movs	r1, #4
 8003644:	438a      	bics	r2, r1
 8003646:	611a      	str	r2, [r3, #16]
 8003648:	e036      	b.n	80036b8 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <HAL_FLASHEx_Erase+0xe4>)
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff ff5d 	bl	800350c <FLASH_WaitForLastOperation>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d130      	bne.n	80036b8 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2201      	movs	r2, #1
 800365a:	4252      	negs	r2, r2
 800365c:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	e01f      	b.n	80036a6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	0018      	movs	r0, r3
 800366a:	f000 f84d 	bl	8003708 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800366e:	250f      	movs	r5, #15
 8003670:	197c      	adds	r4, r7, r5
 8003672:	4b17      	ldr	r3, [pc, #92]	; (80036d0 <HAL_FLASHEx_Erase+0xe4>)
 8003674:	0018      	movs	r0, r3
 8003676:	f7ff ff49 	bl	800350c <FLASH_WaitForLastOperation>
 800367a:	0003      	movs	r3, r0
 800367c:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <HAL_FLASHEx_Erase+0xe8>)
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <HAL_FLASHEx_Erase+0xe8>)
 8003684:	2102      	movs	r1, #2
 8003686:	438a      	bics	r2, r1
 8003688:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 800368a:	197b      	adds	r3, r7, r5
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	601a      	str	r2, [r3, #0]
            break;
 8003698:	e00e      	b.n	80036b8 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	00d2      	lsls	r2, r2, #3
 80036a0:	4694      	mov	ip, r2
 80036a2:	4463      	add	r3, ip
 80036a4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	029a      	lsls	r2, r3, #10
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d3d6      	bcc.n	8003666 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <HAL_FLASHEx_Erase+0xe0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	761a      	strb	r2, [r3, #24]

  return status;
 80036be:	230f      	movs	r3, #15
 80036c0:	18fb      	adds	r3, r7, r3
 80036c2:	781b      	ldrb	r3, [r3, #0]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	b004      	add	sp, #16
 80036ca:	bdb0      	pop	{r4, r5, r7, pc}
 80036cc:	200002a0 	.word	0x200002a0
 80036d0:	0000c350 	.word	0x0000c350
 80036d4:	40022000 	.word	0x40022000

080036d8 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <FLASH_MassErase+0x28>)
 80036de:	2200      	movs	r2, #0
 80036e0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <FLASH_MassErase+0x2c>)
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	4b07      	ldr	r3, [pc, #28]	; (8003704 <FLASH_MassErase+0x2c>)
 80036e8:	2104      	movs	r1, #4
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <FLASH_MassErase+0x2c>)
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <FLASH_MassErase+0x2c>)
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	430a      	orrs	r2, r1
 80036f8:	611a      	str	r2, [r3, #16]
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	200002a0 	.word	0x200002a0
 8003704:	40022000 	.word	0x40022000

08003708 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <FLASH_PageErase+0x34>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <FLASH_PageErase+0x38>)
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <FLASH_PageErase+0x38>)
 800371c:	2102      	movs	r1, #2
 800371e:	430a      	orrs	r2, r1
 8003720:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <FLASH_PageErase+0x38>)
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <FLASH_PageErase+0x38>)
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <FLASH_PageErase+0x38>)
 800372e:	2140      	movs	r1, #64	; 0x40
 8003730:	430a      	orrs	r2, r1
 8003732:	611a      	str	r2, [r3, #16]
}
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	46bd      	mov	sp, r7
 8003738:	b002      	add	sp, #8
 800373a:	bd80      	pop	{r7, pc}
 800373c:	200002a0 	.word	0x200002a0
 8003740:	40022000 	.word	0x40022000

08003744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003752:	e14f      	b.n	80039f4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2101      	movs	r1, #1
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4091      	lsls	r1, r2
 800375e:	000a      	movs	r2, r1
 8003760:	4013      	ands	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d100      	bne.n	800376c <HAL_GPIO_Init+0x28>
 800376a:	e140      	b.n	80039ee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2203      	movs	r2, #3
 8003772:	4013      	ands	r3, r2
 8003774:	2b01      	cmp	r3, #1
 8003776:	d005      	beq.n	8003784 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003780:	2b02      	cmp	r3, #2
 8003782:	d130      	bne.n	80037e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	409a      	lsls	r2, r3
 8003792:	0013      	movs	r3, r2
 8003794:	43da      	mvns	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	409a      	lsls	r2, r3
 80037a6:	0013      	movs	r3, r2
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ba:	2201      	movs	r2, #1
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	43da      	mvns	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4013      	ands	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	091b      	lsrs	r3, r3, #4
 80037d0:	2201      	movs	r2, #1
 80037d2:	401a      	ands	r2, r3
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	409a      	lsls	r2, r3
 80037d8:	0013      	movs	r3, r2
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	4013      	ands	r3, r2
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d017      	beq.n	8003822 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	2203      	movs	r2, #3
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	43da      	mvns	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689a      	ldr	r2, [r3, #8]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	0013      	movs	r3, r2
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2203      	movs	r2, #3
 8003828:	4013      	ands	r3, r2
 800382a:	2b02      	cmp	r3, #2
 800382c:	d123      	bne.n	8003876 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	58d3      	ldr	r3, [r2, r3]
 800383a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2207      	movs	r2, #7
 8003840:	4013      	ands	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	220f      	movs	r2, #15
 8003846:	409a      	lsls	r2, r3
 8003848:	0013      	movs	r3, r2
 800384a:	43da      	mvns	r2, r3
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4013      	ands	r3, r2
 8003850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2107      	movs	r1, #7
 800385a:	400b      	ands	r3, r1
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	409a      	lsls	r2, r3
 8003860:	0013      	movs	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	0092      	lsls	r2, r2, #2
 8003872:	6939      	ldr	r1, [r7, #16]
 8003874:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	409a      	lsls	r2, r3
 8003884:	0013      	movs	r3, r2
 8003886:	43da      	mvns	r2, r3
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2203      	movs	r2, #3
 8003894:	401a      	ands	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	409a      	lsls	r2, r3
 800389c:	0013      	movs	r3, r2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	029b      	lsls	r3, r3, #10
 80038b2:	4013      	ands	r3, r2
 80038b4:	d100      	bne.n	80038b8 <HAL_GPIO_Init+0x174>
 80038b6:	e09a      	b.n	80039ee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b8:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <HAL_GPIO_Init+0x2c8>)
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	4b53      	ldr	r3, [pc, #332]	; (8003a0c <HAL_GPIO_Init+0x2c8>)
 80038be:	2101      	movs	r1, #1
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]
 80038c4:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <HAL_GPIO_Init+0x2c8>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038d0:	4a4f      	ldr	r2, [pc, #316]	; (8003a10 <HAL_GPIO_Init+0x2cc>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2203      	movs	r2, #3
 80038e2:	4013      	ands	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	409a      	lsls	r2, r3
 80038ea:	0013      	movs	r3, r2
 80038ec:	43da      	mvns	r2, r3
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	4013      	ands	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	2390      	movs	r3, #144	; 0x90
 80038f8:	05db      	lsls	r3, r3, #23
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d013      	beq.n	8003926 <HAL_GPIO_Init+0x1e2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a44      	ldr	r2, [pc, #272]	; (8003a14 <HAL_GPIO_Init+0x2d0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00d      	beq.n	8003922 <HAL_GPIO_Init+0x1de>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a43      	ldr	r2, [pc, #268]	; (8003a18 <HAL_GPIO_Init+0x2d4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <HAL_GPIO_Init+0x1da>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a42      	ldr	r2, [pc, #264]	; (8003a1c <HAL_GPIO_Init+0x2d8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d101      	bne.n	800391a <HAL_GPIO_Init+0x1d6>
 8003916:	2303      	movs	r3, #3
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x1e4>
 800391a:	2305      	movs	r3, #5
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x1e4>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x1e4>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x1e4>
 8003926:	2300      	movs	r3, #0
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	2103      	movs	r1, #3
 800392c:	400a      	ands	r2, r1
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	4093      	lsls	r3, r2
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003938:	4935      	ldr	r1, [pc, #212]	; (8003a10 <HAL_GPIO_Init+0x2cc>)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003946:	4b36      	ldr	r3, [pc, #216]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43da      	mvns	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	035b      	lsls	r3, r3, #13
 800395e:	4013      	ands	r3, r2
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800396a:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43da      	mvns	r2, r3
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	039b      	lsls	r3, r3, #14
 8003988:	4013      	ands	r3, r2
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43da      	mvns	r2, r3
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	029b      	lsls	r3, r3, #10
 80039b2:	4013      	ands	r3, r2
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039be:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80039c4:	4b16      	ldr	r3, [pc, #88]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4013      	ands	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	025b      	lsls	r3, r3, #9
 80039dc:	4013      	ands	r3, r2
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039e8:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_GPIO_Init+0x2dc>)
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3301      	adds	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	40da      	lsrs	r2, r3
 80039fc:	1e13      	subs	r3, r2, #0
 80039fe:	d000      	beq.n	8003a02 <HAL_GPIO_Init+0x2be>
 8003a00:	e6a8      	b.n	8003754 <HAL_GPIO_Init+0x10>
  } 
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b006      	add	sp, #24
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	40010000 	.word	0x40010000
 8003a14:	48000400 	.word	0x48000400
 8003a18:	48000800 	.word	0x48000800
 8003a1c:	48000c00 	.word	0x48000c00
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	000a      	movs	r2, r1
 8003a2e:	1cbb      	adds	r3, r7, #2
 8003a30:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	1cba      	adds	r2, r7, #2
 8003a38:	8812      	ldrh	r2, [r2, #0]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a3e:	230f      	movs	r3, #15
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e003      	b.n	8003a50 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a48:	230f      	movs	r3, #15
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a50:	230f      	movs	r3, #15
 8003a52:	18fb      	adds	r3, r7, r3
 8003a54:	781b      	ldrb	r3, [r3, #0]
  }
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	0008      	movs	r0, r1
 8003a68:	0011      	movs	r1, r2
 8003a6a:	1cbb      	adds	r3, r7, #2
 8003a6c:	1c02      	adds	r2, r0, #0
 8003a6e:	801a      	strh	r2, [r3, #0]
 8003a70:	1c7b      	adds	r3, r7, #1
 8003a72:	1c0a      	adds	r2, r1, #0
 8003a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a76:	1c7b      	adds	r3, r7, #1
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7e:	1cbb      	adds	r3, r7, #2
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a86:	e003      	b.n	8003a90 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a88:	1cbb      	adds	r3, r7, #2
 8003a8a:	881a      	ldrh	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	000a      	movs	r2, r1
 8003aa2:	1cbb      	adds	r3, r7, #2
 8003aa4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aac:	1cbb      	adds	r3, r7, #2
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	041a      	lsls	r2, r3, #16
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	1cb9      	adds	r1, r7, #2
 8003abc:	8809      	ldrh	r1, [r1, #0]
 8003abe:	400b      	ands	r3, r1
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b004      	add	sp, #16
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e301      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d100      	bne.n	8003aee <HAL_RCC_OscConfig+0x1e>
 8003aec:	e08d      	b.n	8003c0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003aee:	4bc3      	ldr	r3, [pc, #780]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	220c      	movs	r2, #12
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00e      	beq.n	8003b18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003afa:	4bc0      	ldr	r3, [pc, #768]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	220c      	movs	r2, #12
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x64>
 8003b06:	4bbd      	ldr	r3, [pc, #756]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	025b      	lsls	r3, r3, #9
 8003b0e:	401a      	ands	r2, r3
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	025b      	lsls	r3, r3, #9
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d10d      	bne.n	8003b34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4bb8      	ldr	r3, [pc, #736]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	029b      	lsls	r3, r3, #10
 8003b20:	4013      	ands	r3, r2
 8003b22:	d100      	bne.n	8003b26 <HAL_RCC_OscConfig+0x56>
 8003b24:	e070      	b.n	8003c08 <HAL_RCC_OscConfig+0x138>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d000      	beq.n	8003b30 <HAL_RCC_OscConfig+0x60>
 8003b2e:	e06b      	b.n	8003c08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e2d8      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d107      	bne.n	8003b4c <HAL_RCC_OscConfig+0x7c>
 8003b3c:	4baf      	ldr	r3, [pc, #700]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4bae      	ldr	r3, [pc, #696]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	0249      	lsls	r1, r1, #9
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e02f      	b.n	8003bac <HAL_RCC_OscConfig+0xdc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10c      	bne.n	8003b6e <HAL_RCC_OscConfig+0x9e>
 8003b54:	4ba9      	ldr	r3, [pc, #676]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4ba8      	ldr	r3, [pc, #672]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b5a:	49a9      	ldr	r1, [pc, #676]	; (8003e00 <HAL_RCC_OscConfig+0x330>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	4ba6      	ldr	r3, [pc, #664]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4ba5      	ldr	r3, [pc, #660]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b66:	49a7      	ldr	r1, [pc, #668]	; (8003e04 <HAL_RCC_OscConfig+0x334>)
 8003b68:	400a      	ands	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e01e      	b.n	8003bac <HAL_RCC_OscConfig+0xdc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d10e      	bne.n	8003b94 <HAL_RCC_OscConfig+0xc4>
 8003b76:	4ba1      	ldr	r3, [pc, #644]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4ba0      	ldr	r3, [pc, #640]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	2180      	movs	r1, #128	; 0x80
 8003b7e:	02c9      	lsls	r1, r1, #11
 8003b80:	430a      	orrs	r2, r1
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	4b9d      	ldr	r3, [pc, #628]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b9c      	ldr	r3, [pc, #624]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	2180      	movs	r1, #128	; 0x80
 8003b8c:	0249      	lsls	r1, r1, #9
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xdc>
 8003b94:	4b99      	ldr	r3, [pc, #612]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b98      	ldr	r3, [pc, #608]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	4999      	ldr	r1, [pc, #612]	; (8003e00 <HAL_RCC_OscConfig+0x330>)
 8003b9c:	400a      	ands	r2, r1
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	4b96      	ldr	r3, [pc, #600]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b95      	ldr	r3, [pc, #596]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ba6:	4997      	ldr	r1, [pc, #604]	; (8003e04 <HAL_RCC_OscConfig+0x334>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d014      	beq.n	8003bde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7ff fad8 	bl	8003168 <HAL_GetTick>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bbe:	f7ff fad3 	bl	8003168 <HAL_GetTick>
 8003bc2:	0002      	movs	r2, r0
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b64      	cmp	r3, #100	; 0x64
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e28a      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd0:	4b8a      	ldr	r3, [pc, #552]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	029b      	lsls	r3, r3, #10
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0xee>
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7ff fac3 	bl	8003168 <HAL_GetTick>
 8003be2:	0003      	movs	r3, r0
 8003be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be8:	f7ff fabe 	bl	8003168 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e275      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bfa:	4b80      	ldr	r3, [pc, #512]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	029b      	lsls	r3, r3, #10
 8003c02:	4013      	ands	r3, r2
 8003c04:	d1f0      	bne.n	8003be8 <HAL_RCC_OscConfig+0x118>
 8003c06:	e000      	b.n	8003c0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c08:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	4013      	ands	r3, r2
 8003c12:	d100      	bne.n	8003c16 <HAL_RCC_OscConfig+0x146>
 8003c14:	e069      	b.n	8003cea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c16:	4b79      	ldr	r3, [pc, #484]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	220c      	movs	r2, #12
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d00b      	beq.n	8003c38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	220c      	movs	r2, #12
 8003c26:	4013      	ands	r3, r2
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d11c      	bne.n	8003c66 <HAL_RCC_OscConfig+0x196>
 8003c2c:	4b73      	ldr	r3, [pc, #460]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	025b      	lsls	r3, r3, #9
 8003c34:	4013      	ands	r3, r2
 8003c36:	d116      	bne.n	8003c66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c38:	4b70      	ldr	r3, [pc, #448]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e24b      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b6b      	ldr	r3, [pc, #428]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	22f8      	movs	r2, #248	; 0xf8
 8003c54:	4393      	bics	r3, r2
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	00da      	lsls	r2, r3, #3
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c64:	e041      	b.n	8003cea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d024      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6e:	4b63      	ldr	r3, [pc, #396]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	430a      	orrs	r2, r1
 8003c78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7a:	f7ff fa75 	bl	8003168 <HAL_GetTick>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c84:	f7ff fa70 	bl	8003168 <HAL_GetTick>
 8003c88:	0002      	movs	r2, r0
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e227      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c96:	4b59      	ldr	r3, [pc, #356]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d0f1      	beq.n	8003c84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b56      	ldr	r3, [pc, #344]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	22f8      	movs	r2, #248	; 0xf8
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	00da      	lsls	r2, r3, #3
 8003cb0:	4b52      	ldr	r3, [pc, #328]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	e018      	b.n	8003cea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb8:	4b50      	ldr	r3, [pc, #320]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fa50 	bl	8003168 <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cce:	f7ff fa4b 	bl	8003168 <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e202      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	d1f1      	bne.n	8003cce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2208      	movs	r2, #8
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d036      	beq.n	8003d62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d019      	beq.n	8003d30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfc:	4b3f      	ldr	r3, [pc, #252]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d02:	2101      	movs	r1, #1
 8003d04:	430a      	orrs	r2, r1
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d08:	f7ff fa2e 	bl	8003168 <HAL_GetTick>
 8003d0c:	0003      	movs	r3, r0
 8003d0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d12:	f7ff fa29 	bl	8003168 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1e0      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d24:	4b35      	ldr	r3, [pc, #212]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d0f1      	beq.n	8003d12 <HAL_RCC_OscConfig+0x242>
 8003d2e:	e018      	b.n	8003d62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d34:	4b31      	ldr	r3, [pc, #196]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d36:	2101      	movs	r1, #1
 8003d38:	438a      	bics	r2, r1
 8003d3a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d3c:	f7ff fa14 	bl	8003168 <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d46:	f7ff fa0f 	bl	8003168 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1c6      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d1f1      	bne.n	8003d46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2204      	movs	r2, #4
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <HAL_RCC_OscConfig+0x29e>
 8003d6c:	e0b4      	b.n	8003ed8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6e:	201f      	movs	r0, #31
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	055b      	lsls	r3, r3, #21
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d110      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	0549      	lsls	r1, r1, #21
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	61da      	str	r2, [r3, #28]
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	055b      	lsls	r3, r3, #21
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d9e:	183b      	adds	r3, r7, r0
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	4b18      	ldr	r3, [pc, #96]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	; 0x80
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	d11a      	bne.n	8003de6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db0:	4b15      	ldr	r3, [pc, #84]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b14      	ldr	r3, [pc, #80]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003db6:	2180      	movs	r1, #128	; 0x80
 8003db8:	0049      	lsls	r1, r1, #1
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff f9d3 	bl	8003168 <HAL_GetTick>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7ff f9ce 	bl	8003168 <HAL_GetTick>
 8003dcc:	0002      	movs	r2, r0
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e185      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_OscConfig+0x338>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10e      	bne.n	8003e0c <HAL_RCC_OscConfig+0x33c>
 8003dee:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	4b02      	ldr	r3, [pc, #8]	; (8003dfc <HAL_RCC_OscConfig+0x32c>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	430a      	orrs	r2, r1
 8003df8:	621a      	str	r2, [r3, #32]
 8003dfa:	e035      	b.n	8003e68 <HAL_RCC_OscConfig+0x398>
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	fffeffff 	.word	0xfffeffff
 8003e04:	fffbffff 	.word	0xfffbffff
 8003e08:	40007000 	.word	0x40007000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x35e>
 8003e14:	4bb6      	ldr	r3, [pc, #728]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e16:	6a1a      	ldr	r2, [r3, #32]
 8003e18:	4bb5      	ldr	r3, [pc, #724]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	621a      	str	r2, [r3, #32]
 8003e20:	4bb3      	ldr	r3, [pc, #716]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e22:	6a1a      	ldr	r2, [r3, #32]
 8003e24:	4bb2      	ldr	r3, [pc, #712]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e26:	2104      	movs	r1, #4
 8003e28:	438a      	bics	r2, r1
 8003e2a:	621a      	str	r2, [r3, #32]
 8003e2c:	e01c      	b.n	8003e68 <HAL_RCC_OscConfig+0x398>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCC_OscConfig+0x380>
 8003e36:	4bae      	ldr	r3, [pc, #696]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	4bad      	ldr	r3, [pc, #692]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	621a      	str	r2, [r3, #32]
 8003e42:	4bab      	ldr	r3, [pc, #684]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e44:	6a1a      	ldr	r2, [r3, #32]
 8003e46:	4baa      	ldr	r3, [pc, #680]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e48:	2101      	movs	r1, #1
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	621a      	str	r2, [r3, #32]
 8003e4e:	e00b      	b.n	8003e68 <HAL_RCC_OscConfig+0x398>
 8003e50:	4ba7      	ldr	r3, [pc, #668]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	4ba6      	ldr	r3, [pc, #664]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e56:	2101      	movs	r1, #1
 8003e58:	438a      	bics	r2, r1
 8003e5a:	621a      	str	r2, [r3, #32]
 8003e5c:	4ba4      	ldr	r3, [pc, #656]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e5e:	6a1a      	ldr	r2, [r3, #32]
 8003e60:	4ba3      	ldr	r3, [pc, #652]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e62:	2104      	movs	r1, #4
 8003e64:	438a      	bics	r2, r1
 8003e66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d014      	beq.n	8003e9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e70:	f7ff f97a 	bl	8003168 <HAL_GetTick>
 8003e74:	0003      	movs	r3, r0
 8003e76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e78:	e009      	b.n	8003e8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7ff f975 	bl	8003168 <HAL_GetTick>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	4a9b      	ldr	r2, [pc, #620]	; (80040f4 <HAL_RCC_OscConfig+0x624>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e12b      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8e:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	2202      	movs	r2, #2
 8003e94:	4013      	ands	r3, r2
 8003e96:	d0f0      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3aa>
 8003e98:	e013      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7ff f965 	bl	8003168 <HAL_GetTick>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea2:	e009      	b.n	8003eb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea4:	f7ff f960 	bl	8003168 <HAL_GetTick>
 8003ea8:	0002      	movs	r2, r0
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	4a91      	ldr	r2, [pc, #580]	; (80040f4 <HAL_RCC_OscConfig+0x624>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e116      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b8d      	ldr	r3, [pc, #564]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ec2:	231f      	movs	r3, #31
 8003ec4:	18fb      	adds	r3, r7, r3
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	4b87      	ldr	r3, [pc, #540]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003ed2:	4989      	ldr	r1, [pc, #548]	; (80040f8 <HAL_RCC_OscConfig+0x628>)
 8003ed4:	400a      	ands	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2210      	movs	r2, #16
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d063      	beq.n	8003faa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12a      	bne.n	8003f40 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003eea:	4b81      	ldr	r3, [pc, #516]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003ef6:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efa:	4b7d      	ldr	r3, [pc, #500]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7ff f931 	bl	8003168 <HAL_GetTick>
 8003f06:	0003      	movs	r3, r0
 8003f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f0c:	f7ff f92c 	bl	8003168 <HAL_GetTick>
 8003f10:	0002      	movs	r2, r0
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0e3      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003f1e:	4b74      	ldr	r3, [pc, #464]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f22:	2202      	movs	r2, #2
 8003f24:	4013      	ands	r3, r2
 8003f26:	d0f1      	beq.n	8003f0c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f28:	4b71      	ldr	r3, [pc, #452]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f2c:	22f8      	movs	r2, #248	; 0xf8
 8003f2e:	4393      	bics	r3, r2
 8003f30:	0019      	movs	r1, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	00da      	lsls	r2, r3, #3
 8003f38:	4b6d      	ldr	r3, [pc, #436]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003f3e:	e034      	b.n	8003faa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	3305      	adds	r3, #5
 8003f46:	d111      	bne.n	8003f6c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f4e:	2104      	movs	r1, #4
 8003f50:	438a      	bics	r2, r1
 8003f52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003f54:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	22f8      	movs	r2, #248	; 0xf8
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	0019      	movs	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	00da      	lsls	r2, r3, #3
 8003f64:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f66:	430a      	orrs	r2, r1
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
 8003f6a:	e01e      	b.n	8003faa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003f6c:	4b60      	ldr	r3, [pc, #384]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f70:	4b5f      	ldr	r3, [pc, #380]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f72:	2104      	movs	r1, #4
 8003f74:	430a      	orrs	r2, r1
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003f78:	4b5d      	ldr	r3, [pc, #372]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	4b5c      	ldr	r3, [pc, #368]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	438a      	bics	r2, r1
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f84:	f7ff f8f0 	bl	8003168 <HAL_GetTick>
 8003f88:	0003      	movs	r3, r0
 8003f8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f8c:	e008      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003f8e:	f7ff f8eb 	bl	8003168 <HAL_GetTick>
 8003f92:	0002      	movs	r2, r0
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d901      	bls.n	8003fa0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e0a2      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003fa0:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d1f1      	bne.n	8003f8e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x4e4>
 8003fb2:	e097      	b.n	80040e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fb4:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	220c      	movs	r2, #12
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d100      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x4f2>
 8003fc0:	e06b      	b.n	800409a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d14c      	bne.n	8004064 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b48      	ldr	r3, [pc, #288]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003fd0:	494a      	ldr	r1, [pc, #296]	; (80040fc <HAL_RCC_OscConfig+0x62c>)
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7ff f8c7 	bl	8003168 <HAL_GetTick>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe0:	f7ff f8c2 	bl	8003168 <HAL_GetTick>
 8003fe4:	0002      	movs	r2, r0
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e079      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	2380      	movs	r3, #128	; 0x80
 8003ff8:	049b      	lsls	r3, r3, #18
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	220f      	movs	r2, #15
 8004004:	4393      	bics	r3, r2
 8004006:	0019      	movs	r1, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800400c:	4b38      	ldr	r3, [pc, #224]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 800400e:	430a      	orrs	r2, r1
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c
 8004012:	4b37      	ldr	r3, [pc, #220]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a3a      	ldr	r2, [pc, #232]	; (8004100 <HAL_RCC_OscConfig+0x630>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	431a      	orrs	r2, r3
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004028:	430a      	orrs	r2, r1
 800402a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0449      	lsls	r1, r1, #17
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7ff f895 	bl	8003168 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7ff f890 	bl	8003168 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e047      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004056:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	049b      	lsls	r3, r3, #18
 800405e:	4013      	ands	r3, r2
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x574>
 8004062:	e03f      	b.n	80040e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 800406a:	4924      	ldr	r1, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x62c>)
 800406c:	400a      	ands	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7ff f87a 	bl	8003168 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407a:	f7ff f875 	bl	8003168 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e02c      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	049b      	lsls	r3, r3, #18
 8004094:	4013      	ands	r3, r2
 8004096:	d1f0      	bne.n	800407a <HAL_RCC_OscConfig+0x5aa>
 8004098:	e024      	b.n	80040e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d101      	bne.n	80040a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e01f      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_RCC_OscConfig+0x620>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	2380      	movs	r3, #128	; 0x80
 80040b6:	025b      	lsls	r3, r3, #9
 80040b8:	401a      	ands	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	429a      	cmp	r2, r3
 80040c0:	d10e      	bne.n	80040e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	220f      	movs	r2, #15
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d107      	bne.n	80040e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	23f0      	movs	r3, #240	; 0xf0
 80040d4:	039b      	lsls	r3, r3, #14
 80040d6:	401a      	ands	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b008      	add	sp, #32
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	40021000 	.word	0x40021000
 80040f4:	00001388 	.word	0x00001388
 80040f8:	efffffff 	.word	0xefffffff
 80040fc:	feffffff 	.word	0xfeffffff
 8004100:	ffc2ffff 	.word	0xffc2ffff

08004104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0b3      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2201      	movs	r2, #1
 800411e:	4013      	ands	r3, r2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d911      	bls.n	800414a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2201      	movs	r2, #1
 800412c:	4393      	bics	r3, r2
 800412e:	0019      	movs	r1, r3
 8004130:	4b55      	ldr	r3, [pc, #340]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004138:	4b53      	ldr	r3, [pc, #332]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2201      	movs	r2, #1
 800413e:	4013      	ands	r3, r2
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d001      	beq.n	800414a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e09a      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2202      	movs	r2, #2
 8004150:	4013      	ands	r3, r2
 8004152:	d015      	beq.n	8004180 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2204      	movs	r2, #4
 800415a:	4013      	ands	r3, r2
 800415c:	d006      	beq.n	800416c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800415e:	4b4b      	ldr	r3, [pc, #300]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 8004164:	21e0      	movs	r1, #224	; 0xe0
 8004166:	00c9      	lsls	r1, r1, #3
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b47      	ldr	r3, [pc, #284]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	22f0      	movs	r2, #240	; 0xf0
 8004172:	4393      	bics	r3, r2
 8004174:	0019      	movs	r1, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	4b44      	ldr	r3, [pc, #272]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d040      	beq.n	800420c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004192:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	2380      	movs	r3, #128	; 0x80
 8004198:	029b      	lsls	r3, r3, #10
 800419a:	4013      	ands	r3, r2
 800419c:	d114      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e06e      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041aa:	4b38      	ldr	r3, [pc, #224]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	049b      	lsls	r3, r3, #18
 80041b2:	4013      	ands	r3, r2
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e062      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ba:	4b34      	ldr	r3, [pc, #208]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2202      	movs	r2, #2
 80041c0:	4013      	ands	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e05b      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c8:	4b30      	ldr	r3, [pc, #192]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2203      	movs	r2, #3
 80041ce:	4393      	bics	r3, r2
 80041d0:	0019      	movs	r1, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	4b2d      	ldr	r3, [pc, #180]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041dc:	f7fe ffc4 	bl	8003168 <HAL_GetTick>
 80041e0:	0003      	movs	r3, r0
 80041e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e4:	e009      	b.n	80041fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e6:	f7fe ffbf 	bl	8003168 <HAL_GetTick>
 80041ea:	0002      	movs	r2, r0
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	4a27      	ldr	r2, [pc, #156]	; (8004290 <HAL_RCC_ClockConfig+0x18c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e042      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	4b24      	ldr	r3, [pc, #144]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	220c      	movs	r2, #12
 8004200:	401a      	ands	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	429a      	cmp	r2, r3
 800420a:	d1ec      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2201      	movs	r2, #1
 8004212:	4013      	ands	r3, r2
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d211      	bcs.n	800423e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	4393      	bics	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <HAL_RCC_ClockConfig+0x184>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	4013      	ands	r3, r2
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d001      	beq.n	800423e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e020      	b.n	8004280 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2204      	movs	r2, #4
 8004244:	4013      	ands	r3, r2
 8004246:	d009      	beq.n	800425c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_RCC_ClockConfig+0x190>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68da      	ldr	r2, [r3, #12]
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800425c:	f000 f820 	bl	80042a0 <HAL_RCC_GetSysClockFreq>
 8004260:	0001      	movs	r1, r0
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_RCC_ClockConfig+0x188>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	220f      	movs	r2, #15
 800426a:	4013      	ands	r3, r2
 800426c:	4a0a      	ldr	r2, [pc, #40]	; (8004298 <HAL_RCC_ClockConfig+0x194>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	000a      	movs	r2, r1
 8004272:	40da      	lsrs	r2, r3
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_ClockConfig+0x198>)
 8004276:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004278:	2003      	movs	r0, #3
 800427a:	f7fe ff2f 	bl	80030dc <HAL_InitTick>
  
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b004      	add	sp, #16
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40022000 	.word	0x40022000
 800428c:	40021000 	.word	0x40021000
 8004290:	00001388 	.word	0x00001388
 8004294:	fffff8ff 	.word	0xfffff8ff
 8004298:	080076d4 	.word	0x080076d4
 800429c:	20000010 	.word	0x20000010

080042a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	2300      	movs	r3, #0
 80042b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCC_GetSysClockFreq+0x9c>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	220c      	movs	r2, #12
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d002      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x30>
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d003      	beq.n	80042d6 <HAL_RCC_GetSysClockFreq+0x36>
 80042ce:	e02c      	b.n	800432a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80042d0:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_GetSysClockFreq+0xa0>)
 80042d2:	613b      	str	r3, [r7, #16]
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	0c9b      	lsrs	r3, r3, #18
 80042da:	220f      	movs	r2, #15
 80042dc:	4013      	ands	r3, r2
 80042de:	4a19      	ldr	r2, [pc, #100]	; (8004344 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80042e4:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_RCC_GetSysClockFreq+0x9c>)
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	220f      	movs	r2, #15
 80042ea:	4013      	ands	r3, r2
 80042ec:	4a16      	ldr	r2, [pc, #88]	; (8004348 <HAL_RCC_GetSysClockFreq+0xa8>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	4013      	ands	r3, r2
 80042fa:	d009      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	4810      	ldr	r0, [pc, #64]	; (8004340 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004300:	f7fb ff1e 	bl	8000140 <__udivsi3>
 8004304:	0003      	movs	r3, r0
 8004306:	001a      	movs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4353      	muls	r3, r2
 800430c:	617b      	str	r3, [r7, #20]
 800430e:	e009      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	000a      	movs	r2, r1
 8004314:	0152      	lsls	r2, r2, #5
 8004316:	1a52      	subs	r2, r2, r1
 8004318:	0193      	lsls	r3, r2, #6
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	185b      	adds	r3, r3, r1
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	613b      	str	r3, [r7, #16]
      break;
 8004328:	e002      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetSysClockFreq+0xa0>)
 800432c:	613b      	str	r3, [r7, #16]
      break;
 800432e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004330:	693b      	ldr	r3, [r7, #16]
}
 8004332:	0018      	movs	r0, r3
 8004334:	46bd      	mov	sp, r7
 8004336:	b006      	add	sp, #24
 8004338:	bd80      	pop	{r7, pc}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	40021000 	.word	0x40021000
 8004340:	007a1200 	.word	0x007a1200
 8004344:	080076e4 	.word	0x080076e4
 8004348:	080076f4 	.word	0x080076f4

0800434c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e0a8      	b.n	80044b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	2382      	movs	r3, #130	; 0x82
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	429a      	cmp	r2, r3
 8004370:	d009      	beq.n	8004386 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	61da      	str	r2, [r3, #28]
 8004378:	e005      	b.n	8004386 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	225d      	movs	r2, #93	; 0x5d
 8004390:	5c9b      	ldrb	r3, [r3, r2]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	225c      	movs	r2, #92	; 0x5c
 800439c:	2100      	movs	r1, #0
 800439e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7fe fa72 	bl	800288c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	225d      	movs	r2, #93	; 0x5d
 80043ac:	2102      	movs	r1, #2
 80043ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	438a      	bics	r2, r1
 80043be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68da      	ldr	r2, [r3, #12]
 80043c4:	23e0      	movs	r3, #224	; 0xe0
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d902      	bls.n	80043d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e002      	b.n	80043d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	015b      	lsls	r3, r3, #5
 80043d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	23f0      	movs	r3, #240	; 0xf0
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d008      	beq.n	80043f6 <HAL_SPI_Init+0xaa>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	23e0      	movs	r3, #224	; 0xe0
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d002      	beq.n	80043f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	2382      	movs	r3, #130	; 0x82
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	401a      	ands	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6899      	ldr	r1, [r3, #8]
 8004404:	2384      	movs	r3, #132	; 0x84
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	400b      	ands	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2102      	movs	r1, #2
 8004412:	400b      	ands	r3, r1
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2101      	movs	r1, #1
 800441c:	400b      	ands	r3, r1
 800441e:	431a      	orrs	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6999      	ldr	r1, [r3, #24]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	400b      	ands	r3, r1
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	2138      	movs	r1, #56	; 0x38
 8004432:	400b      	ands	r3, r1
 8004434:	431a      	orrs	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	2180      	movs	r1, #128	; 0x80
 800443c:	400b      	ands	r3, r1
 800443e:	431a      	orrs	r2, r3
 8004440:	0011      	movs	r1, r2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004446:	2380      	movs	r3, #128	; 0x80
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	401a      	ands	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	2204      	movs	r2, #4
 800445c:	401a      	ands	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2110      	movs	r1, #16
 8004464:	400b      	ands	r3, r1
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	2108      	movs	r1, #8
 800446e:	400b      	ands	r3, r1
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68d9      	ldr	r1, [r3, #12]
 8004476:	23f0      	movs	r3, #240	; 0xf0
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	400b      	ands	r3, r1
 800447c:	431a      	orrs	r2, r3
 800447e:	0011      	movs	r1, r2
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	015b      	lsls	r3, r3, #5
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4907      	ldr	r1, [pc, #28]	; (80044b8 <HAL_SPI_Init+0x16c>)
 800449c:	400a      	ands	r2, r1
 800449e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	225d      	movs	r2, #93	; 0x5d
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b004      	add	sp, #16
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	fffff7ff 	.word	0xfffff7ff

080044bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	001a      	movs	r2, r3
 80044ca:	1cbb      	adds	r3, r7, #2
 80044cc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044ce:	2301      	movs	r3, #1
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044d2:	2323      	movs	r3, #35	; 0x23
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	225c      	movs	r2, #92	; 0x5c
 80044de:	5c9b      	ldrb	r3, [r3, r2]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_SPI_TransmitReceive+0x2c>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e1c4      	b.n	8004872 <HAL_SPI_TransmitReceive+0x3b6>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	225c      	movs	r2, #92	; 0x5c
 80044ec:	2101      	movs	r1, #1
 80044ee:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044f0:	f7fe fe3a 	bl	8003168 <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044f8:	201b      	movs	r0, #27
 80044fa:	183b      	adds	r3, r7, r0
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	215d      	movs	r1, #93	; 0x5d
 8004500:	5c52      	ldrb	r2, [r2, r1]
 8004502:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800450a:	2312      	movs	r3, #18
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	1cba      	adds	r2, r7, #2
 8004510:	8812      	ldrh	r2, [r2, #0]
 8004512:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004514:	183b      	adds	r3, r7, r0
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d011      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x84>
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	2382      	movs	r3, #130	; 0x82
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	429a      	cmp	r2, r3
 8004524:	d107      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <HAL_SPI_TransmitReceive+0x7a>
 800452e:	183b      	adds	r3, r7, r0
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d004      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004536:	2323      	movs	r3, #35	; 0x23
 8004538:	18fb      	adds	r3, r7, r3
 800453a:	2202      	movs	r2, #2
 800453c:	701a      	strb	r2, [r3, #0]
    goto error;
 800453e:	e191      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d006      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x98>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <HAL_SPI_TransmitReceive+0x98>
 800454c:	1cbb      	adds	r3, r7, #2
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004554:	2323      	movs	r3, #35	; 0x23
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
    goto error;
 800455c:	e182      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	225d      	movs	r2, #93	; 0x5d
 8004562:	5c9b      	ldrb	r3, [r3, r2]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b04      	cmp	r3, #4
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	225d      	movs	r2, #93	; 0x5d
 800456e:	2105      	movs	r1, #5
 8004570:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1cba      	adds	r2, r7, #2
 8004582:	2146      	movs	r1, #70	; 0x46
 8004584:	8812      	ldrh	r2, [r2, #0]
 8004586:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	1cba      	adds	r2, r7, #2
 800458c:	2144      	movs	r1, #68	; 0x44
 800458e:	8812      	ldrh	r2, [r2, #0]
 8004590:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1cba      	adds	r2, r7, #2
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1cba      	adds	r2, r7, #2
 80045a4:	8812      	ldrh	r2, [r2, #0]
 80045a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68da      	ldr	r2, [r3, #12]
 80045b8:	23e0      	movs	r3, #224	; 0xe0
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	429a      	cmp	r2, r3
 80045be:	d908      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	49ac      	ldr	r1, [pc, #688]	; (800487c <HAL_SPI_TransmitReceive+0x3c0>)
 80045cc:	400a      	ands	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e008      	b.n	80045e4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2180      	movs	r1, #128	; 0x80
 80045de:	0149      	lsls	r1, r1, #5
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d007      	beq.n	8004602 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	23e0      	movs	r3, #224	; 0xe0
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	429a      	cmp	r2, r3
 800460c:	d800      	bhi.n	8004610 <HAL_SPI_TransmitReceive+0x154>
 800460e:	e083      	b.n	8004718 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x168>
 8004618:	2312      	movs	r3, #18
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d000      	beq.n	8004624 <HAL_SPI_TransmitReceive+0x168>
 8004622:	e06d      	b.n	8004700 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	881a      	ldrh	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	1c9a      	adds	r2, r3, #2
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004648:	e05a      	b.n	8004700 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	2202      	movs	r2, #2
 8004652:	4013      	ands	r3, r2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d11b      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x1d4>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465c:	b29b      	uxth	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d016      	beq.n	8004690 <HAL_SPI_TransmitReceive+0x1d4>
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b01      	cmp	r3, #1
 8004666:	d113      	bne.n	8004690 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	881a      	ldrh	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c9a      	adds	r2, r3, #2
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2201      	movs	r2, #1
 8004698:	4013      	ands	r3, r2
 800469a:	2b01      	cmp	r3, #1
 800469c:	d11c      	bne.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2246      	movs	r2, #70	; 0x46
 80046a2:	5a9b      	ldrh	r3, [r3, r2]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	b292      	uxth	r2, r2
 80046b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	1c9a      	adds	r2, r3, #2
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2246      	movs	r2, #70	; 0x46
 80046c6:	5a9b      	ldrh	r3, [r3, r2]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b299      	uxth	r1, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2246      	movs	r2, #70	; 0x46
 80046d2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046d4:	2301      	movs	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046d8:	f7fe fd46 	bl	8003168 <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d80b      	bhi.n	8004700 <HAL_SPI_TransmitReceive+0x244>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	3301      	adds	r3, #1
 80046ec:	d008      	beq.n	8004700 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80046ee:	2323      	movs	r3, #35	; 0x23
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	2203      	movs	r2, #3
 80046f4:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	225d      	movs	r2, #93	; 0x5d
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
        goto error;
 80046fe:	e0b1      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d19f      	bne.n	800464a <HAL_SPI_TransmitReceive+0x18e>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2246      	movs	r2, #70	; 0x46
 800470e:	5a9b      	ldrh	r3, [r3, r2]
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d199      	bne.n	800464a <HAL_SPI_TransmitReceive+0x18e>
 8004716:	e089      	b.n	800482c <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_SPI_TransmitReceive+0x270>
 8004720:	2312      	movs	r3, #18
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d000      	beq.n	800472c <HAL_SPI_TransmitReceive+0x270>
 800472a:	e074      	b.n	8004816 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	330c      	adds	r3, #12
 8004736:	7812      	ldrb	r2, [r2, #0]
 8004738:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	1c5a      	adds	r2, r3, #1
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004752:	e060      	b.n	8004816 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2202      	movs	r2, #2
 800475c:	4013      	ands	r3, r2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d11c      	bne.n	800479c <HAL_SPI_TransmitReceive+0x2e0>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d017      	beq.n	800479c <HAL_SPI_TransmitReceive+0x2e0>
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	2b01      	cmp	r3, #1
 8004770:	d114      	bne.n	800479c <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	330c      	adds	r3, #12
 800477c:	7812      	ldrb	r2, [r2, #0]
 800477e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d11e      	bne.n	80047e8 <HAL_SPI_TransmitReceive+0x32c>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2246      	movs	r2, #70	; 0x46
 80047ae:	5a9b      	ldrh	r3, [r3, r2]
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d018      	beq.n	80047e8 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	330c      	adds	r3, #12
 80047bc:	001a      	movs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2246      	movs	r2, #70	; 0x46
 80047d6:	5a9b      	ldrh	r3, [r3, r2]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b299      	uxth	r1, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2246      	movs	r2, #70	; 0x46
 80047e2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047e4:	2301      	movs	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047e8:	f7fe fcbe 	bl	8003168 <HAL_GetTick>
 80047ec:	0002      	movs	r2, r0
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d802      	bhi.n	80047fe <HAL_SPI_TransmitReceive+0x342>
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	3301      	adds	r3, #1
 80047fc:	d102      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x348>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	2b00      	cmp	r3, #0
 8004802:	d108      	bne.n	8004816 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004804:	2323      	movs	r3, #35	; 0x23
 8004806:	18fb      	adds	r3, r7, r3
 8004808:	2203      	movs	r2, #3
 800480a:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	225d      	movs	r2, #93	; 0x5d
 8004810:	2101      	movs	r1, #1
 8004812:	5499      	strb	r1, [r3, r2]
        goto error;
 8004814:	e026      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d199      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x298>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2246      	movs	r2, #70	; 0x46
 8004824:	5a9b      	ldrh	r3, [r3, r2]
 8004826:	b29b      	uxth	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d193      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	0018      	movs	r0, r3
 8004834:	f000 f954 	bl	8004ae0 <SPI_EndRxTxTransaction>
 8004838:	1e03      	subs	r3, r0, #0
 800483a:	d006      	beq.n	800484a <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 800483c:	2323      	movs	r3, #35	; 0x23
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2201      	movs	r2, #1
 8004842:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2220      	movs	r2, #32
 8004848:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	2b00      	cmp	r3, #0
 8004850:	d004      	beq.n	800485c <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004852:	2323      	movs	r3, #35	; 0x23
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e003      	b.n	8004864 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	225d      	movs	r2, #93	; 0x5d
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	225c      	movs	r2, #92	; 0x5c
 8004868:	2100      	movs	r1, #0
 800486a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800486c:	2323      	movs	r3, #35	; 0x23
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	781b      	ldrb	r3, [r3, #0]
}
 8004872:	0018      	movs	r0, r3
 8004874:	46bd      	mov	sp, r7
 8004876:	b00a      	add	sp, #40	; 0x28
 8004878:	bd80      	pop	{r7, pc}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	ffffefff 	.word	0xffffefff

08004880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	1dfb      	adds	r3, r7, #7
 800488e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004890:	f7fe fc6a 	bl	8003168 <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	18d3      	adds	r3, r2, r3
 800489e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048a0:	f7fe fc62 	bl	8003168 <HAL_GetTick>
 80048a4:	0003      	movs	r3, r0
 80048a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048a8:	4b3a      	ldr	r3, [pc, #232]	; (8004994 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	015b      	lsls	r3, r3, #5
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	4353      	muls	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048b6:	e058      	b.n	800496a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	d055      	beq.n	800496a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048be:	f7fe fc53 	bl	8003168 <HAL_GetTick>
 80048c2:	0002      	movs	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d902      	bls.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d142      	bne.n	800495a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	21e0      	movs	r1, #224	; 0xe0
 80048e0:	438a      	bics	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	2382      	movs	r3, #130	; 0x82
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d113      	bne.n	8004918 <SPI_WaitFlagStateUntilTimeout+0x98>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	2380      	movs	r3, #128	; 0x80
 80048f6:	021b      	lsls	r3, r3, #8
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d005      	beq.n	8004908 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2140      	movs	r1, #64	; 0x40
 8004914:	438a      	bics	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	019b      	lsls	r3, r3, #6
 8004920:	429a      	cmp	r2, r3
 8004922:	d110      	bne.n	8004946 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	491a      	ldr	r1, [pc, #104]	; (8004998 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2180      	movs	r1, #128	; 0x80
 8004940:	0189      	lsls	r1, r1, #6
 8004942:	430a      	orrs	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	225d      	movs	r2, #93	; 0x5d
 800494a:	2101      	movs	r1, #1
 800494c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	225c      	movs	r2, #92	; 0x5c
 8004952:	2100      	movs	r1, #0
 8004954:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e017      	b.n	800498a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3b01      	subs	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	425a      	negs	r2, r3
 800497a:	4153      	adcs	r3, r2
 800497c:	b2db      	uxtb	r3, r3
 800497e:	001a      	movs	r2, r3
 8004980:	1dfb      	adds	r3, r7, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d197      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	0018      	movs	r0, r3
 800498c:	46bd      	mov	sp, r7
 800498e:	b008      	add	sp, #32
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	20000010 	.word	0x20000010
 8004998:	ffffdfff 	.word	0xffffdfff

0800499c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049aa:	2317      	movs	r3, #23
 80049ac:	18fb      	adds	r3, r7, r3
 80049ae:	2200      	movs	r2, #0
 80049b0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049b2:	f7fe fbd9 	bl	8003168 <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	18d3      	adds	r3, r2, r3
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049c2:	f7fe fbd1 	bl	8003168 <HAL_GetTick>
 80049c6:	0003      	movs	r3, r0
 80049c8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049d2:	4b41      	ldr	r3, [pc, #260]	; (8004ad8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	0013      	movs	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	00da      	lsls	r2, r3, #3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	0d1b      	lsrs	r3, r3, #20
 80049e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e4:	4353      	muls	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049e8:	e068      	b.n	8004abc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	23c0      	movs	r3, #192	; 0xc0
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d10a      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0x6e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d107      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	2117      	movs	r1, #23
 8004a02:	187b      	adds	r3, r7, r1
 8004a04:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a06:	187b      	adds	r3, r7, r1
 8004a08:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	d055      	beq.n	8004abc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a10:	f7fe fbaa 	bl	8003168 <HAL_GetTick>
 8004a14:	0002      	movs	r2, r0
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d902      	bls.n	8004a26 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d142      	bne.n	8004aac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	21e0      	movs	r1, #224	; 0xe0
 8004a32:	438a      	bics	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	2382      	movs	r3, #130	; 0x82
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d113      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0xce>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689a      	ldr	r2, [r3, #8]
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d005      	beq.n	8004a5a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689a      	ldr	r2, [r3, #8]
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d107      	bne.n	8004a6a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2140      	movs	r1, #64	; 0x40
 8004a66:	438a      	bics	r2, r1
 8004a68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	019b      	lsls	r3, r3, #6
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d110      	bne.n	8004a98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4916      	ldr	r1, [pc, #88]	; (8004adc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	0189      	lsls	r1, r1, #6
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	225d      	movs	r2, #93	; 0x5d
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	225c      	movs	r2, #92	; 0x5c
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e010      	b.n	8004ace <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d18e      	bne.n	80049ea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b00a      	add	sp, #40	; 0x28
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	20000010 	.word	0x20000010
 8004adc:	ffffdfff 	.word	0xffffdfff

08004ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	23c0      	movs	r3, #192	; 0xc0
 8004af0:	0159      	lsls	r1, r3, #5
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	9300      	str	r3, [sp, #0]
 8004af8:	0013      	movs	r3, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	f7ff ff4e 	bl	800499c <SPI_WaitFifoStateUntilTimeout>
 8004b00:	1e03      	subs	r3, r0, #0
 8004b02:	d007      	beq.n	8004b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b08:	2220      	movs	r2, #32
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e027      	b.n	8004b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	0013      	movs	r3, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	f7ff fead 	bl	8004880 <SPI_WaitFlagStateUntilTimeout>
 8004b26:	1e03      	subs	r3, r0, #0
 8004b28:	d007      	beq.n	8004b3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2e:	2220      	movs	r2, #32
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e014      	b.n	8004b64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	23c0      	movs	r3, #192	; 0xc0
 8004b3e:	00d9      	lsls	r1, r3, #3
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	0013      	movs	r3, r2
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f7ff ff27 	bl	800499c <SPI_WaitFifoStateUntilTimeout>
 8004b4e:	1e03      	subs	r3, r0, #0
 8004b50:	d007      	beq.n	8004b62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b56:	2220      	movs	r2, #32
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e000      	b.n	8004b64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	0018      	movs	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b004      	add	sp, #16
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <__cvt>:
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	001e      	movs	r6, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	0014      	movs	r4, r2
 8004b74:	b08b      	sub	sp, #44	; 0x2c
 8004b76:	429e      	cmp	r6, r3
 8004b78:	da04      	bge.n	8004b84 <__cvt+0x18>
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0609      	lsls	r1, r1, #24
 8004b7e:	1873      	adds	r3, r6, r1
 8004b80:	001e      	movs	r6, r3
 8004b82:	232d      	movs	r3, #45	; 0x2d
 8004b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b86:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004b88:	7013      	strb	r3, [r2, #0]
 8004b8a:	2320      	movs	r3, #32
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	439f      	bics	r7, r3
 8004b90:	2f46      	cmp	r7, #70	; 0x46
 8004b92:	d007      	beq.n	8004ba4 <__cvt+0x38>
 8004b94:	003b      	movs	r3, r7
 8004b96:	3b45      	subs	r3, #69	; 0x45
 8004b98:	4259      	negs	r1, r3
 8004b9a:	414b      	adcs	r3, r1
 8004b9c:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004b9e:	3a01      	subs	r2, #1
 8004ba0:	18cb      	adds	r3, r1, r3
 8004ba2:	9310      	str	r3, [sp, #64]	; 0x40
 8004ba4:	ab09      	add	r3, sp, #36	; 0x24
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	ab08      	add	r3, sp, #32
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bae:	9200      	str	r2, [sp, #0]
 8004bb0:	9302      	str	r3, [sp, #8]
 8004bb2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bb4:	0022      	movs	r2, r4
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	0033      	movs	r3, r6
 8004bba:	f000 fe97 	bl	80058ec <_dtoa_r>
 8004bbe:	0005      	movs	r5, r0
 8004bc0:	2f47      	cmp	r7, #71	; 0x47
 8004bc2:	d102      	bne.n	8004bca <__cvt+0x5e>
 8004bc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004bc6:	07db      	lsls	r3, r3, #31
 8004bc8:	d528      	bpl.n	8004c1c <__cvt+0xb0>
 8004bca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bcc:	18eb      	adds	r3, r5, r3
 8004bce:	9307      	str	r3, [sp, #28]
 8004bd0:	2f46      	cmp	r7, #70	; 0x46
 8004bd2:	d114      	bne.n	8004bfe <__cvt+0x92>
 8004bd4:	782b      	ldrb	r3, [r5, #0]
 8004bd6:	2b30      	cmp	r3, #48	; 0x30
 8004bd8:	d10c      	bne.n	8004bf4 <__cvt+0x88>
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2300      	movs	r3, #0
 8004bde:	0020      	movs	r0, r4
 8004be0:	0031      	movs	r1, r6
 8004be2:	f7fb fc33 	bl	800044c <__aeabi_dcmpeq>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	d104      	bne.n	8004bf4 <__cvt+0x88>
 8004bea:	2301      	movs	r3, #1
 8004bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004bf6:	9a07      	ldr	r2, [sp, #28]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	18d3      	adds	r3, r2, r3
 8004bfc:	9307      	str	r3, [sp, #28]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2300      	movs	r3, #0
 8004c02:	0020      	movs	r0, r4
 8004c04:	0031      	movs	r1, r6
 8004c06:	f7fb fc21 	bl	800044c <__aeabi_dcmpeq>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	d001      	beq.n	8004c12 <__cvt+0xa6>
 8004c0e:	9b07      	ldr	r3, [sp, #28]
 8004c10:	9309      	str	r3, [sp, #36]	; 0x24
 8004c12:	2230      	movs	r2, #48	; 0x30
 8004c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c16:	9907      	ldr	r1, [sp, #28]
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	d306      	bcc.n	8004c2a <__cvt+0xbe>
 8004c1c:	0028      	movs	r0, r5
 8004c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c22:	1b5b      	subs	r3, r3, r5
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	b00b      	add	sp, #44	; 0x2c
 8004c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c2a:	1c59      	adds	r1, r3, #1
 8004c2c:	9109      	str	r1, [sp, #36]	; 0x24
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e7f0      	b.n	8004c14 <__cvt+0xa8>

08004c32 <__exponent>:
 8004c32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c34:	1c83      	adds	r3, r0, #2
 8004c36:	b087      	sub	sp, #28
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	0005      	movs	r5, r0
 8004c3c:	000c      	movs	r4, r1
 8004c3e:	232b      	movs	r3, #43	; 0x2b
 8004c40:	7002      	strb	r2, [r0, #0]
 8004c42:	2900      	cmp	r1, #0
 8004c44:	da01      	bge.n	8004c4a <__exponent+0x18>
 8004c46:	424c      	negs	r4, r1
 8004c48:	3302      	adds	r3, #2
 8004c4a:	706b      	strb	r3, [r5, #1]
 8004c4c:	2c09      	cmp	r4, #9
 8004c4e:	dd2f      	ble.n	8004cb0 <__exponent+0x7e>
 8004c50:	270a      	movs	r7, #10
 8004c52:	ab04      	add	r3, sp, #16
 8004c54:	1dde      	adds	r6, r3, #7
 8004c56:	0020      	movs	r0, r4
 8004c58:	0039      	movs	r1, r7
 8004c5a:	9601      	str	r6, [sp, #4]
 8004c5c:	f7fb fbe0 	bl	8000420 <__aeabi_idivmod>
 8004c60:	3e01      	subs	r6, #1
 8004c62:	3130      	adds	r1, #48	; 0x30
 8004c64:	0020      	movs	r0, r4
 8004c66:	7031      	strb	r1, [r6, #0]
 8004c68:	0039      	movs	r1, r7
 8004c6a:	9402      	str	r4, [sp, #8]
 8004c6c:	f7fb faf2 	bl	8000254 <__divsi3>
 8004c70:	9b02      	ldr	r3, [sp, #8]
 8004c72:	0004      	movs	r4, r0
 8004c74:	2b63      	cmp	r3, #99	; 0x63
 8004c76:	dcee      	bgt.n	8004c56 <__exponent+0x24>
 8004c78:	9b01      	ldr	r3, [sp, #4]
 8004c7a:	3430      	adds	r4, #48	; 0x30
 8004c7c:	1e9a      	subs	r2, r3, #2
 8004c7e:	0013      	movs	r3, r2
 8004c80:	9903      	ldr	r1, [sp, #12]
 8004c82:	7014      	strb	r4, [r2, #0]
 8004c84:	a804      	add	r0, sp, #16
 8004c86:	3007      	adds	r0, #7
 8004c88:	4298      	cmp	r0, r3
 8004c8a:	d80c      	bhi.n	8004ca6 <__exponent+0x74>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	4282      	cmp	r2, r0
 8004c90:	d804      	bhi.n	8004c9c <__exponent+0x6a>
 8004c92:	aa04      	add	r2, sp, #16
 8004c94:	3309      	adds	r3, #9
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	9a01      	ldr	r2, [sp, #4]
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	9a03      	ldr	r2, [sp, #12]
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	1b58      	subs	r0, r3, r5
 8004ca2:	b007      	add	sp, #28
 8004ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ca6:	7818      	ldrb	r0, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	7008      	strb	r0, [r1, #0]
 8004cac:	3101      	adds	r1, #1
 8004cae:	e7e9      	b.n	8004c84 <__exponent+0x52>
 8004cb0:	2330      	movs	r3, #48	; 0x30
 8004cb2:	3430      	adds	r4, #48	; 0x30
 8004cb4:	70ab      	strb	r3, [r5, #2]
 8004cb6:	70ec      	strb	r4, [r5, #3]
 8004cb8:	1d2b      	adds	r3, r5, #4
 8004cba:	e7f1      	b.n	8004ca0 <__exponent+0x6e>

08004cbc <_printf_float>:
 8004cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cbe:	b095      	sub	sp, #84	; 0x54
 8004cc0:	000c      	movs	r4, r1
 8004cc2:	9208      	str	r2, [sp, #32]
 8004cc4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc8:	0007      	movs	r7, r0
 8004cca:	f000 fcf5 	bl	80056b8 <_localeconv_r>
 8004cce:	6803      	ldr	r3, [r0, #0]
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8004cd4:	f7fb fa18 	bl	8000108 <strlen>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9312      	str	r3, [sp, #72]	; 0x48
 8004cdc:	7e23      	ldrb	r3, [r4, #24]
 8004cde:	2207      	movs	r2, #7
 8004ce0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce2:	6823      	ldr	r3, [r4, #0]
 8004ce4:	900d      	str	r0, [sp, #52]	; 0x34
 8004ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cea:	682b      	ldr	r3, [r5, #0]
 8004cec:	05c9      	lsls	r1, r1, #23
 8004cee:	d547      	bpl.n	8004d80 <_printf_float+0xc4>
 8004cf0:	189b      	adds	r3, r3, r2
 8004cf2:	4393      	bics	r3, r2
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	3208      	adds	r2, #8
 8004cf8:	602a      	str	r2, [r5, #0]
 8004cfa:	681e      	ldr	r6, [r3, #0]
 8004cfc:	685d      	ldr	r5, [r3, #4]
 8004cfe:	0032      	movs	r2, r6
 8004d00:	002b      	movs	r3, r5
 8004d02:	64a2      	str	r2, [r4, #72]	; 0x48
 8004d04:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004d06:	2201      	movs	r2, #1
 8004d08:	006b      	lsls	r3, r5, #1
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	930e      	str	r3, [sp, #56]	; 0x38
 8004d0e:	0030      	movs	r0, r6
 8004d10:	4bab      	ldr	r3, [pc, #684]	; (8004fc0 <_printf_float+0x304>)
 8004d12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004d14:	4252      	negs	r2, r2
 8004d16:	f7fd f965 	bl	8001fe4 <__aeabi_dcmpun>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d132      	bne.n	8004d84 <_printf_float+0xc8>
 8004d1e:	2201      	movs	r2, #1
 8004d20:	0030      	movs	r0, r6
 8004d22:	4ba7      	ldr	r3, [pc, #668]	; (8004fc0 <_printf_float+0x304>)
 8004d24:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004d26:	4252      	negs	r2, r2
 8004d28:	f7fb fba0 	bl	800046c <__aeabi_dcmple>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d129      	bne.n	8004d84 <_printf_float+0xc8>
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	0030      	movs	r0, r6
 8004d36:	0029      	movs	r1, r5
 8004d38:	f7fb fb8e 	bl	8000458 <__aeabi_dcmplt>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	d003      	beq.n	8004d48 <_printf_float+0x8c>
 8004d40:	0023      	movs	r3, r4
 8004d42:	222d      	movs	r2, #45	; 0x2d
 8004d44:	3343      	adds	r3, #67	; 0x43
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4a:	4d9e      	ldr	r5, [pc, #632]	; (8004fc4 <_printf_float+0x308>)
 8004d4c:	2b47      	cmp	r3, #71	; 0x47
 8004d4e:	d900      	bls.n	8004d52 <_printf_float+0x96>
 8004d50:	4d9d      	ldr	r5, [pc, #628]	; (8004fc8 <_printf_float+0x30c>)
 8004d52:	2303      	movs	r3, #3
 8004d54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004d56:	6123      	str	r3, [r4, #16]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	439a      	bics	r2, r3
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d64:	0021      	movs	r1, r4
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	0038      	movs	r0, r7
 8004d6a:	9b08      	ldr	r3, [sp, #32]
 8004d6c:	aa13      	add	r2, sp, #76	; 0x4c
 8004d6e:	f000 f9fb 	bl	8005168 <_printf_common>
 8004d72:	3001      	adds	r0, #1
 8004d74:	d000      	beq.n	8004d78 <_printf_float+0xbc>
 8004d76:	e0a3      	b.n	8004ec0 <_printf_float+0x204>
 8004d78:	2001      	movs	r0, #1
 8004d7a:	4240      	negs	r0, r0
 8004d7c:	b015      	add	sp, #84	; 0x54
 8004d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d80:	3307      	adds	r3, #7
 8004d82:	e7b6      	b.n	8004cf2 <_printf_float+0x36>
 8004d84:	0032      	movs	r2, r6
 8004d86:	002b      	movs	r3, r5
 8004d88:	0030      	movs	r0, r6
 8004d8a:	0029      	movs	r1, r5
 8004d8c:	f7fd f92a 	bl	8001fe4 <__aeabi_dcmpun>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d00b      	beq.n	8004dac <_printf_float+0xf0>
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	da03      	bge.n	8004da0 <_printf_float+0xe4>
 8004d98:	0023      	movs	r3, r4
 8004d9a:	222d      	movs	r2, #45	; 0x2d
 8004d9c:	3343      	adds	r3, #67	; 0x43
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004da2:	4d8a      	ldr	r5, [pc, #552]	; (8004fcc <_printf_float+0x310>)
 8004da4:	2b47      	cmp	r3, #71	; 0x47
 8004da6:	d9d4      	bls.n	8004d52 <_printf_float+0x96>
 8004da8:	4d89      	ldr	r5, [pc, #548]	; (8004fd0 <_printf_float+0x314>)
 8004daa:	e7d2      	b.n	8004d52 <_printf_float+0x96>
 8004dac:	2220      	movs	r2, #32
 8004dae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004db0:	6863      	ldr	r3, [r4, #4]
 8004db2:	4391      	bics	r1, r2
 8004db4:	910e      	str	r1, [sp, #56]	; 0x38
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	d14a      	bne.n	8004e50 <_printf_float+0x194>
 8004dba:	3307      	adds	r3, #7
 8004dbc:	6063      	str	r3, [r4, #4]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	9206      	str	r2, [sp, #24]
 8004dca:	aa12      	add	r2, sp, #72	; 0x48
 8004dcc:	9205      	str	r2, [sp, #20]
 8004dce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dd0:	6023      	str	r3, [r4, #0]
 8004dd2:	9204      	str	r2, [sp, #16]
 8004dd4:	aa11      	add	r2, sp, #68	; 0x44
 8004dd6:	9203      	str	r2, [sp, #12]
 8004dd8:	2223      	movs	r2, #35	; 0x23
 8004dda:	a908      	add	r1, sp, #32
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	1852      	adds	r2, r2, r1
 8004de2:	9202      	str	r2, [sp, #8]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	0032      	movs	r2, r6
 8004de8:	002b      	movs	r3, r5
 8004dea:	0038      	movs	r0, r7
 8004dec:	f7ff febe 	bl	8004b6c <__cvt>
 8004df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004df2:	0005      	movs	r5, r0
 8004df4:	2b47      	cmp	r3, #71	; 0x47
 8004df6:	d109      	bne.n	8004e0c <_printf_float+0x150>
 8004df8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004dfa:	1cda      	adds	r2, r3, #3
 8004dfc:	db02      	blt.n	8004e04 <_printf_float+0x148>
 8004dfe:	6862      	ldr	r2, [r4, #4]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	dd49      	ble.n	8004e98 <_printf_float+0x1dc>
 8004e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e06:	3b02      	subs	r3, #2
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004e10:	2b65      	cmp	r3, #101	; 0x65
 8004e12:	d824      	bhi.n	8004e5e <_printf_float+0x1a2>
 8004e14:	0020      	movs	r0, r4
 8004e16:	001a      	movs	r2, r3
 8004e18:	3901      	subs	r1, #1
 8004e1a:	3050      	adds	r0, #80	; 0x50
 8004e1c:	9111      	str	r1, [sp, #68]	; 0x44
 8004e1e:	f7ff ff08 	bl	8004c32 <__exponent>
 8004e22:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004e24:	900b      	str	r0, [sp, #44]	; 0x2c
 8004e26:	1813      	adds	r3, r2, r0
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	2a01      	cmp	r2, #1
 8004e2c:	dc02      	bgt.n	8004e34 <_printf_float+0x178>
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	07d2      	lsls	r2, r2, #31
 8004e32:	d501      	bpl.n	8004e38 <_printf_float+0x17c>
 8004e34:	3301      	adds	r3, #1
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	2323      	movs	r3, #35	; 0x23
 8004e3a:	aa08      	add	r2, sp, #32
 8004e3c:	189b      	adds	r3, r3, r2
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d100      	bne.n	8004e46 <_printf_float+0x18a>
 8004e44:	e78d      	b.n	8004d62 <_printf_float+0xa6>
 8004e46:	0023      	movs	r3, r4
 8004e48:	222d      	movs	r2, #45	; 0x2d
 8004e4a:	3343      	adds	r3, #67	; 0x43
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e788      	b.n	8004d62 <_printf_float+0xa6>
 8004e50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e52:	2a47      	cmp	r2, #71	; 0x47
 8004e54:	d1b3      	bne.n	8004dbe <_printf_float+0x102>
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1b1      	bne.n	8004dbe <_printf_float+0x102>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	e7ae      	b.n	8004dbc <_printf_float+0x100>
 8004e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e60:	2b66      	cmp	r3, #102	; 0x66
 8004e62:	d11b      	bne.n	8004e9c <_printf_float+0x1e0>
 8004e64:	6863      	ldr	r3, [r4, #4]
 8004e66:	2900      	cmp	r1, #0
 8004e68:	dd09      	ble.n	8004e7e <_printf_float+0x1c2>
 8004e6a:	6121      	str	r1, [r4, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <_printf_float+0x1ba>
 8004e70:	6822      	ldr	r2, [r4, #0]
 8004e72:	07d2      	lsls	r2, r2, #31
 8004e74:	d50b      	bpl.n	8004e8e <_printf_float+0x1d2>
 8004e76:	3301      	adds	r3, #1
 8004e78:	185b      	adds	r3, r3, r1
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	e007      	b.n	8004e8e <_printf_float+0x1d2>
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <_printf_float+0x1ce>
 8004e82:	2201      	movs	r2, #1
 8004e84:	6821      	ldr	r1, [r4, #0]
 8004e86:	4211      	tst	r1, r2
 8004e88:	d000      	beq.n	8004e8c <_printf_float+0x1d0>
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	6122      	str	r2, [r4, #16]
 8004e8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e90:	65a3      	str	r3, [r4, #88]	; 0x58
 8004e92:	2300      	movs	r3, #0
 8004e94:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e96:	e7cf      	b.n	8004e38 <_printf_float+0x17c>
 8004e98:	2367      	movs	r3, #103	; 0x67
 8004e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e9c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004e9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	db06      	blt.n	8004eb2 <_printf_float+0x1f6>
 8004ea4:	6823      	ldr	r3, [r4, #0]
 8004ea6:	6121      	str	r1, [r4, #16]
 8004ea8:	07db      	lsls	r3, r3, #31
 8004eaa:	d5f0      	bpl.n	8004e8e <_printf_float+0x1d2>
 8004eac:	3101      	adds	r1, #1
 8004eae:	6121      	str	r1, [r4, #16]
 8004eb0:	e7ed      	b.n	8004e8e <_printf_float+0x1d2>
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	dc01      	bgt.n	8004ebc <_printf_float+0x200>
 8004eb8:	1892      	adds	r2, r2, r2
 8004eba:	1a52      	subs	r2, r2, r1
 8004ebc:	189b      	adds	r3, r3, r2
 8004ebe:	e7dc      	b.n	8004e7a <_printf_float+0x1be>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	0553      	lsls	r3, r2, #21
 8004ec4:	d408      	bmi.n	8004ed8 <_printf_float+0x21c>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	002a      	movs	r2, r5
 8004eca:	0038      	movs	r0, r7
 8004ecc:	9908      	ldr	r1, [sp, #32]
 8004ece:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ed0:	47a8      	blx	r5
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d12a      	bne.n	8004f2c <_printf_float+0x270>
 8004ed6:	e74f      	b.n	8004d78 <_printf_float+0xbc>
 8004ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eda:	2b65      	cmp	r3, #101	; 0x65
 8004edc:	d800      	bhi.n	8004ee0 <_printf_float+0x224>
 8004ede:	e0ec      	b.n	80050ba <_printf_float+0x3fe>
 8004ee0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004ee2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	f7fb fab0 	bl	800044c <__aeabi_dcmpeq>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d034      	beq.n	8004f5a <_printf_float+0x29e>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	0038      	movs	r0, r7
 8004ef4:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <_printf_float+0x318>)
 8004ef6:	9908      	ldr	r1, [sp, #32]
 8004ef8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004efa:	47a8      	blx	r5
 8004efc:	3001      	adds	r0, #1
 8004efe:	d100      	bne.n	8004f02 <_printf_float+0x246>
 8004f00:	e73a      	b.n	8004d78 <_printf_float+0xbc>
 8004f02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f06:	429a      	cmp	r2, r3
 8004f08:	db02      	blt.n	8004f10 <_printf_float+0x254>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	07db      	lsls	r3, r3, #31
 8004f0e:	d50d      	bpl.n	8004f2c <_printf_float+0x270>
 8004f10:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f12:	0038      	movs	r0, r7
 8004f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f18:	9908      	ldr	r1, [sp, #32]
 8004f1a:	47a8      	blx	r5
 8004f1c:	2500      	movs	r5, #0
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d100      	bne.n	8004f24 <_printf_float+0x268>
 8004f22:	e729      	b.n	8004d78 <_printf_float+0xbc>
 8004f24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f26:	3b01      	subs	r3, #1
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dc0a      	bgt.n	8004f42 <_printf_float+0x286>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	079b      	lsls	r3, r3, #30
 8004f30:	d500      	bpl.n	8004f34 <_printf_float+0x278>
 8004f32:	e116      	b.n	8005162 <_printf_float+0x4a6>
 8004f34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004f36:	68e0      	ldr	r0, [r4, #12]
 8004f38:	4298      	cmp	r0, r3
 8004f3a:	db00      	blt.n	8004f3e <_printf_float+0x282>
 8004f3c:	e71e      	b.n	8004d7c <_printf_float+0xc0>
 8004f3e:	0018      	movs	r0, r3
 8004f40:	e71c      	b.n	8004d7c <_printf_float+0xc0>
 8004f42:	0022      	movs	r2, r4
 8004f44:	2301      	movs	r3, #1
 8004f46:	0038      	movs	r0, r7
 8004f48:	9908      	ldr	r1, [sp, #32]
 8004f4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f4c:	321a      	adds	r2, #26
 8004f4e:	47b0      	blx	r6
 8004f50:	3001      	adds	r0, #1
 8004f52:	d100      	bne.n	8004f56 <_printf_float+0x29a>
 8004f54:	e710      	b.n	8004d78 <_printf_float+0xbc>
 8004f56:	3501      	adds	r5, #1
 8004f58:	e7e4      	b.n	8004f24 <_printf_float+0x268>
 8004f5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	dc3b      	bgt.n	8004fd8 <_printf_float+0x31c>
 8004f60:	2301      	movs	r3, #1
 8004f62:	0038      	movs	r0, r7
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <_printf_float+0x318>)
 8004f66:	9908      	ldr	r1, [sp, #32]
 8004f68:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f6a:	47b0      	blx	r6
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d100      	bne.n	8004f72 <_printf_float+0x2b6>
 8004f70:	e702      	b.n	8004d78 <_printf_float+0xbc>
 8004f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004f76:	4313      	orrs	r3, r2
 8004f78:	d102      	bne.n	8004f80 <_printf_float+0x2c4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	07db      	lsls	r3, r3, #31
 8004f7e:	d5d5      	bpl.n	8004f2c <_printf_float+0x270>
 8004f80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f82:	0038      	movs	r0, r7
 8004f84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f86:	9908      	ldr	r1, [sp, #32]
 8004f88:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f8a:	47b0      	blx	r6
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d100      	bne.n	8004f94 <_printf_float+0x2d8>
 8004f92:	e6f1      	b.n	8004d78 <_printf_float+0xbc>
 8004f94:	930a      	str	r3, [sp, #40]	; 0x28
 8004f96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f9a:	425b      	negs	r3, r3
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	dc01      	bgt.n	8004fa4 <_printf_float+0x2e8>
 8004fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004fa2:	e791      	b.n	8004ec8 <_printf_float+0x20c>
 8004fa4:	0022      	movs	r2, r4
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	0038      	movs	r0, r7
 8004faa:	9908      	ldr	r1, [sp, #32]
 8004fac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004fae:	321a      	adds	r2, #26
 8004fb0:	47b0      	blx	r6
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d100      	bne.n	8004fb8 <_printf_float+0x2fc>
 8004fb6:	e6df      	b.n	8004d78 <_printf_float+0xbc>
 8004fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fba:	3301      	adds	r3, #1
 8004fbc:	e7ea      	b.n	8004f94 <_printf_float+0x2d8>
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	7fefffff 	.word	0x7fefffff
 8004fc4:	08007704 	.word	0x08007704
 8004fc8:	08007708 	.word	0x08007708
 8004fcc:	0800770c 	.word	0x0800770c
 8004fd0:	08007710 	.word	0x08007710
 8004fd4:	08007714 	.word	0x08007714
 8004fd8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	dd00      	ble.n	8004fe4 <_printf_float+0x328>
 8004fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc3d      	bgt.n	8005066 <_printf_float+0x3aa>
 8004fea:	2300      	movs	r3, #0
 8004fec:	930e      	str	r3, [sp, #56]	; 0x38
 8004fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	17db      	asrs	r3, r3, #31
 8004ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ff6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ffa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ffc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ffe:	4013      	ands	r3, r2
 8005000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005006:	4293      	cmp	r3, r2
 8005008:	dc36      	bgt.n	8005078 <_printf_float+0x3bc>
 800500a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800500c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800500e:	429a      	cmp	r2, r3
 8005010:	db40      	blt.n	8005094 <_printf_float+0x3d8>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	07db      	lsls	r3, r3, #31
 8005016:	d43d      	bmi.n	8005094 <_printf_float+0x3d8>
 8005018:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800501a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800501c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800501e:	1af3      	subs	r3, r6, r3
 8005020:	1ab6      	subs	r6, r6, r2
 8005022:	429e      	cmp	r6, r3
 8005024:	dd00      	ble.n	8005028 <_printf_float+0x36c>
 8005026:	001e      	movs	r6, r3
 8005028:	2e00      	cmp	r6, #0
 800502a:	dc3c      	bgt.n	80050a6 <_printf_float+0x3ea>
 800502c:	2300      	movs	r3, #0
 800502e:	930a      	str	r3, [sp, #40]	; 0x28
 8005030:	43f3      	mvns	r3, r6
 8005032:	17db      	asrs	r3, r3, #31
 8005034:	930b      	str	r3, [sp, #44]	; 0x2c
 8005036:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800503e:	4032      	ands	r2, r6
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005044:	4293      	cmp	r3, r2
 8005046:	dc00      	bgt.n	800504a <_printf_float+0x38e>
 8005048:	e770      	b.n	8004f2c <_printf_float+0x270>
 800504a:	0022      	movs	r2, r4
 800504c:	2301      	movs	r3, #1
 800504e:	0038      	movs	r0, r7
 8005050:	9908      	ldr	r1, [sp, #32]
 8005052:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005054:	321a      	adds	r2, #26
 8005056:	47a8      	blx	r5
 8005058:	3001      	adds	r0, #1
 800505a:	d100      	bne.n	800505e <_printf_float+0x3a2>
 800505c:	e68c      	b.n	8004d78 <_printf_float+0xbc>
 800505e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005060:	3301      	adds	r3, #1
 8005062:	930a      	str	r3, [sp, #40]	; 0x28
 8005064:	e7e7      	b.n	8005036 <_printf_float+0x37a>
 8005066:	002a      	movs	r2, r5
 8005068:	0038      	movs	r0, r7
 800506a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506c:	9908      	ldr	r1, [sp, #32]
 800506e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005070:	47b0      	blx	r6
 8005072:	3001      	adds	r0, #1
 8005074:	d1b9      	bne.n	8004fea <_printf_float+0x32e>
 8005076:	e67f      	b.n	8004d78 <_printf_float+0xbc>
 8005078:	0022      	movs	r2, r4
 800507a:	2301      	movs	r3, #1
 800507c:	0038      	movs	r0, r7
 800507e:	9908      	ldr	r1, [sp, #32]
 8005080:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005082:	321a      	adds	r2, #26
 8005084:	47b0      	blx	r6
 8005086:	3001      	adds	r0, #1
 8005088:	d100      	bne.n	800508c <_printf_float+0x3d0>
 800508a:	e675      	b.n	8004d78 <_printf_float+0xbc>
 800508c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800508e:	3301      	adds	r3, #1
 8005090:	930e      	str	r3, [sp, #56]	; 0x38
 8005092:	e7b0      	b.n	8004ff6 <_printf_float+0x33a>
 8005094:	0038      	movs	r0, r7
 8005096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800509a:	9908      	ldr	r1, [sp, #32]
 800509c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800509e:	47b0      	blx	r6
 80050a0:	3001      	adds	r0, #1
 80050a2:	d1b9      	bne.n	8005018 <_printf_float+0x35c>
 80050a4:	e668      	b.n	8004d78 <_printf_float+0xbc>
 80050a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a8:	0038      	movs	r0, r7
 80050aa:	18ea      	adds	r2, r5, r3
 80050ac:	9908      	ldr	r1, [sp, #32]
 80050ae:	0033      	movs	r3, r6
 80050b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050b2:	47a8      	blx	r5
 80050b4:	3001      	adds	r0, #1
 80050b6:	d1b9      	bne.n	800502c <_printf_float+0x370>
 80050b8:	e65e      	b.n	8004d78 <_printf_float+0xbc>
 80050ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050bc:	2b01      	cmp	r3, #1
 80050be:	dc02      	bgt.n	80050c6 <_printf_float+0x40a>
 80050c0:	2301      	movs	r3, #1
 80050c2:	421a      	tst	r2, r3
 80050c4:	d03a      	beq.n	800513c <_printf_float+0x480>
 80050c6:	2301      	movs	r3, #1
 80050c8:	002a      	movs	r2, r5
 80050ca:	0038      	movs	r0, r7
 80050cc:	9908      	ldr	r1, [sp, #32]
 80050ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050d0:	47b0      	blx	r6
 80050d2:	3001      	adds	r0, #1
 80050d4:	d100      	bne.n	80050d8 <_printf_float+0x41c>
 80050d6:	e64f      	b.n	8004d78 <_printf_float+0xbc>
 80050d8:	0038      	movs	r0, r7
 80050da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050de:	9908      	ldr	r1, [sp, #32]
 80050e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80050e2:	47b0      	blx	r6
 80050e4:	3001      	adds	r0, #1
 80050e6:	d100      	bne.n	80050ea <_printf_float+0x42e>
 80050e8:	e646      	b.n	8004d78 <_printf_float+0xbc>
 80050ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80050ec:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80050ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050f0:	2200      	movs	r2, #0
 80050f2:	001e      	movs	r6, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	f7fb f9a9 	bl	800044c <__aeabi_dcmpeq>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d11c      	bne.n	8005138 <_printf_float+0x47c>
 80050fe:	0033      	movs	r3, r6
 8005100:	1c6a      	adds	r2, r5, #1
 8005102:	3b01      	subs	r3, #1
 8005104:	0038      	movs	r0, r7
 8005106:	9908      	ldr	r1, [sp, #32]
 8005108:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800510a:	47a8      	blx	r5
 800510c:	3001      	adds	r0, #1
 800510e:	d10f      	bne.n	8005130 <_printf_float+0x474>
 8005110:	e632      	b.n	8004d78 <_printf_float+0xbc>
 8005112:	0022      	movs	r2, r4
 8005114:	2301      	movs	r3, #1
 8005116:	0038      	movs	r0, r7
 8005118:	9908      	ldr	r1, [sp, #32]
 800511a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800511c:	321a      	adds	r2, #26
 800511e:	47b0      	blx	r6
 8005120:	3001      	adds	r0, #1
 8005122:	d100      	bne.n	8005126 <_printf_float+0x46a>
 8005124:	e628      	b.n	8004d78 <_printf_float+0xbc>
 8005126:	3501      	adds	r5, #1
 8005128:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800512a:	3b01      	subs	r3, #1
 800512c:	42ab      	cmp	r3, r5
 800512e:	dcf0      	bgt.n	8005112 <_printf_float+0x456>
 8005130:	0022      	movs	r2, r4
 8005132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005134:	3250      	adds	r2, #80	; 0x50
 8005136:	e6c8      	b.n	8004eca <_printf_float+0x20e>
 8005138:	2500      	movs	r5, #0
 800513a:	e7f5      	b.n	8005128 <_printf_float+0x46c>
 800513c:	002a      	movs	r2, r5
 800513e:	e7e1      	b.n	8005104 <_printf_float+0x448>
 8005140:	0022      	movs	r2, r4
 8005142:	2301      	movs	r3, #1
 8005144:	0038      	movs	r0, r7
 8005146:	9908      	ldr	r1, [sp, #32]
 8005148:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800514a:	3219      	adds	r2, #25
 800514c:	47b0      	blx	r6
 800514e:	3001      	adds	r0, #1
 8005150:	d100      	bne.n	8005154 <_printf_float+0x498>
 8005152:	e611      	b.n	8004d78 <_printf_float+0xbc>
 8005154:	3501      	adds	r5, #1
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	42ab      	cmp	r3, r5
 800515e:	dcef      	bgt.n	8005140 <_printf_float+0x484>
 8005160:	e6e8      	b.n	8004f34 <_printf_float+0x278>
 8005162:	2500      	movs	r5, #0
 8005164:	e7f7      	b.n	8005156 <_printf_float+0x49a>
 8005166:	46c0      	nop			; (mov r8, r8)

08005168 <_printf_common>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	0016      	movs	r6, r2
 800516c:	9301      	str	r3, [sp, #4]
 800516e:	688a      	ldr	r2, [r1, #8]
 8005170:	690b      	ldr	r3, [r1, #16]
 8005172:	000c      	movs	r4, r1
 8005174:	9000      	str	r0, [sp, #0]
 8005176:	4293      	cmp	r3, r2
 8005178:	da00      	bge.n	800517c <_printf_common+0x14>
 800517a:	0013      	movs	r3, r2
 800517c:	0022      	movs	r2, r4
 800517e:	6033      	str	r3, [r6, #0]
 8005180:	3243      	adds	r2, #67	; 0x43
 8005182:	7812      	ldrb	r2, [r2, #0]
 8005184:	2a00      	cmp	r2, #0
 8005186:	d001      	beq.n	800518c <_printf_common+0x24>
 8005188:	3301      	adds	r3, #1
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	069b      	lsls	r3, r3, #26
 8005190:	d502      	bpl.n	8005198 <_printf_common+0x30>
 8005192:	6833      	ldr	r3, [r6, #0]
 8005194:	3302      	adds	r3, #2
 8005196:	6033      	str	r3, [r6, #0]
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	2306      	movs	r3, #6
 800519c:	0015      	movs	r5, r2
 800519e:	401d      	ands	r5, r3
 80051a0:	421a      	tst	r2, r3
 80051a2:	d027      	beq.n	80051f4 <_printf_common+0x8c>
 80051a4:	0023      	movs	r3, r4
 80051a6:	3343      	adds	r3, #67	; 0x43
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	1e5a      	subs	r2, r3, #1
 80051ac:	4193      	sbcs	r3, r2
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	0692      	lsls	r2, r2, #26
 80051b2:	d430      	bmi.n	8005216 <_printf_common+0xae>
 80051b4:	0022      	movs	r2, r4
 80051b6:	9901      	ldr	r1, [sp, #4]
 80051b8:	9800      	ldr	r0, [sp, #0]
 80051ba:	9d08      	ldr	r5, [sp, #32]
 80051bc:	3243      	adds	r2, #67	; 0x43
 80051be:	47a8      	blx	r5
 80051c0:	3001      	adds	r0, #1
 80051c2:	d025      	beq.n	8005210 <_printf_common+0xa8>
 80051c4:	2206      	movs	r2, #6
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	2500      	movs	r5, #0
 80051ca:	4013      	ands	r3, r2
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d105      	bne.n	80051dc <_printf_common+0x74>
 80051d0:	6833      	ldr	r3, [r6, #0]
 80051d2:	68e5      	ldr	r5, [r4, #12]
 80051d4:	1aed      	subs	r5, r5, r3
 80051d6:	43eb      	mvns	r3, r5
 80051d8:	17db      	asrs	r3, r3, #31
 80051da:	401d      	ands	r5, r3
 80051dc:	68a3      	ldr	r3, [r4, #8]
 80051de:	6922      	ldr	r2, [r4, #16]
 80051e0:	4293      	cmp	r3, r2
 80051e2:	dd01      	ble.n	80051e8 <_printf_common+0x80>
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	18ed      	adds	r5, r5, r3
 80051e8:	2600      	movs	r6, #0
 80051ea:	42b5      	cmp	r5, r6
 80051ec:	d120      	bne.n	8005230 <_printf_common+0xc8>
 80051ee:	2000      	movs	r0, #0
 80051f0:	e010      	b.n	8005214 <_printf_common+0xac>
 80051f2:	3501      	adds	r5, #1
 80051f4:	68e3      	ldr	r3, [r4, #12]
 80051f6:	6832      	ldr	r2, [r6, #0]
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	42ab      	cmp	r3, r5
 80051fc:	ddd2      	ble.n	80051a4 <_printf_common+0x3c>
 80051fe:	0022      	movs	r2, r4
 8005200:	2301      	movs	r3, #1
 8005202:	9901      	ldr	r1, [sp, #4]
 8005204:	9800      	ldr	r0, [sp, #0]
 8005206:	9f08      	ldr	r7, [sp, #32]
 8005208:	3219      	adds	r2, #25
 800520a:	47b8      	blx	r7
 800520c:	3001      	adds	r0, #1
 800520e:	d1f0      	bne.n	80051f2 <_printf_common+0x8a>
 8005210:	2001      	movs	r0, #1
 8005212:	4240      	negs	r0, r0
 8005214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005216:	2030      	movs	r0, #48	; 0x30
 8005218:	18e1      	adds	r1, r4, r3
 800521a:	3143      	adds	r1, #67	; 0x43
 800521c:	7008      	strb	r0, [r1, #0]
 800521e:	0021      	movs	r1, r4
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	3145      	adds	r1, #69	; 0x45
 8005224:	7809      	ldrb	r1, [r1, #0]
 8005226:	18a2      	adds	r2, r4, r2
 8005228:	3243      	adds	r2, #67	; 0x43
 800522a:	3302      	adds	r3, #2
 800522c:	7011      	strb	r1, [r2, #0]
 800522e:	e7c1      	b.n	80051b4 <_printf_common+0x4c>
 8005230:	0022      	movs	r2, r4
 8005232:	2301      	movs	r3, #1
 8005234:	9901      	ldr	r1, [sp, #4]
 8005236:	9800      	ldr	r0, [sp, #0]
 8005238:	9f08      	ldr	r7, [sp, #32]
 800523a:	321a      	adds	r2, #26
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	d0e6      	beq.n	8005210 <_printf_common+0xa8>
 8005242:	3601      	adds	r6, #1
 8005244:	e7d1      	b.n	80051ea <_printf_common+0x82>
	...

08005248 <_printf_i>:
 8005248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800524a:	b08b      	sub	sp, #44	; 0x2c
 800524c:	9206      	str	r2, [sp, #24]
 800524e:	000a      	movs	r2, r1
 8005250:	3243      	adds	r2, #67	; 0x43
 8005252:	9307      	str	r3, [sp, #28]
 8005254:	9005      	str	r0, [sp, #20]
 8005256:	9204      	str	r2, [sp, #16]
 8005258:	7e0a      	ldrb	r2, [r1, #24]
 800525a:	000c      	movs	r4, r1
 800525c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800525e:	2a78      	cmp	r2, #120	; 0x78
 8005260:	d809      	bhi.n	8005276 <_printf_i+0x2e>
 8005262:	2a62      	cmp	r2, #98	; 0x62
 8005264:	d80b      	bhi.n	800527e <_printf_i+0x36>
 8005266:	2a00      	cmp	r2, #0
 8005268:	d100      	bne.n	800526c <_printf_i+0x24>
 800526a:	e0be      	b.n	80053ea <_printf_i+0x1a2>
 800526c:	497c      	ldr	r1, [pc, #496]	; (8005460 <_printf_i+0x218>)
 800526e:	9103      	str	r1, [sp, #12]
 8005270:	2a58      	cmp	r2, #88	; 0x58
 8005272:	d100      	bne.n	8005276 <_printf_i+0x2e>
 8005274:	e093      	b.n	800539e <_printf_i+0x156>
 8005276:	0026      	movs	r6, r4
 8005278:	3642      	adds	r6, #66	; 0x42
 800527a:	7032      	strb	r2, [r6, #0]
 800527c:	e022      	b.n	80052c4 <_printf_i+0x7c>
 800527e:	0010      	movs	r0, r2
 8005280:	3863      	subs	r0, #99	; 0x63
 8005282:	2815      	cmp	r0, #21
 8005284:	d8f7      	bhi.n	8005276 <_printf_i+0x2e>
 8005286:	f7fa ff51 	bl	800012c <__gnu_thumb1_case_shi>
 800528a:	0016      	.short	0x0016
 800528c:	fff6001f 	.word	0xfff6001f
 8005290:	fff6fff6 	.word	0xfff6fff6
 8005294:	001ffff6 	.word	0x001ffff6
 8005298:	fff6fff6 	.word	0xfff6fff6
 800529c:	fff6fff6 	.word	0xfff6fff6
 80052a0:	003600a3 	.word	0x003600a3
 80052a4:	fff60083 	.word	0xfff60083
 80052a8:	00b4fff6 	.word	0x00b4fff6
 80052ac:	0036fff6 	.word	0x0036fff6
 80052b0:	fff6fff6 	.word	0xfff6fff6
 80052b4:	0087      	.short	0x0087
 80052b6:	0026      	movs	r6, r4
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	3642      	adds	r6, #66	; 0x42
 80052bc:	1d11      	adds	r1, r2, #4
 80052be:	6019      	str	r1, [r3, #0]
 80052c0:	6813      	ldr	r3, [r2, #0]
 80052c2:	7033      	strb	r3, [r6, #0]
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0a2      	b.n	800540e <_printf_i+0x1c6>
 80052c8:	6818      	ldr	r0, [r3, #0]
 80052ca:	6809      	ldr	r1, [r1, #0]
 80052cc:	1d02      	adds	r2, r0, #4
 80052ce:	060d      	lsls	r5, r1, #24
 80052d0:	d50b      	bpl.n	80052ea <_printf_i+0xa2>
 80052d2:	6805      	ldr	r5, [r0, #0]
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	2d00      	cmp	r5, #0
 80052d8:	da03      	bge.n	80052e2 <_printf_i+0x9a>
 80052da:	232d      	movs	r3, #45	; 0x2d
 80052dc:	9a04      	ldr	r2, [sp, #16]
 80052de:	426d      	negs	r5, r5
 80052e0:	7013      	strb	r3, [r2, #0]
 80052e2:	4b5f      	ldr	r3, [pc, #380]	; (8005460 <_printf_i+0x218>)
 80052e4:	270a      	movs	r7, #10
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	e01b      	b.n	8005322 <_printf_i+0xda>
 80052ea:	6805      	ldr	r5, [r0, #0]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	0649      	lsls	r1, r1, #25
 80052f0:	d5f1      	bpl.n	80052d6 <_printf_i+0x8e>
 80052f2:	b22d      	sxth	r5, r5
 80052f4:	e7ef      	b.n	80052d6 <_printf_i+0x8e>
 80052f6:	680d      	ldr	r5, [r1, #0]
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	1d08      	adds	r0, r1, #4
 80052fc:	6018      	str	r0, [r3, #0]
 80052fe:	062e      	lsls	r6, r5, #24
 8005300:	d501      	bpl.n	8005306 <_printf_i+0xbe>
 8005302:	680d      	ldr	r5, [r1, #0]
 8005304:	e003      	b.n	800530e <_printf_i+0xc6>
 8005306:	066d      	lsls	r5, r5, #25
 8005308:	d5fb      	bpl.n	8005302 <_printf_i+0xba>
 800530a:	680d      	ldr	r5, [r1, #0]
 800530c:	b2ad      	uxth	r5, r5
 800530e:	4b54      	ldr	r3, [pc, #336]	; (8005460 <_printf_i+0x218>)
 8005310:	2708      	movs	r7, #8
 8005312:	9303      	str	r3, [sp, #12]
 8005314:	2a6f      	cmp	r2, #111	; 0x6f
 8005316:	d000      	beq.n	800531a <_printf_i+0xd2>
 8005318:	3702      	adds	r7, #2
 800531a:	0023      	movs	r3, r4
 800531c:	2200      	movs	r2, #0
 800531e:	3343      	adds	r3, #67	; 0x43
 8005320:	701a      	strb	r2, [r3, #0]
 8005322:	6863      	ldr	r3, [r4, #4]
 8005324:	60a3      	str	r3, [r4, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	db03      	blt.n	8005332 <_printf_i+0xea>
 800532a:	2104      	movs	r1, #4
 800532c:	6822      	ldr	r2, [r4, #0]
 800532e:	438a      	bics	r2, r1
 8005330:	6022      	str	r2, [r4, #0]
 8005332:	2d00      	cmp	r5, #0
 8005334:	d102      	bne.n	800533c <_printf_i+0xf4>
 8005336:	9e04      	ldr	r6, [sp, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00c      	beq.n	8005356 <_printf_i+0x10e>
 800533c:	9e04      	ldr	r6, [sp, #16]
 800533e:	0028      	movs	r0, r5
 8005340:	0039      	movs	r1, r7
 8005342:	f7fa ff83 	bl	800024c <__aeabi_uidivmod>
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	3e01      	subs	r6, #1
 800534a:	5c5b      	ldrb	r3, [r3, r1]
 800534c:	7033      	strb	r3, [r6, #0]
 800534e:	002b      	movs	r3, r5
 8005350:	0005      	movs	r5, r0
 8005352:	429f      	cmp	r7, r3
 8005354:	d9f3      	bls.n	800533e <_printf_i+0xf6>
 8005356:	2f08      	cmp	r7, #8
 8005358:	d109      	bne.n	800536e <_printf_i+0x126>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	07db      	lsls	r3, r3, #31
 800535e:	d506      	bpl.n	800536e <_printf_i+0x126>
 8005360:	6862      	ldr	r2, [r4, #4]
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	429a      	cmp	r2, r3
 8005366:	dc02      	bgt.n	800536e <_printf_i+0x126>
 8005368:	2330      	movs	r3, #48	; 0x30
 800536a:	3e01      	subs	r6, #1
 800536c:	7033      	strb	r3, [r6, #0]
 800536e:	9b04      	ldr	r3, [sp, #16]
 8005370:	1b9b      	subs	r3, r3, r6
 8005372:	6123      	str	r3, [r4, #16]
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	0021      	movs	r1, r4
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	9805      	ldr	r0, [sp, #20]
 800537c:	9b06      	ldr	r3, [sp, #24]
 800537e:	aa09      	add	r2, sp, #36	; 0x24
 8005380:	f7ff fef2 	bl	8005168 <_printf_common>
 8005384:	3001      	adds	r0, #1
 8005386:	d147      	bne.n	8005418 <_printf_i+0x1d0>
 8005388:	2001      	movs	r0, #1
 800538a:	4240      	negs	r0, r0
 800538c:	b00b      	add	sp, #44	; 0x2c
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	2220      	movs	r2, #32
 8005392:	6809      	ldr	r1, [r1, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	6022      	str	r2, [r4, #0]
 8005398:	2278      	movs	r2, #120	; 0x78
 800539a:	4932      	ldr	r1, [pc, #200]	; (8005464 <_printf_i+0x21c>)
 800539c:	9103      	str	r1, [sp, #12]
 800539e:	0021      	movs	r1, r4
 80053a0:	3145      	adds	r1, #69	; 0x45
 80053a2:	700a      	strb	r2, [r1, #0]
 80053a4:	6819      	ldr	r1, [r3, #0]
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	c920      	ldmia	r1!, {r5}
 80053aa:	0610      	lsls	r0, r2, #24
 80053ac:	d402      	bmi.n	80053b4 <_printf_i+0x16c>
 80053ae:	0650      	lsls	r0, r2, #25
 80053b0:	d500      	bpl.n	80053b4 <_printf_i+0x16c>
 80053b2:	b2ad      	uxth	r5, r5
 80053b4:	6019      	str	r1, [r3, #0]
 80053b6:	07d3      	lsls	r3, r2, #31
 80053b8:	d502      	bpl.n	80053c0 <_printf_i+0x178>
 80053ba:	2320      	movs	r3, #32
 80053bc:	4313      	orrs	r3, r2
 80053be:	6023      	str	r3, [r4, #0]
 80053c0:	2710      	movs	r7, #16
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	d1a9      	bne.n	800531a <_printf_i+0xd2>
 80053c6:	2220      	movs	r2, #32
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	4393      	bics	r3, r2
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	e7a4      	b.n	800531a <_printf_i+0xd2>
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	680d      	ldr	r5, [r1, #0]
 80053d4:	1d10      	adds	r0, r2, #4
 80053d6:	6949      	ldr	r1, [r1, #20]
 80053d8:	6018      	str	r0, [r3, #0]
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	062e      	lsls	r6, r5, #24
 80053de:	d501      	bpl.n	80053e4 <_printf_i+0x19c>
 80053e0:	6019      	str	r1, [r3, #0]
 80053e2:	e002      	b.n	80053ea <_printf_i+0x1a2>
 80053e4:	066d      	lsls	r5, r5, #25
 80053e6:	d5fb      	bpl.n	80053e0 <_printf_i+0x198>
 80053e8:	8019      	strh	r1, [r3, #0]
 80053ea:	2300      	movs	r3, #0
 80053ec:	9e04      	ldr	r6, [sp, #16]
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	e7c0      	b.n	8005374 <_printf_i+0x12c>
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	1d11      	adds	r1, r2, #4
 80053f6:	6019      	str	r1, [r3, #0]
 80053f8:	6816      	ldr	r6, [r2, #0]
 80053fa:	2100      	movs	r1, #0
 80053fc:	0030      	movs	r0, r6
 80053fe:	6862      	ldr	r2, [r4, #4]
 8005400:	f000 f9d9 	bl	80057b6 <memchr>
 8005404:	2800      	cmp	r0, #0
 8005406:	d001      	beq.n	800540c <_printf_i+0x1c4>
 8005408:	1b80      	subs	r0, r0, r6
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	9a04      	ldr	r2, [sp, #16]
 8005414:	7013      	strb	r3, [r2, #0]
 8005416:	e7ad      	b.n	8005374 <_printf_i+0x12c>
 8005418:	0032      	movs	r2, r6
 800541a:	6923      	ldr	r3, [r4, #16]
 800541c:	9906      	ldr	r1, [sp, #24]
 800541e:	9805      	ldr	r0, [sp, #20]
 8005420:	9d07      	ldr	r5, [sp, #28]
 8005422:	47a8      	blx	r5
 8005424:	3001      	adds	r0, #1
 8005426:	d0af      	beq.n	8005388 <_printf_i+0x140>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	079b      	lsls	r3, r3, #30
 800542c:	d415      	bmi.n	800545a <_printf_i+0x212>
 800542e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005430:	68e0      	ldr	r0, [r4, #12]
 8005432:	4298      	cmp	r0, r3
 8005434:	daaa      	bge.n	800538c <_printf_i+0x144>
 8005436:	0018      	movs	r0, r3
 8005438:	e7a8      	b.n	800538c <_printf_i+0x144>
 800543a:	0022      	movs	r2, r4
 800543c:	2301      	movs	r3, #1
 800543e:	9906      	ldr	r1, [sp, #24]
 8005440:	9805      	ldr	r0, [sp, #20]
 8005442:	9e07      	ldr	r6, [sp, #28]
 8005444:	3219      	adds	r2, #25
 8005446:	47b0      	blx	r6
 8005448:	3001      	adds	r0, #1
 800544a:	d09d      	beq.n	8005388 <_printf_i+0x140>
 800544c:	3501      	adds	r5, #1
 800544e:	68e3      	ldr	r3, [r4, #12]
 8005450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	42ab      	cmp	r3, r5
 8005456:	dcf0      	bgt.n	800543a <_printf_i+0x1f2>
 8005458:	e7e9      	b.n	800542e <_printf_i+0x1e6>
 800545a:	2500      	movs	r5, #0
 800545c:	e7f7      	b.n	800544e <_printf_i+0x206>
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	08007716 	.word	0x08007716
 8005464:	08007727 	.word	0x08007727

08005468 <std>:
 8005468:	2300      	movs	r3, #0
 800546a:	b510      	push	{r4, lr}
 800546c:	0004      	movs	r4, r0
 800546e:	6003      	str	r3, [r0, #0]
 8005470:	6043      	str	r3, [r0, #4]
 8005472:	6083      	str	r3, [r0, #8]
 8005474:	8181      	strh	r1, [r0, #12]
 8005476:	6643      	str	r3, [r0, #100]	; 0x64
 8005478:	81c2      	strh	r2, [r0, #14]
 800547a:	6103      	str	r3, [r0, #16]
 800547c:	6143      	str	r3, [r0, #20]
 800547e:	6183      	str	r3, [r0, #24]
 8005480:	0019      	movs	r1, r3
 8005482:	2208      	movs	r2, #8
 8005484:	305c      	adds	r0, #92	; 0x5c
 8005486:	f000 f90f 	bl	80056a8 <memset>
 800548a:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <std+0x50>)
 800548c:	6224      	str	r4, [r4, #32]
 800548e:	6263      	str	r3, [r4, #36]	; 0x24
 8005490:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <std+0x54>)
 8005492:	62a3      	str	r3, [r4, #40]	; 0x28
 8005494:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <std+0x58>)
 8005496:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <std+0x5c>)
 800549a:	6323      	str	r3, [r4, #48]	; 0x30
 800549c:	4b0a      	ldr	r3, [pc, #40]	; (80054c8 <std+0x60>)
 800549e:	429c      	cmp	r4, r3
 80054a0:	d005      	beq.n	80054ae <std+0x46>
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <std+0x64>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d002      	beq.n	80054ae <std+0x46>
 80054a8:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <std+0x68>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d103      	bne.n	80054b6 <std+0x4e>
 80054ae:	0020      	movs	r0, r4
 80054b0:	3058      	adds	r0, #88	; 0x58
 80054b2:	f000 f97d 	bl	80057b0 <__retarget_lock_init_recursive>
 80054b6:	bd10      	pop	{r4, pc}
 80054b8:	08005611 	.word	0x08005611
 80054bc:	08005639 	.word	0x08005639
 80054c0:	08005671 	.word	0x08005671
 80054c4:	0800569d 	.word	0x0800569d
 80054c8:	200002c0 	.word	0x200002c0
 80054cc:	20000328 	.word	0x20000328
 80054d0:	20000390 	.word	0x20000390

080054d4 <stdio_exit_handler>:
 80054d4:	b510      	push	{r4, lr}
 80054d6:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <stdio_exit_handler+0x10>)
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <stdio_exit_handler+0x14>)
 80054da:	4804      	ldr	r0, [pc, #16]	; (80054ec <stdio_exit_handler+0x18>)
 80054dc:	f000 f86c 	bl	80055b8 <_fwalk_sglue>
 80054e0:	bd10      	pop	{r4, pc}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	2000001c 	.word	0x2000001c
 80054e8:	080071e9 	.word	0x080071e9
 80054ec:	20000028 	.word	0x20000028

080054f0 <cleanup_stdio>:
 80054f0:	6841      	ldr	r1, [r0, #4]
 80054f2:	4b0b      	ldr	r3, [pc, #44]	; (8005520 <cleanup_stdio+0x30>)
 80054f4:	b510      	push	{r4, lr}
 80054f6:	0004      	movs	r4, r0
 80054f8:	4299      	cmp	r1, r3
 80054fa:	d001      	beq.n	8005500 <cleanup_stdio+0x10>
 80054fc:	f001 fe74 	bl	80071e8 <_fflush_r>
 8005500:	68a1      	ldr	r1, [r4, #8]
 8005502:	4b08      	ldr	r3, [pc, #32]	; (8005524 <cleanup_stdio+0x34>)
 8005504:	4299      	cmp	r1, r3
 8005506:	d002      	beq.n	800550e <cleanup_stdio+0x1e>
 8005508:	0020      	movs	r0, r4
 800550a:	f001 fe6d 	bl	80071e8 <_fflush_r>
 800550e:	68e1      	ldr	r1, [r4, #12]
 8005510:	4b05      	ldr	r3, [pc, #20]	; (8005528 <cleanup_stdio+0x38>)
 8005512:	4299      	cmp	r1, r3
 8005514:	d002      	beq.n	800551c <cleanup_stdio+0x2c>
 8005516:	0020      	movs	r0, r4
 8005518:	f001 fe66 	bl	80071e8 <_fflush_r>
 800551c:	bd10      	pop	{r4, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	200002c0 	.word	0x200002c0
 8005524:	20000328 	.word	0x20000328
 8005528:	20000390 	.word	0x20000390

0800552c <global_stdio_init.part.0>:
 800552c:	b510      	push	{r4, lr}
 800552e:	4b09      	ldr	r3, [pc, #36]	; (8005554 <global_stdio_init.part.0+0x28>)
 8005530:	4a09      	ldr	r2, [pc, #36]	; (8005558 <global_stdio_init.part.0+0x2c>)
 8005532:	2104      	movs	r1, #4
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	4809      	ldr	r0, [pc, #36]	; (800555c <global_stdio_init.part.0+0x30>)
 8005538:	2200      	movs	r2, #0
 800553a:	f7ff ff95 	bl	8005468 <std>
 800553e:	2201      	movs	r2, #1
 8005540:	2109      	movs	r1, #9
 8005542:	4807      	ldr	r0, [pc, #28]	; (8005560 <global_stdio_init.part.0+0x34>)
 8005544:	f7ff ff90 	bl	8005468 <std>
 8005548:	2202      	movs	r2, #2
 800554a:	2112      	movs	r1, #18
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <global_stdio_init.part.0+0x38>)
 800554e:	f7ff ff8b 	bl	8005468 <std>
 8005552:	bd10      	pop	{r4, pc}
 8005554:	200003f8 	.word	0x200003f8
 8005558:	080054d5 	.word	0x080054d5
 800555c:	200002c0 	.word	0x200002c0
 8005560:	20000328 	.word	0x20000328
 8005564:	20000390 	.word	0x20000390

08005568 <__sfp_lock_acquire>:
 8005568:	b510      	push	{r4, lr}
 800556a:	4802      	ldr	r0, [pc, #8]	; (8005574 <__sfp_lock_acquire+0xc>)
 800556c:	f000 f921 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	20000401 	.word	0x20000401

08005578 <__sfp_lock_release>:
 8005578:	b510      	push	{r4, lr}
 800557a:	4802      	ldr	r0, [pc, #8]	; (8005584 <__sfp_lock_release+0xc>)
 800557c:	f000 f91a 	bl	80057b4 <__retarget_lock_release_recursive>
 8005580:	bd10      	pop	{r4, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	20000401 	.word	0x20000401

08005588 <__sinit>:
 8005588:	b510      	push	{r4, lr}
 800558a:	0004      	movs	r4, r0
 800558c:	f7ff ffec 	bl	8005568 <__sfp_lock_acquire>
 8005590:	6a23      	ldr	r3, [r4, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <__sinit+0x14>
 8005596:	f7ff ffef 	bl	8005578 <__sfp_lock_release>
 800559a:	bd10      	pop	{r4, pc}
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <__sinit+0x28>)
 800559e:	6223      	str	r3, [r4, #32]
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <__sinit+0x2c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f6      	bne.n	8005596 <__sinit+0xe>
 80055a8:	f7ff ffc0 	bl	800552c <global_stdio_init.part.0>
 80055ac:	e7f3      	b.n	8005596 <__sinit+0xe>
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	080054f1 	.word	0x080054f1
 80055b4:	200003f8 	.word	0x200003f8

080055b8 <_fwalk_sglue>:
 80055b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055ba:	0014      	movs	r4, r2
 80055bc:	2600      	movs	r6, #0
 80055be:	9000      	str	r0, [sp, #0]
 80055c0:	9101      	str	r1, [sp, #4]
 80055c2:	68a5      	ldr	r5, [r4, #8]
 80055c4:	6867      	ldr	r7, [r4, #4]
 80055c6:	3f01      	subs	r7, #1
 80055c8:	d504      	bpl.n	80055d4 <_fwalk_sglue+0x1c>
 80055ca:	6824      	ldr	r4, [r4, #0]
 80055cc:	2c00      	cmp	r4, #0
 80055ce:	d1f8      	bne.n	80055c2 <_fwalk_sglue+0xa>
 80055d0:	0030      	movs	r0, r6
 80055d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055d4:	89ab      	ldrh	r3, [r5, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d908      	bls.n	80055ec <_fwalk_sglue+0x34>
 80055da:	220e      	movs	r2, #14
 80055dc:	5eab      	ldrsh	r3, [r5, r2]
 80055de:	3301      	adds	r3, #1
 80055e0:	d004      	beq.n	80055ec <_fwalk_sglue+0x34>
 80055e2:	0029      	movs	r1, r5
 80055e4:	9800      	ldr	r0, [sp, #0]
 80055e6:	9b01      	ldr	r3, [sp, #4]
 80055e8:	4798      	blx	r3
 80055ea:	4306      	orrs	r6, r0
 80055ec:	3568      	adds	r5, #104	; 0x68
 80055ee:	e7ea      	b.n	80055c6 <_fwalk_sglue+0xe>

080055f0 <iprintf>:
 80055f0:	b40f      	push	{r0, r1, r2, r3}
 80055f2:	b507      	push	{r0, r1, r2, lr}
 80055f4:	4905      	ldr	r1, [pc, #20]	; (800560c <iprintf+0x1c>)
 80055f6:	ab04      	add	r3, sp, #16
 80055f8:	6808      	ldr	r0, [r1, #0]
 80055fa:	cb04      	ldmia	r3!, {r2}
 80055fc:	6881      	ldr	r1, [r0, #8]
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	f001 fc4c 	bl	8006e9c <_vfiprintf_r>
 8005604:	b003      	add	sp, #12
 8005606:	bc08      	pop	{r3}
 8005608:	b004      	add	sp, #16
 800560a:	4718      	bx	r3
 800560c:	20000074 	.word	0x20000074

08005610 <__sread>:
 8005610:	b570      	push	{r4, r5, r6, lr}
 8005612:	000c      	movs	r4, r1
 8005614:	250e      	movs	r5, #14
 8005616:	5f49      	ldrsh	r1, [r1, r5]
 8005618:	f000 f878 	bl	800570c <_read_r>
 800561c:	2800      	cmp	r0, #0
 800561e:	db03      	blt.n	8005628 <__sread+0x18>
 8005620:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005622:	181b      	adds	r3, r3, r0
 8005624:	6563      	str	r3, [r4, #84]	; 0x54
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	89a3      	ldrh	r3, [r4, #12]
 800562a:	4a02      	ldr	r2, [pc, #8]	; (8005634 <__sread+0x24>)
 800562c:	4013      	ands	r3, r2
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	e7f9      	b.n	8005626 <__sread+0x16>
 8005632:	46c0      	nop			; (mov r8, r8)
 8005634:	ffffefff 	.word	0xffffefff

08005638 <__swrite>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	001f      	movs	r7, r3
 800563c:	898b      	ldrh	r3, [r1, #12]
 800563e:	0005      	movs	r5, r0
 8005640:	000c      	movs	r4, r1
 8005642:	0016      	movs	r6, r2
 8005644:	05db      	lsls	r3, r3, #23
 8005646:	d505      	bpl.n	8005654 <__swrite+0x1c>
 8005648:	230e      	movs	r3, #14
 800564a:	5ec9      	ldrsh	r1, [r1, r3]
 800564c:	2200      	movs	r2, #0
 800564e:	2302      	movs	r3, #2
 8005650:	f000 f848 	bl	80056e4 <_lseek_r>
 8005654:	89a3      	ldrh	r3, [r4, #12]
 8005656:	4a05      	ldr	r2, [pc, #20]	; (800566c <__swrite+0x34>)
 8005658:	0028      	movs	r0, r5
 800565a:	4013      	ands	r3, r2
 800565c:	81a3      	strh	r3, [r4, #12]
 800565e:	0032      	movs	r2, r6
 8005660:	230e      	movs	r3, #14
 8005662:	5ee1      	ldrsh	r1, [r4, r3]
 8005664:	003b      	movs	r3, r7
 8005666:	f000 f865 	bl	8005734 <_write_r>
 800566a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800566c:	ffffefff 	.word	0xffffefff

08005670 <__sseek>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	000c      	movs	r4, r1
 8005674:	250e      	movs	r5, #14
 8005676:	5f49      	ldrsh	r1, [r1, r5]
 8005678:	f000 f834 	bl	80056e4 <_lseek_r>
 800567c:	89a3      	ldrh	r3, [r4, #12]
 800567e:	1c42      	adds	r2, r0, #1
 8005680:	d103      	bne.n	800568a <__sseek+0x1a>
 8005682:	4a05      	ldr	r2, [pc, #20]	; (8005698 <__sseek+0x28>)
 8005684:	4013      	ands	r3, r2
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	2280      	movs	r2, #128	; 0x80
 800568c:	0152      	lsls	r2, r2, #5
 800568e:	4313      	orrs	r3, r2
 8005690:	81a3      	strh	r3, [r4, #12]
 8005692:	6560      	str	r0, [r4, #84]	; 0x54
 8005694:	e7f8      	b.n	8005688 <__sseek+0x18>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	ffffefff 	.word	0xffffefff

0800569c <__sclose>:
 800569c:	b510      	push	{r4, lr}
 800569e:	230e      	movs	r3, #14
 80056a0:	5ec9      	ldrsh	r1, [r1, r3]
 80056a2:	f000 f80d 	bl	80056c0 <_close_r>
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <memset>:
 80056a8:	0003      	movs	r3, r0
 80056aa:	1882      	adds	r2, r0, r2
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d100      	bne.n	80056b2 <memset+0xa>
 80056b0:	4770      	bx	lr
 80056b2:	7019      	strb	r1, [r3, #0]
 80056b4:	3301      	adds	r3, #1
 80056b6:	e7f9      	b.n	80056ac <memset+0x4>

080056b8 <_localeconv_r>:
 80056b8:	4800      	ldr	r0, [pc, #0]	; (80056bc <_localeconv_r+0x4>)
 80056ba:	4770      	bx	lr
 80056bc:	20000168 	.word	0x20000168

080056c0 <_close_r>:
 80056c0:	2300      	movs	r3, #0
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	4d06      	ldr	r5, [pc, #24]	; (80056e0 <_close_r+0x20>)
 80056c6:	0004      	movs	r4, r0
 80056c8:	0008      	movs	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fd fc5f 	bl	8002f8e <_close>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d103      	bne.n	80056dc <_close_r+0x1c>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d000      	beq.n	80056dc <_close_r+0x1c>
 80056da:	6023      	str	r3, [r4, #0]
 80056dc:	bd70      	pop	{r4, r5, r6, pc}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	200003fc 	.word	0x200003fc

080056e4 <_lseek_r>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	0004      	movs	r4, r0
 80056e8:	0008      	movs	r0, r1
 80056ea:	0011      	movs	r1, r2
 80056ec:	001a      	movs	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	4d05      	ldr	r5, [pc, #20]	; (8005708 <_lseek_r+0x24>)
 80056f2:	602b      	str	r3, [r5, #0]
 80056f4:	f7fd fc6c 	bl	8002fd0 <_lseek>
 80056f8:	1c43      	adds	r3, r0, #1
 80056fa:	d103      	bne.n	8005704 <_lseek_r+0x20>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d000      	beq.n	8005704 <_lseek_r+0x20>
 8005702:	6023      	str	r3, [r4, #0]
 8005704:	bd70      	pop	{r4, r5, r6, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	200003fc 	.word	0x200003fc

0800570c <_read_r>:
 800570c:	b570      	push	{r4, r5, r6, lr}
 800570e:	0004      	movs	r4, r0
 8005710:	0008      	movs	r0, r1
 8005712:	0011      	movs	r1, r2
 8005714:	001a      	movs	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	4d05      	ldr	r5, [pc, #20]	; (8005730 <_read_r+0x24>)
 800571a:	602b      	str	r3, [r5, #0]
 800571c:	f7fd fbfe 	bl	8002f1c <_read>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d103      	bne.n	800572c <_read_r+0x20>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d000      	beq.n	800572c <_read_r+0x20>
 800572a:	6023      	str	r3, [r4, #0]
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	46c0      	nop			; (mov r8, r8)
 8005730:	200003fc 	.word	0x200003fc

08005734 <_write_r>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	0004      	movs	r4, r0
 8005738:	0008      	movs	r0, r1
 800573a:	0011      	movs	r1, r2
 800573c:	001a      	movs	r2, r3
 800573e:	2300      	movs	r3, #0
 8005740:	4d05      	ldr	r5, [pc, #20]	; (8005758 <_write_r+0x24>)
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fd fc07 	bl	8002f56 <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d103      	bne.n	8005754 <_write_r+0x20>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d000      	beq.n	8005754 <_write_r+0x20>
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	200003fc 	.word	0x200003fc

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	20000074 	.word	0x20000074

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	2600      	movs	r6, #0
 800576c:	4c0c      	ldr	r4, [pc, #48]	; (80057a0 <__libc_init_array+0x38>)
 800576e:	4d0d      	ldr	r5, [pc, #52]	; (80057a4 <__libc_init_array+0x3c>)
 8005770:	1b64      	subs	r4, r4, r5
 8005772:	10a4      	asrs	r4, r4, #2
 8005774:	42a6      	cmp	r6, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	2600      	movs	r6, #0
 800577a:	f001 ff79 	bl	8007670 <_init>
 800577e:	4c0a      	ldr	r4, [pc, #40]	; (80057a8 <__libc_init_array+0x40>)
 8005780:	4d0a      	ldr	r5, [pc, #40]	; (80057ac <__libc_init_array+0x44>)
 8005782:	1b64      	subs	r4, r4, r5
 8005784:	10a4      	asrs	r4, r4, #2
 8005786:	42a6      	cmp	r6, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	00b3      	lsls	r3, r6, #2
 800578e:	58eb      	ldr	r3, [r5, r3]
 8005790:	4798      	blx	r3
 8005792:	3601      	adds	r6, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	00b3      	lsls	r3, r6, #2
 8005798:	58eb      	ldr	r3, [r5, r3]
 800579a:	4798      	blx	r3
 800579c:	3601      	adds	r6, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	08007a74 	.word	0x08007a74
 80057a4:	08007a74 	.word	0x08007a74
 80057a8:	08007a78 	.word	0x08007a78
 80057ac:	08007a74 	.word	0x08007a74

080057b0 <__retarget_lock_init_recursive>:
 80057b0:	4770      	bx	lr

080057b2 <__retarget_lock_acquire_recursive>:
 80057b2:	4770      	bx	lr

080057b4 <__retarget_lock_release_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <memchr>:
 80057b6:	b2c9      	uxtb	r1, r1
 80057b8:	1882      	adds	r2, r0, r2
 80057ba:	4290      	cmp	r0, r2
 80057bc:	d101      	bne.n	80057c2 <memchr+0xc>
 80057be:	2000      	movs	r0, #0
 80057c0:	4770      	bx	lr
 80057c2:	7803      	ldrb	r3, [r0, #0]
 80057c4:	428b      	cmp	r3, r1
 80057c6:	d0fb      	beq.n	80057c0 <memchr+0xa>
 80057c8:	3001      	adds	r0, #1
 80057ca:	e7f6      	b.n	80057ba <memchr+0x4>

080057cc <quorem>:
 80057cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ce:	6902      	ldr	r2, [r0, #16]
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	b089      	sub	sp, #36	; 0x24
 80057d4:	0007      	movs	r7, r0
 80057d6:	9104      	str	r1, [sp, #16]
 80057d8:	2000      	movs	r0, #0
 80057da:	429a      	cmp	r2, r3
 80057dc:	db69      	blt.n	80058b2 <quorem+0xe6>
 80057de:	3b01      	subs	r3, #1
 80057e0:	009c      	lsls	r4, r3, #2
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	000b      	movs	r3, r1
 80057e6:	3314      	adds	r3, #20
 80057e8:	9306      	str	r3, [sp, #24]
 80057ea:	191b      	adds	r3, r3, r4
 80057ec:	9305      	str	r3, [sp, #20]
 80057ee:	003b      	movs	r3, r7
 80057f0:	3314      	adds	r3, #20
 80057f2:	9303      	str	r3, [sp, #12]
 80057f4:	191c      	adds	r4, r3, r4
 80057f6:	9b05      	ldr	r3, [sp, #20]
 80057f8:	6826      	ldr	r6, [r4, #0]
 80057fa:	681d      	ldr	r5, [r3, #0]
 80057fc:	0030      	movs	r0, r6
 80057fe:	3501      	adds	r5, #1
 8005800:	0029      	movs	r1, r5
 8005802:	f7fa fc9d 	bl	8000140 <__udivsi3>
 8005806:	9002      	str	r0, [sp, #8]
 8005808:	42ae      	cmp	r6, r5
 800580a:	d329      	bcc.n	8005860 <quorem+0x94>
 800580c:	9b06      	ldr	r3, [sp, #24]
 800580e:	2600      	movs	r6, #0
 8005810:	469c      	mov	ip, r3
 8005812:	9d03      	ldr	r5, [sp, #12]
 8005814:	9606      	str	r6, [sp, #24]
 8005816:	4662      	mov	r2, ip
 8005818:	ca08      	ldmia	r2!, {r3}
 800581a:	6828      	ldr	r0, [r5, #0]
 800581c:	4694      	mov	ip, r2
 800581e:	9a02      	ldr	r2, [sp, #8]
 8005820:	b299      	uxth	r1, r3
 8005822:	4351      	muls	r1, r2
 8005824:	0c1b      	lsrs	r3, r3, #16
 8005826:	4353      	muls	r3, r2
 8005828:	1989      	adds	r1, r1, r6
 800582a:	0c0a      	lsrs	r2, r1, #16
 800582c:	189b      	adds	r3, r3, r2
 800582e:	9307      	str	r3, [sp, #28]
 8005830:	0c1e      	lsrs	r6, r3, #16
 8005832:	9b06      	ldr	r3, [sp, #24]
 8005834:	b282      	uxth	r2, r0
 8005836:	18d2      	adds	r2, r2, r3
 8005838:	466b      	mov	r3, sp
 800583a:	b289      	uxth	r1, r1
 800583c:	8b9b      	ldrh	r3, [r3, #28]
 800583e:	1a52      	subs	r2, r2, r1
 8005840:	0c01      	lsrs	r1, r0, #16
 8005842:	1ac9      	subs	r1, r1, r3
 8005844:	1413      	asrs	r3, r2, #16
 8005846:	18cb      	adds	r3, r1, r3
 8005848:	1419      	asrs	r1, r3, #16
 800584a:	b292      	uxth	r2, r2
 800584c:	041b      	lsls	r3, r3, #16
 800584e:	4313      	orrs	r3, r2
 8005850:	c508      	stmia	r5!, {r3}
 8005852:	9b05      	ldr	r3, [sp, #20]
 8005854:	9106      	str	r1, [sp, #24]
 8005856:	4563      	cmp	r3, ip
 8005858:	d2dd      	bcs.n	8005816 <quorem+0x4a>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d030      	beq.n	80058c2 <quorem+0xf6>
 8005860:	0038      	movs	r0, r7
 8005862:	9904      	ldr	r1, [sp, #16]
 8005864:	f001 f9de 	bl	8006c24 <__mcmp>
 8005868:	2800      	cmp	r0, #0
 800586a:	db21      	blt.n	80058b0 <quorem+0xe4>
 800586c:	0038      	movs	r0, r7
 800586e:	2600      	movs	r6, #0
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	9c04      	ldr	r4, [sp, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	9302      	str	r3, [sp, #8]
 8005878:	3014      	adds	r0, #20
 800587a:	3414      	adds	r4, #20
 800587c:	6803      	ldr	r3, [r0, #0]
 800587e:	cc02      	ldmia	r4!, {r1}
 8005880:	b29d      	uxth	r5, r3
 8005882:	19ad      	adds	r5, r5, r6
 8005884:	b28a      	uxth	r2, r1
 8005886:	1aaa      	subs	r2, r5, r2
 8005888:	0c09      	lsrs	r1, r1, #16
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	1a5b      	subs	r3, r3, r1
 800588e:	1411      	asrs	r1, r2, #16
 8005890:	185b      	adds	r3, r3, r1
 8005892:	141e      	asrs	r6, r3, #16
 8005894:	b292      	uxth	r2, r2
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	4313      	orrs	r3, r2
 800589a:	c008      	stmia	r0!, {r3}
 800589c:	9b05      	ldr	r3, [sp, #20]
 800589e:	42a3      	cmp	r3, r4
 80058a0:	d2ec      	bcs.n	800587c <quorem+0xb0>
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	9a03      	ldr	r2, [sp, #12]
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	18d3      	adds	r3, r2, r3
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	2a00      	cmp	r2, #0
 80058ae:	d015      	beq.n	80058dc <quorem+0x110>
 80058b0:	9802      	ldr	r0, [sp, #8]
 80058b2:	b009      	add	sp, #36	; 0x24
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <quorem+0xfe>
 80058bc:	9b01      	ldr	r3, [sp, #4]
 80058be:	3b01      	subs	r3, #1
 80058c0:	9301      	str	r3, [sp, #4]
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	3c04      	subs	r4, #4
 80058c6:	42a3      	cmp	r3, r4
 80058c8:	d3f5      	bcc.n	80058b6 <quorem+0xea>
 80058ca:	9b01      	ldr	r3, [sp, #4]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	e7c7      	b.n	8005860 <quorem+0x94>
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	2a00      	cmp	r2, #0
 80058d4:	d106      	bne.n	80058e4 <quorem+0x118>
 80058d6:	9a01      	ldr	r2, [sp, #4]
 80058d8:	3a01      	subs	r2, #1
 80058da:	9201      	str	r2, [sp, #4]
 80058dc:	9a03      	ldr	r2, [sp, #12]
 80058de:	3b04      	subs	r3, #4
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d3f5      	bcc.n	80058d0 <quorem+0x104>
 80058e4:	9b01      	ldr	r3, [sp, #4]
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e7e2      	b.n	80058b0 <quorem+0xe4>
	...

080058ec <_dtoa_r>:
 80058ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058ee:	0014      	movs	r4, r2
 80058f0:	001d      	movs	r5, r3
 80058f2:	69c6      	ldr	r6, [r0, #28]
 80058f4:	b09d      	sub	sp, #116	; 0x74
 80058f6:	9408      	str	r4, [sp, #32]
 80058f8:	9509      	str	r5, [sp, #36]	; 0x24
 80058fa:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80058fc:	9004      	str	r0, [sp, #16]
 80058fe:	2e00      	cmp	r6, #0
 8005900:	d10f      	bne.n	8005922 <_dtoa_r+0x36>
 8005902:	2010      	movs	r0, #16
 8005904:	f000 fe4a 	bl	800659c <malloc>
 8005908:	9b04      	ldr	r3, [sp, #16]
 800590a:	1e02      	subs	r2, r0, #0
 800590c:	61d8      	str	r0, [r3, #28]
 800590e:	d104      	bne.n	800591a <_dtoa_r+0x2e>
 8005910:	21ef      	movs	r1, #239	; 0xef
 8005912:	4bc6      	ldr	r3, [pc, #792]	; (8005c2c <_dtoa_r+0x340>)
 8005914:	48c6      	ldr	r0, [pc, #792]	; (8005c30 <_dtoa_r+0x344>)
 8005916:	f001 fd55 	bl	80073c4 <__assert_func>
 800591a:	6046      	str	r6, [r0, #4]
 800591c:	6086      	str	r6, [r0, #8]
 800591e:	6006      	str	r6, [r0, #0]
 8005920:	60c6      	str	r6, [r0, #12]
 8005922:	9b04      	ldr	r3, [sp, #16]
 8005924:	69db      	ldr	r3, [r3, #28]
 8005926:	6819      	ldr	r1, [r3, #0]
 8005928:	2900      	cmp	r1, #0
 800592a:	d00b      	beq.n	8005944 <_dtoa_r+0x58>
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	2301      	movs	r3, #1
 8005930:	4093      	lsls	r3, r2
 8005932:	604a      	str	r2, [r1, #4]
 8005934:	608b      	str	r3, [r1, #8]
 8005936:	9804      	ldr	r0, [sp, #16]
 8005938:	f000 ff32 	bl	80067a0 <_Bfree>
 800593c:	2200      	movs	r2, #0
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	2d00      	cmp	r5, #0
 8005946:	da1e      	bge.n	8005986 <_dtoa_r+0x9a>
 8005948:	2301      	movs	r3, #1
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	006b      	lsls	r3, r5, #1
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	9309      	str	r3, [sp, #36]	; 0x24
 8005952:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005954:	4bb7      	ldr	r3, [pc, #732]	; (8005c34 <_dtoa_r+0x348>)
 8005956:	4ab7      	ldr	r2, [pc, #732]	; (8005c34 <_dtoa_r+0x348>)
 8005958:	403b      	ands	r3, r7
 800595a:	4293      	cmp	r3, r2
 800595c:	d116      	bne.n	800598c <_dtoa_r+0xa0>
 800595e:	4bb6      	ldr	r3, [pc, #728]	; (8005c38 <_dtoa_r+0x34c>)
 8005960:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	033b      	lsls	r3, r7, #12
 8005966:	0b1b      	lsrs	r3, r3, #12
 8005968:	4323      	orrs	r3, r4
 800596a:	d101      	bne.n	8005970 <_dtoa_r+0x84>
 800596c:	f000 fdb5 	bl	80064da <_dtoa_r+0xbee>
 8005970:	4bb2      	ldr	r3, [pc, #712]	; (8005c3c <_dtoa_r+0x350>)
 8005972:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005974:	9306      	str	r3, [sp, #24]
 8005976:	2a00      	cmp	r2, #0
 8005978:	d002      	beq.n	8005980 <_dtoa_r+0x94>
 800597a:	4bb1      	ldr	r3, [pc, #708]	; (8005c40 <_dtoa_r+0x354>)
 800597c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	9806      	ldr	r0, [sp, #24]
 8005982:	b01d      	add	sp, #116	; 0x74
 8005984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005986:	2300      	movs	r3, #0
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	e7e2      	b.n	8005952 <_dtoa_r+0x66>
 800598c:	9a08      	ldr	r2, [sp, #32]
 800598e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005990:	9210      	str	r2, [sp, #64]	; 0x40
 8005992:	9311      	str	r3, [sp, #68]	; 0x44
 8005994:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005996:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	f7fa fd56 	bl	800044c <__aeabi_dcmpeq>
 80059a0:	1e06      	subs	r6, r0, #0
 80059a2:	d009      	beq.n	80059b8 <_dtoa_r+0xcc>
 80059a4:	2301      	movs	r3, #1
 80059a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4ba6      	ldr	r3, [pc, #664]	; (8005c44 <_dtoa_r+0x358>)
 80059ac:	9306      	str	r3, [sp, #24]
 80059ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0e5      	beq.n	8005980 <_dtoa_r+0x94>
 80059b4:	4ba4      	ldr	r3, [pc, #656]	; (8005c48 <_dtoa_r+0x35c>)
 80059b6:	e7e1      	b.n	800597c <_dtoa_r+0x90>
 80059b8:	ab1a      	add	r3, sp, #104	; 0x68
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	ab1b      	add	r3, sp, #108	; 0x6c
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	9804      	ldr	r0, [sp, #16]
 80059c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80059c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059c6:	f001 f9e1 	bl	8006d8c <__d2b>
 80059ca:	007a      	lsls	r2, r7, #1
 80059cc:	9005      	str	r0, [sp, #20]
 80059ce:	0d52      	lsrs	r2, r2, #21
 80059d0:	d100      	bne.n	80059d4 <_dtoa_r+0xe8>
 80059d2:	e07b      	b.n	8005acc <_dtoa_r+0x1e0>
 80059d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059d6:	9617      	str	r6, [sp, #92]	; 0x5c
 80059d8:	0319      	lsls	r1, r3, #12
 80059da:	4b9c      	ldr	r3, [pc, #624]	; (8005c4c <_dtoa_r+0x360>)
 80059dc:	0b09      	lsrs	r1, r1, #12
 80059de:	430b      	orrs	r3, r1
 80059e0:	499b      	ldr	r1, [pc, #620]	; (8005c50 <_dtoa_r+0x364>)
 80059e2:	1857      	adds	r7, r2, r1
 80059e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80059e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80059e8:	0019      	movs	r1, r3
 80059ea:	2200      	movs	r2, #0
 80059ec:	4b99      	ldr	r3, [pc, #612]	; (8005c54 <_dtoa_r+0x368>)
 80059ee:	f7fb ff77 	bl	80018e0 <__aeabi_dsub>
 80059f2:	4a99      	ldr	r2, [pc, #612]	; (8005c58 <_dtoa_r+0x36c>)
 80059f4:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <_dtoa_r+0x370>)
 80059f6:	f7fb fcb1 	bl	800135c <__aeabi_dmul>
 80059fa:	4a99      	ldr	r2, [pc, #612]	; (8005c60 <_dtoa_r+0x374>)
 80059fc:	4b99      	ldr	r3, [pc, #612]	; (8005c64 <_dtoa_r+0x378>)
 80059fe:	f7fa fd53 	bl	80004a8 <__aeabi_dadd>
 8005a02:	0004      	movs	r4, r0
 8005a04:	0038      	movs	r0, r7
 8005a06:	000d      	movs	r5, r1
 8005a08:	f7fc fb40 	bl	800208c <__aeabi_i2d>
 8005a0c:	4a96      	ldr	r2, [pc, #600]	; (8005c68 <_dtoa_r+0x37c>)
 8005a0e:	4b97      	ldr	r3, [pc, #604]	; (8005c6c <_dtoa_r+0x380>)
 8005a10:	f7fb fca4 	bl	800135c <__aeabi_dmul>
 8005a14:	0002      	movs	r2, r0
 8005a16:	000b      	movs	r3, r1
 8005a18:	0020      	movs	r0, r4
 8005a1a:	0029      	movs	r1, r5
 8005a1c:	f7fa fd44 	bl	80004a8 <__aeabi_dadd>
 8005a20:	0004      	movs	r4, r0
 8005a22:	000d      	movs	r5, r1
 8005a24:	f7fc fafc 	bl	8002020 <__aeabi_d2iz>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	9003      	str	r0, [sp, #12]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	0020      	movs	r0, r4
 8005a30:	0029      	movs	r1, r5
 8005a32:	f7fa fd11 	bl	8000458 <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d00b      	beq.n	8005a52 <_dtoa_r+0x166>
 8005a3a:	9803      	ldr	r0, [sp, #12]
 8005a3c:	f7fc fb26 	bl	800208c <__aeabi_i2d>
 8005a40:	002b      	movs	r3, r5
 8005a42:	0022      	movs	r2, r4
 8005a44:	f7fa fd02 	bl	800044c <__aeabi_dcmpeq>
 8005a48:	4243      	negs	r3, r0
 8005a4a:	4158      	adcs	r0, r3
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	1a1b      	subs	r3, r3, r0
 8005a50:	9303      	str	r3, [sp, #12]
 8005a52:	2301      	movs	r3, #1
 8005a54:	9316      	str	r3, [sp, #88]	; 0x58
 8005a56:	9b03      	ldr	r3, [sp, #12]
 8005a58:	2b16      	cmp	r3, #22
 8005a5a:	d810      	bhi.n	8005a7e <_dtoa_r+0x192>
 8005a5c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005a5e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005a60:	9a03      	ldr	r2, [sp, #12]
 8005a62:	4b83      	ldr	r3, [pc, #524]	; (8005c70 <_dtoa_r+0x384>)
 8005a64:	00d2      	lsls	r2, r2, #3
 8005a66:	189b      	adds	r3, r3, r2
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f7fa fcf4 	bl	8000458 <__aeabi_dcmplt>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d047      	beq.n	8005b04 <_dtoa_r+0x218>
 8005a74:	9b03      	ldr	r3, [sp, #12]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	9303      	str	r3, [sp, #12]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9316      	str	r3, [sp, #88]	; 0x58
 8005a7e:	2200      	movs	r2, #0
 8005a80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005a82:	920a      	str	r2, [sp, #40]	; 0x28
 8005a84:	1bdb      	subs	r3, r3, r7
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	d53e      	bpl.n	8005b08 <_dtoa_r+0x21c>
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a90:	2300      	movs	r3, #0
 8005a92:	930c      	str	r3, [sp, #48]	; 0x30
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	db38      	blt.n	8005b0c <_dtoa_r+0x220>
 8005a9a:	9a03      	ldr	r2, [sp, #12]
 8005a9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a9e:	4694      	mov	ip, r2
 8005aa0:	4463      	add	r3, ip
 8005aa2:	930c      	str	r3, [sp, #48]	; 0x30
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9213      	str	r2, [sp, #76]	; 0x4c
 8005aa8:	930d      	str	r3, [sp, #52]	; 0x34
 8005aaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aac:	2401      	movs	r4, #1
 8005aae:	2b09      	cmp	r3, #9
 8005ab0:	d867      	bhi.n	8005b82 <_dtoa_r+0x296>
 8005ab2:	2b05      	cmp	r3, #5
 8005ab4:	dd02      	ble.n	8005abc <_dtoa_r+0x1d0>
 8005ab6:	2400      	movs	r4, #0
 8005ab8:	3b04      	subs	r3, #4
 8005aba:	9322      	str	r3, [sp, #136]	; 0x88
 8005abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005abe:	1e98      	subs	r0, r3, #2
 8005ac0:	2803      	cmp	r0, #3
 8005ac2:	d867      	bhi.n	8005b94 <_dtoa_r+0x2a8>
 8005ac4:	f7fa fb28 	bl	8000118 <__gnu_thumb1_case_uqi>
 8005ac8:	5b383a2b 	.word	0x5b383a2b
 8005acc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ace:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8005ad0:	18f6      	adds	r6, r6, r3
 8005ad2:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <_dtoa_r+0x388>)
 8005ad4:	18f2      	adds	r2, r6, r3
 8005ad6:	2a20      	cmp	r2, #32
 8005ad8:	dd0f      	ble.n	8005afa <_dtoa_r+0x20e>
 8005ada:	2340      	movs	r3, #64	; 0x40
 8005adc:	1a9b      	subs	r3, r3, r2
 8005ade:	409f      	lsls	r7, r3
 8005ae0:	4b65      	ldr	r3, [pc, #404]	; (8005c78 <_dtoa_r+0x38c>)
 8005ae2:	0038      	movs	r0, r7
 8005ae4:	18f3      	adds	r3, r6, r3
 8005ae6:	40dc      	lsrs	r4, r3
 8005ae8:	4320      	orrs	r0, r4
 8005aea:	f7fc faff 	bl	80020ec <__aeabi_ui2d>
 8005aee:	2201      	movs	r2, #1
 8005af0:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <_dtoa_r+0x390>)
 8005af2:	1e77      	subs	r7, r6, #1
 8005af4:	18cb      	adds	r3, r1, r3
 8005af6:	9217      	str	r2, [sp, #92]	; 0x5c
 8005af8:	e776      	b.n	80059e8 <_dtoa_r+0xfc>
 8005afa:	2320      	movs	r3, #32
 8005afc:	0020      	movs	r0, r4
 8005afe:	1a9b      	subs	r3, r3, r2
 8005b00:	4098      	lsls	r0, r3
 8005b02:	e7f2      	b.n	8005aea <_dtoa_r+0x1fe>
 8005b04:	9016      	str	r0, [sp, #88]	; 0x58
 8005b06:	e7ba      	b.n	8005a7e <_dtoa_r+0x192>
 8005b08:	920c      	str	r2, [sp, #48]	; 0x30
 8005b0a:	e7c3      	b.n	8005a94 <_dtoa_r+0x1a8>
 8005b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0e:	9a03      	ldr	r2, [sp, #12]
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	930a      	str	r3, [sp, #40]	; 0x28
 8005b14:	4253      	negs	r3, r2
 8005b16:	930d      	str	r3, [sp, #52]	; 0x34
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b1c:	e7c5      	b.n	8005aaa <_dtoa_r+0x1be>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b24:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dc13      	bgt.n	8005b54 <_dtoa_r+0x268>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	001a      	movs	r2, r3
 8005b30:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b32:	9307      	str	r3, [sp, #28]
 8005b34:	9223      	str	r2, [sp, #140]	; 0x8c
 8005b36:	e00d      	b.n	8005b54 <_dtoa_r+0x268>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e7f1      	b.n	8005b20 <_dtoa_r+0x234>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005b40:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b42:	4694      	mov	ip, r2
 8005b44:	9b03      	ldr	r3, [sp, #12]
 8005b46:	4463      	add	r3, ip
 8005b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	9307      	str	r3, [sp, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	dc00      	bgt.n	8005b54 <_dtoa_r+0x268>
 8005b52:	2301      	movs	r3, #1
 8005b54:	9a04      	ldr	r2, [sp, #16]
 8005b56:	2100      	movs	r1, #0
 8005b58:	69d0      	ldr	r0, [r2, #28]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	0015      	movs	r5, r2
 8005b5e:	3514      	adds	r5, #20
 8005b60:	429d      	cmp	r5, r3
 8005b62:	d91b      	bls.n	8005b9c <_dtoa_r+0x2b0>
 8005b64:	6041      	str	r1, [r0, #4]
 8005b66:	9804      	ldr	r0, [sp, #16]
 8005b68:	f000 fdd6 	bl	8006718 <_Balloc>
 8005b6c:	9006      	str	r0, [sp, #24]
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d117      	bne.n	8005ba2 <_dtoa_r+0x2b6>
 8005b72:	21b0      	movs	r1, #176	; 0xb0
 8005b74:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <_dtoa_r+0x394>)
 8005b76:	482e      	ldr	r0, [pc, #184]	; (8005c30 <_dtoa_r+0x344>)
 8005b78:	9a06      	ldr	r2, [sp, #24]
 8005b7a:	31ff      	adds	r1, #255	; 0xff
 8005b7c:	e6cb      	b.n	8005916 <_dtoa_r+0x2a>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e7dd      	b.n	8005b3e <_dtoa_r+0x252>
 8005b82:	2300      	movs	r3, #0
 8005b84:	940f      	str	r4, [sp, #60]	; 0x3c
 8005b86:	9322      	str	r3, [sp, #136]	; 0x88
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005b8c:	9307      	str	r3, [sp, #28]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	3313      	adds	r3, #19
 8005b92:	e7cf      	b.n	8005b34 <_dtoa_r+0x248>
 8005b94:	2301      	movs	r3, #1
 8005b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b98:	3b02      	subs	r3, #2
 8005b9a:	e7f6      	b.n	8005b8a <_dtoa_r+0x29e>
 8005b9c:	3101      	adds	r1, #1
 8005b9e:	0052      	lsls	r2, r2, #1
 8005ba0:	e7dc      	b.n	8005b5c <_dtoa_r+0x270>
 8005ba2:	9b04      	ldr	r3, [sp, #16]
 8005ba4:	9a06      	ldr	r2, [sp, #24]
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	601a      	str	r2, [r3, #0]
 8005baa:	9b07      	ldr	r3, [sp, #28]
 8005bac:	2b0e      	cmp	r3, #14
 8005bae:	d900      	bls.n	8005bb2 <_dtoa_r+0x2c6>
 8005bb0:	e0e5      	b.n	8005d7e <_dtoa_r+0x492>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	d100      	bne.n	8005bb8 <_dtoa_r+0x2cc>
 8005bb6:	e0e2      	b.n	8005d7e <_dtoa_r+0x492>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	dd64      	ble.n	8005c88 <_dtoa_r+0x39c>
 8005bbe:	210f      	movs	r1, #15
 8005bc0:	9a03      	ldr	r2, [sp, #12]
 8005bc2:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <_dtoa_r+0x384>)
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	00d2      	lsls	r2, r2, #3
 8005bc8:	189b      	adds	r3, r3, r2
 8005bca:	681e      	ldr	r6, [r3, #0]
 8005bcc:	685f      	ldr	r7, [r3, #4]
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	2402      	movs	r4, #2
 8005bd2:	111d      	asrs	r5, r3, #4
 8005bd4:	05db      	lsls	r3, r3, #23
 8005bd6:	d50a      	bpl.n	8005bee <_dtoa_r+0x302>
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	; (8005c84 <_dtoa_r+0x398>)
 8005bda:	400d      	ands	r5, r1
 8005bdc:	6a1a      	ldr	r2, [r3, #32]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005be2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005be4:	f7fa ffc0 	bl	8000b68 <__aeabi_ddiv>
 8005be8:	9008      	str	r0, [sp, #32]
 8005bea:	9109      	str	r1, [sp, #36]	; 0x24
 8005bec:	3401      	adds	r4, #1
 8005bee:	4b25      	ldr	r3, [pc, #148]	; (8005c84 <_dtoa_r+0x398>)
 8005bf0:	930e      	str	r3, [sp, #56]	; 0x38
 8005bf2:	2d00      	cmp	r5, #0
 8005bf4:	d108      	bne.n	8005c08 <_dtoa_r+0x31c>
 8005bf6:	9808      	ldr	r0, [sp, #32]
 8005bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005bfa:	0032      	movs	r2, r6
 8005bfc:	003b      	movs	r3, r7
 8005bfe:	f7fa ffb3 	bl	8000b68 <__aeabi_ddiv>
 8005c02:	9008      	str	r0, [sp, #32]
 8005c04:	9109      	str	r1, [sp, #36]	; 0x24
 8005c06:	e05a      	b.n	8005cbe <_dtoa_r+0x3d2>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	421d      	tst	r5, r3
 8005c0c:	d009      	beq.n	8005c22 <_dtoa_r+0x336>
 8005c0e:	18e4      	adds	r4, r4, r3
 8005c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c12:	0030      	movs	r0, r6
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	0039      	movs	r1, r7
 8005c1a:	f7fb fb9f 	bl	800135c <__aeabi_dmul>
 8005c1e:	0006      	movs	r6, r0
 8005c20:	000f      	movs	r7, r1
 8005c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c24:	106d      	asrs	r5, r5, #1
 8005c26:	3308      	adds	r3, #8
 8005c28:	e7e2      	b.n	8005bf0 <_dtoa_r+0x304>
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	08007745 	.word	0x08007745
 8005c30:	0800775c 	.word	0x0800775c
 8005c34:	7ff00000 	.word	0x7ff00000
 8005c38:	0000270f 	.word	0x0000270f
 8005c3c:	08007741 	.word	0x08007741
 8005c40:	08007744 	.word	0x08007744
 8005c44:	08007714 	.word	0x08007714
 8005c48:	08007715 	.word	0x08007715
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	fffffc01 	.word	0xfffffc01
 8005c54:	3ff80000 	.word	0x3ff80000
 8005c58:	636f4361 	.word	0x636f4361
 8005c5c:	3fd287a7 	.word	0x3fd287a7
 8005c60:	8b60c8b3 	.word	0x8b60c8b3
 8005c64:	3fc68a28 	.word	0x3fc68a28
 8005c68:	509f79fb 	.word	0x509f79fb
 8005c6c:	3fd34413 	.word	0x3fd34413
 8005c70:	08007848 	.word	0x08007848
 8005c74:	00000432 	.word	0x00000432
 8005c78:	00000412 	.word	0x00000412
 8005c7c:	fe100000 	.word	0xfe100000
 8005c80:	080077b4 	.word	0x080077b4
 8005c84:	08007820 	.word	0x08007820
 8005c88:	9b03      	ldr	r3, [sp, #12]
 8005c8a:	2402      	movs	r4, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <_dtoa_r+0x3d2>
 8005c90:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005c92:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005c94:	220f      	movs	r2, #15
 8005c96:	425d      	negs	r5, r3
 8005c98:	402a      	ands	r2, r5
 8005c9a:	4bdd      	ldr	r3, [pc, #884]	; (8006010 <_dtoa_r+0x724>)
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	189b      	adds	r3, r3, r2
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f7fb fb5a 	bl	800135c <__aeabi_dmul>
 8005ca8:	2701      	movs	r7, #1
 8005caa:	2300      	movs	r3, #0
 8005cac:	9008      	str	r0, [sp, #32]
 8005cae:	9109      	str	r1, [sp, #36]	; 0x24
 8005cb0:	4ed8      	ldr	r6, [pc, #864]	; (8006014 <_dtoa_r+0x728>)
 8005cb2:	112d      	asrs	r5, r5, #4
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	d000      	beq.n	8005cba <_dtoa_r+0x3ce>
 8005cb8:	e091      	b.n	8005dde <_dtoa_r+0x4f2>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1a1      	bne.n	8005c02 <_dtoa_r+0x316>
 8005cbe:	9e08      	ldr	r6, [sp, #32]
 8005cc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005cc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d100      	bne.n	8005cca <_dtoa_r+0x3de>
 8005cc8:	e094      	b.n	8005df4 <_dtoa_r+0x508>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	0030      	movs	r0, r6
 8005cce:	0039      	movs	r1, r7
 8005cd0:	4bd1      	ldr	r3, [pc, #836]	; (8006018 <_dtoa_r+0x72c>)
 8005cd2:	f7fa fbc1 	bl	8000458 <__aeabi_dcmplt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	d100      	bne.n	8005cdc <_dtoa_r+0x3f0>
 8005cda:	e08b      	b.n	8005df4 <_dtoa_r+0x508>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d100      	bne.n	8005ce4 <_dtoa_r+0x3f8>
 8005ce2:	e087      	b.n	8005df4 <_dtoa_r+0x508>
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd45      	ble.n	8005d76 <_dtoa_r+0x48a>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	930e      	str	r3, [sp, #56]	; 0x38
 8005cf2:	0030      	movs	r0, r6
 8005cf4:	4bc9      	ldr	r3, [pc, #804]	; (800601c <_dtoa_r+0x730>)
 8005cf6:	0039      	movs	r1, r7
 8005cf8:	f7fb fb30 	bl	800135c <__aeabi_dmul>
 8005cfc:	9008      	str	r0, [sp, #32]
 8005cfe:	9109      	str	r1, [sp, #36]	; 0x24
 8005d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d02:	3401      	adds	r4, #1
 8005d04:	0020      	movs	r0, r4
 8005d06:	9e08      	ldr	r6, [sp, #32]
 8005d08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8005d0c:	f7fc f9be 	bl	800208c <__aeabi_i2d>
 8005d10:	0032      	movs	r2, r6
 8005d12:	003b      	movs	r3, r7
 8005d14:	f7fb fb22 	bl	800135c <__aeabi_dmul>
 8005d18:	2200      	movs	r2, #0
 8005d1a:	4bc1      	ldr	r3, [pc, #772]	; (8006020 <_dtoa_r+0x734>)
 8005d1c:	f7fa fbc4 	bl	80004a8 <__aeabi_dadd>
 8005d20:	4ac0      	ldr	r2, [pc, #768]	; (8006024 <_dtoa_r+0x738>)
 8005d22:	9014      	str	r0, [sp, #80]	; 0x50
 8005d24:	9115      	str	r1, [sp, #84]	; 0x54
 8005d26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005d28:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8005d2a:	4694      	mov	ip, r2
 8005d2c:	9308      	str	r3, [sp, #32]
 8005d2e:	9409      	str	r4, [sp, #36]	; 0x24
 8005d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005d32:	4463      	add	r3, ip
 8005d34:	9318      	str	r3, [sp, #96]	; 0x60
 8005d36:	9309      	str	r3, [sp, #36]	; 0x24
 8005d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d15e      	bne.n	8005dfc <_dtoa_r+0x510>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	4bb9      	ldr	r3, [pc, #740]	; (8006028 <_dtoa_r+0x73c>)
 8005d42:	0030      	movs	r0, r6
 8005d44:	0039      	movs	r1, r7
 8005d46:	f7fb fdcb 	bl	80018e0 <__aeabi_dsub>
 8005d4a:	9a08      	ldr	r2, [sp, #32]
 8005d4c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d4e:	0004      	movs	r4, r0
 8005d50:	000d      	movs	r5, r1
 8005d52:	f7fa fb95 	bl	8000480 <__aeabi_dcmpgt>
 8005d56:	2800      	cmp	r0, #0
 8005d58:	d000      	beq.n	8005d5c <_dtoa_r+0x470>
 8005d5a:	e2b3      	b.n	80062c4 <_dtoa_r+0x9d8>
 8005d5c:	48b3      	ldr	r0, [pc, #716]	; (800602c <_dtoa_r+0x740>)
 8005d5e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005d60:	4684      	mov	ip, r0
 8005d62:	4461      	add	r1, ip
 8005d64:	000b      	movs	r3, r1
 8005d66:	0020      	movs	r0, r4
 8005d68:	0029      	movs	r1, r5
 8005d6a:	9a08      	ldr	r2, [sp, #32]
 8005d6c:	f7fa fb74 	bl	8000458 <__aeabi_dcmplt>
 8005d70:	2800      	cmp	r0, #0
 8005d72:	d000      	beq.n	8005d76 <_dtoa_r+0x48a>
 8005d74:	e2a3      	b.n	80062be <_dtoa_r+0x9d2>
 8005d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d78:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005d7a:	9308      	str	r3, [sp, #32]
 8005d7c:	9409      	str	r4, [sp, #36]	; 0x24
 8005d7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	da00      	bge.n	8005d86 <_dtoa_r+0x49a>
 8005d84:	e179      	b.n	800607a <_dtoa_r+0x78e>
 8005d86:	9a03      	ldr	r2, [sp, #12]
 8005d88:	2a0e      	cmp	r2, #14
 8005d8a:	dd00      	ble.n	8005d8e <_dtoa_r+0x4a2>
 8005d8c:	e175      	b.n	800607a <_dtoa_r+0x78e>
 8005d8e:	4ba0      	ldr	r3, [pc, #640]	; (8006010 <_dtoa_r+0x724>)
 8005d90:	00d2      	lsls	r2, r2, #3
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	685f      	ldr	r7, [r3, #4]
 8005d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	db00      	blt.n	8005da0 <_dtoa_r+0x4b4>
 8005d9e:	e0e5      	b.n	8005f6c <_dtoa_r+0x680>
 8005da0:	9b07      	ldr	r3, [sp, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	dd00      	ble.n	8005da8 <_dtoa_r+0x4bc>
 8005da6:	e0e1      	b.n	8005f6c <_dtoa_r+0x680>
 8005da8:	d000      	beq.n	8005dac <_dtoa_r+0x4c0>
 8005daa:	e288      	b.n	80062be <_dtoa_r+0x9d2>
 8005dac:	2200      	movs	r2, #0
 8005dae:	0030      	movs	r0, r6
 8005db0:	0039      	movs	r1, r7
 8005db2:	4b9d      	ldr	r3, [pc, #628]	; (8006028 <_dtoa_r+0x73c>)
 8005db4:	f7fb fad2 	bl	800135c <__aeabi_dmul>
 8005db8:	9a08      	ldr	r2, [sp, #32]
 8005dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dbc:	f7fa fb6a 	bl	8000494 <__aeabi_dcmpge>
 8005dc0:	9e07      	ldr	r6, [sp, #28]
 8005dc2:	0037      	movs	r7, r6
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d000      	beq.n	8005dca <_dtoa_r+0x4de>
 8005dc8:	e25f      	b.n	800628a <_dtoa_r+0x99e>
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	9a06      	ldr	r2, [sp, #24]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	2331      	movs	r3, #49	; 0x31
 8005dd4:	7013      	strb	r3, [r2, #0]
 8005dd6:	9b03      	ldr	r3, [sp, #12]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	9303      	str	r3, [sp, #12]
 8005ddc:	e25a      	b.n	8006294 <_dtoa_r+0x9a8>
 8005dde:	423d      	tst	r5, r7
 8005de0:	d005      	beq.n	8005dee <_dtoa_r+0x502>
 8005de2:	6832      	ldr	r2, [r6, #0]
 8005de4:	6873      	ldr	r3, [r6, #4]
 8005de6:	f7fb fab9 	bl	800135c <__aeabi_dmul>
 8005dea:	003b      	movs	r3, r7
 8005dec:	3401      	adds	r4, #1
 8005dee:	106d      	asrs	r5, r5, #1
 8005df0:	3608      	adds	r6, #8
 8005df2:	e75f      	b.n	8005cb4 <_dtoa_r+0x3c8>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	930e      	str	r3, [sp, #56]	; 0x38
 8005df8:	9b07      	ldr	r3, [sp, #28]
 8005dfa:	e783      	b.n	8005d04 <_dtoa_r+0x418>
 8005dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dfe:	4b84      	ldr	r3, [pc, #528]	; (8006010 <_dtoa_r+0x724>)
 8005e00:	3a01      	subs	r2, #1
 8005e02:	00d2      	lsls	r2, r2, #3
 8005e04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e06:	189b      	adds	r3, r3, r2
 8005e08:	9c08      	ldr	r4, [sp, #32]
 8005e0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2900      	cmp	r1, #0
 8005e12:	d051      	beq.n	8005eb8 <_dtoa_r+0x5cc>
 8005e14:	2000      	movs	r0, #0
 8005e16:	4986      	ldr	r1, [pc, #536]	; (8006030 <_dtoa_r+0x744>)
 8005e18:	f7fa fea6 	bl	8000b68 <__aeabi_ddiv>
 8005e1c:	0022      	movs	r2, r4
 8005e1e:	002b      	movs	r3, r5
 8005e20:	f7fb fd5e 	bl	80018e0 <__aeabi_dsub>
 8005e24:	9a06      	ldr	r2, [sp, #24]
 8005e26:	0004      	movs	r4, r0
 8005e28:	4694      	mov	ip, r2
 8005e2a:	000d      	movs	r5, r1
 8005e2c:	9b06      	ldr	r3, [sp, #24]
 8005e2e:	9314      	str	r3, [sp, #80]	; 0x50
 8005e30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e32:	4463      	add	r3, ip
 8005e34:	9318      	str	r3, [sp, #96]	; 0x60
 8005e36:	0039      	movs	r1, r7
 8005e38:	0030      	movs	r0, r6
 8005e3a:	f7fc f8f1 	bl	8002020 <__aeabi_d2iz>
 8005e3e:	9012      	str	r0, [sp, #72]	; 0x48
 8005e40:	f7fc f924 	bl	800208c <__aeabi_i2d>
 8005e44:	0002      	movs	r2, r0
 8005e46:	000b      	movs	r3, r1
 8005e48:	0030      	movs	r0, r6
 8005e4a:	0039      	movs	r1, r7
 8005e4c:	f7fb fd48 	bl	80018e0 <__aeabi_dsub>
 8005e50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e54:	3301      	adds	r3, #1
 8005e56:	9308      	str	r3, [sp, #32]
 8005e58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e5a:	0006      	movs	r6, r0
 8005e5c:	3330      	adds	r3, #48	; 0x30
 8005e5e:	7013      	strb	r3, [r2, #0]
 8005e60:	0022      	movs	r2, r4
 8005e62:	002b      	movs	r3, r5
 8005e64:	000f      	movs	r7, r1
 8005e66:	f7fa faf7 	bl	8000458 <__aeabi_dcmplt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d174      	bne.n	8005f58 <_dtoa_r+0x66c>
 8005e6e:	0032      	movs	r2, r6
 8005e70:	003b      	movs	r3, r7
 8005e72:	2000      	movs	r0, #0
 8005e74:	4968      	ldr	r1, [pc, #416]	; (8006018 <_dtoa_r+0x72c>)
 8005e76:	f7fb fd33 	bl	80018e0 <__aeabi_dsub>
 8005e7a:	0022      	movs	r2, r4
 8005e7c:	002b      	movs	r3, r5
 8005e7e:	f7fa faeb 	bl	8000458 <__aeabi_dcmplt>
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d000      	beq.n	8005e88 <_dtoa_r+0x59c>
 8005e86:	e0d7      	b.n	8006038 <_dtoa_r+0x74c>
 8005e88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005e8a:	9a08      	ldr	r2, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d100      	bne.n	8005e92 <_dtoa_r+0x5a6>
 8005e90:	e771      	b.n	8005d76 <_dtoa_r+0x48a>
 8005e92:	2200      	movs	r2, #0
 8005e94:	0020      	movs	r0, r4
 8005e96:	0029      	movs	r1, r5
 8005e98:	4b60      	ldr	r3, [pc, #384]	; (800601c <_dtoa_r+0x730>)
 8005e9a:	f7fb fa5f 	bl	800135c <__aeabi_dmul>
 8005e9e:	4b5f      	ldr	r3, [pc, #380]	; (800601c <_dtoa_r+0x730>)
 8005ea0:	0004      	movs	r4, r0
 8005ea2:	000d      	movs	r5, r1
 8005ea4:	0030      	movs	r0, r6
 8005ea6:	0039      	movs	r1, r7
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f7fb fa57 	bl	800135c <__aeabi_dmul>
 8005eae:	9b08      	ldr	r3, [sp, #32]
 8005eb0:	0006      	movs	r6, r0
 8005eb2:	000f      	movs	r7, r1
 8005eb4:	9314      	str	r3, [sp, #80]	; 0x50
 8005eb6:	e7be      	b.n	8005e36 <_dtoa_r+0x54a>
 8005eb8:	0020      	movs	r0, r4
 8005eba:	0029      	movs	r1, r5
 8005ebc:	f7fb fa4e 	bl	800135c <__aeabi_dmul>
 8005ec0:	9a06      	ldr	r2, [sp, #24]
 8005ec2:	9b06      	ldr	r3, [sp, #24]
 8005ec4:	4694      	mov	ip, r2
 8005ec6:	9308      	str	r3, [sp, #32]
 8005ec8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eca:	9014      	str	r0, [sp, #80]	; 0x50
 8005ecc:	9115      	str	r1, [sp, #84]	; 0x54
 8005ece:	4463      	add	r3, ip
 8005ed0:	9319      	str	r3, [sp, #100]	; 0x64
 8005ed2:	0030      	movs	r0, r6
 8005ed4:	0039      	movs	r1, r7
 8005ed6:	f7fc f8a3 	bl	8002020 <__aeabi_d2iz>
 8005eda:	9018      	str	r0, [sp, #96]	; 0x60
 8005edc:	f7fc f8d6 	bl	800208c <__aeabi_i2d>
 8005ee0:	0002      	movs	r2, r0
 8005ee2:	000b      	movs	r3, r1
 8005ee4:	0030      	movs	r0, r6
 8005ee6:	0039      	movs	r1, r7
 8005ee8:	f7fb fcfa 	bl	80018e0 <__aeabi_dsub>
 8005eec:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8005eee:	9b08      	ldr	r3, [sp, #32]
 8005ef0:	3630      	adds	r6, #48	; 0x30
 8005ef2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ef4:	701e      	strb	r6, [r3, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	0004      	movs	r4, r0
 8005efa:	000d      	movs	r5, r1
 8005efc:	9308      	str	r3, [sp, #32]
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d12d      	bne.n	8005f5e <_dtoa_r+0x672>
 8005f02:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005f04:	9915      	ldr	r1, [sp, #84]	; 0x54
 8005f06:	9a06      	ldr	r2, [sp, #24]
 8005f08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f0a:	4694      	mov	ip, r2
 8005f0c:	4463      	add	r3, ip
 8005f0e:	2200      	movs	r2, #0
 8005f10:	9308      	str	r3, [sp, #32]
 8005f12:	4b47      	ldr	r3, [pc, #284]	; (8006030 <_dtoa_r+0x744>)
 8005f14:	f7fa fac8 	bl	80004a8 <__aeabi_dadd>
 8005f18:	0002      	movs	r2, r0
 8005f1a:	000b      	movs	r3, r1
 8005f1c:	0020      	movs	r0, r4
 8005f1e:	0029      	movs	r1, r5
 8005f20:	f7fa faae 	bl	8000480 <__aeabi_dcmpgt>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d000      	beq.n	8005f2a <_dtoa_r+0x63e>
 8005f28:	e086      	b.n	8006038 <_dtoa_r+0x74c>
 8005f2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f2e:	2000      	movs	r0, #0
 8005f30:	493f      	ldr	r1, [pc, #252]	; (8006030 <_dtoa_r+0x744>)
 8005f32:	f7fb fcd5 	bl	80018e0 <__aeabi_dsub>
 8005f36:	0002      	movs	r2, r0
 8005f38:	000b      	movs	r3, r1
 8005f3a:	0020      	movs	r0, r4
 8005f3c:	0029      	movs	r1, r5
 8005f3e:	f7fa fa8b 	bl	8000458 <__aeabi_dcmplt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	d100      	bne.n	8005f48 <_dtoa_r+0x65c>
 8005f46:	e716      	b.n	8005d76 <_dtoa_r+0x48a>
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	3a01      	subs	r2, #1
 8005f4e:	9208      	str	r2, [sp, #32]
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	2a30      	cmp	r2, #48	; 0x30
 8005f54:	d0f8      	beq.n	8005f48 <_dtoa_r+0x65c>
 8005f56:	9308      	str	r3, [sp, #32]
 8005f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5a:	9303      	str	r3, [sp, #12]
 8005f5c:	e046      	b.n	8005fec <_dtoa_r+0x700>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	4b2e      	ldr	r3, [pc, #184]	; (800601c <_dtoa_r+0x730>)
 8005f62:	f7fb f9fb 	bl	800135c <__aeabi_dmul>
 8005f66:	0006      	movs	r6, r0
 8005f68:	000f      	movs	r7, r1
 8005f6a:	e7b2      	b.n	8005ed2 <_dtoa_r+0x5e6>
 8005f6c:	9b06      	ldr	r3, [sp, #24]
 8005f6e:	9a06      	ldr	r2, [sp, #24]
 8005f70:	930a      	str	r3, [sp, #40]	; 0x28
 8005f72:	9b07      	ldr	r3, [sp, #28]
 8005f74:	9c08      	ldr	r4, [sp, #32]
 8005f76:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	189b      	adds	r3, r3, r2
 8005f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f7e:	0032      	movs	r2, r6
 8005f80:	003b      	movs	r3, r7
 8005f82:	0020      	movs	r0, r4
 8005f84:	0029      	movs	r1, r5
 8005f86:	f7fa fdef 	bl	8000b68 <__aeabi_ddiv>
 8005f8a:	f7fc f849 	bl	8002020 <__aeabi_d2iz>
 8005f8e:	9007      	str	r0, [sp, #28]
 8005f90:	f7fc f87c 	bl	800208c <__aeabi_i2d>
 8005f94:	0032      	movs	r2, r6
 8005f96:	003b      	movs	r3, r7
 8005f98:	f7fb f9e0 	bl	800135c <__aeabi_dmul>
 8005f9c:	0002      	movs	r2, r0
 8005f9e:	000b      	movs	r3, r1
 8005fa0:	0020      	movs	r0, r4
 8005fa2:	0029      	movs	r1, r5
 8005fa4:	f7fb fc9c 	bl	80018e0 <__aeabi_dsub>
 8005fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005faa:	001a      	movs	r2, r3
 8005fac:	3201      	adds	r2, #1
 8005fae:	920a      	str	r2, [sp, #40]	; 0x28
 8005fb0:	9208      	str	r2, [sp, #32]
 8005fb2:	9a07      	ldr	r2, [sp, #28]
 8005fb4:	3230      	adds	r2, #48	; 0x30
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d14f      	bne.n	800605e <_dtoa_r+0x772>
 8005fbe:	0002      	movs	r2, r0
 8005fc0:	000b      	movs	r3, r1
 8005fc2:	f7fa fa71 	bl	80004a8 <__aeabi_dadd>
 8005fc6:	0032      	movs	r2, r6
 8005fc8:	003b      	movs	r3, r7
 8005fca:	0004      	movs	r4, r0
 8005fcc:	000d      	movs	r5, r1
 8005fce:	f7fa fa57 	bl	8000480 <__aeabi_dcmpgt>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d12e      	bne.n	8006034 <_dtoa_r+0x748>
 8005fd6:	0032      	movs	r2, r6
 8005fd8:	003b      	movs	r3, r7
 8005fda:	0020      	movs	r0, r4
 8005fdc:	0029      	movs	r1, r5
 8005fde:	f7fa fa35 	bl	800044c <__aeabi_dcmpeq>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d002      	beq.n	8005fec <_dtoa_r+0x700>
 8005fe6:	9b07      	ldr	r3, [sp, #28]
 8005fe8:	07de      	lsls	r6, r3, #31
 8005fea:	d423      	bmi.n	8006034 <_dtoa_r+0x748>
 8005fec:	9905      	ldr	r1, [sp, #20]
 8005fee:	9804      	ldr	r0, [sp, #16]
 8005ff0:	f000 fbd6 	bl	80067a0 <_Bfree>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9a08      	ldr	r2, [sp, #32]
 8005ff8:	7013      	strb	r3, [r2, #0]
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005ffe:	3301      	adds	r3, #1
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006004:	2b00      	cmp	r3, #0
 8006006:	d100      	bne.n	800600a <_dtoa_r+0x71e>
 8006008:	e4ba      	b.n	8005980 <_dtoa_r+0x94>
 800600a:	9a08      	ldr	r2, [sp, #32]
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e4b7      	b.n	8005980 <_dtoa_r+0x94>
 8006010:	08007848 	.word	0x08007848
 8006014:	08007820 	.word	0x08007820
 8006018:	3ff00000 	.word	0x3ff00000
 800601c:	40240000 	.word	0x40240000
 8006020:	401c0000 	.word	0x401c0000
 8006024:	fcc00000 	.word	0xfcc00000
 8006028:	40140000 	.word	0x40140000
 800602c:	7cc00000 	.word	0x7cc00000
 8006030:	3fe00000 	.word	0x3fe00000
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	930e      	str	r3, [sp, #56]	; 0x38
 8006038:	9b08      	ldr	r3, [sp, #32]
 800603a:	9308      	str	r3, [sp, #32]
 800603c:	3b01      	subs	r3, #1
 800603e:	781a      	ldrb	r2, [r3, #0]
 8006040:	2a39      	cmp	r2, #57	; 0x39
 8006042:	d108      	bne.n	8006056 <_dtoa_r+0x76a>
 8006044:	9a06      	ldr	r2, [sp, #24]
 8006046:	429a      	cmp	r2, r3
 8006048:	d1f7      	bne.n	800603a <_dtoa_r+0x74e>
 800604a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800604c:	9906      	ldr	r1, [sp, #24]
 800604e:	3201      	adds	r2, #1
 8006050:	920e      	str	r2, [sp, #56]	; 0x38
 8006052:	2230      	movs	r2, #48	; 0x30
 8006054:	700a      	strb	r2, [r1, #0]
 8006056:	781a      	ldrb	r2, [r3, #0]
 8006058:	3201      	adds	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	e77c      	b.n	8005f58 <_dtoa_r+0x66c>
 800605e:	2200      	movs	r2, #0
 8006060:	4ba9      	ldr	r3, [pc, #676]	; (8006308 <_dtoa_r+0xa1c>)
 8006062:	f7fb f97b 	bl	800135c <__aeabi_dmul>
 8006066:	2200      	movs	r2, #0
 8006068:	2300      	movs	r3, #0
 800606a:	0004      	movs	r4, r0
 800606c:	000d      	movs	r5, r1
 800606e:	f7fa f9ed 	bl	800044c <__aeabi_dcmpeq>
 8006072:	2800      	cmp	r0, #0
 8006074:	d100      	bne.n	8006078 <_dtoa_r+0x78c>
 8006076:	e782      	b.n	8005f7e <_dtoa_r+0x692>
 8006078:	e7b8      	b.n	8005fec <_dtoa_r+0x700>
 800607a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800607c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800607e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006080:	2f00      	cmp	r7, #0
 8006082:	d012      	beq.n	80060aa <_dtoa_r+0x7be>
 8006084:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006086:	2a01      	cmp	r2, #1
 8006088:	dc6e      	bgt.n	8006168 <_dtoa_r+0x87c>
 800608a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800608c:	2a00      	cmp	r2, #0
 800608e:	d065      	beq.n	800615c <_dtoa_r+0x870>
 8006090:	4a9e      	ldr	r2, [pc, #632]	; (800630c <_dtoa_r+0xa20>)
 8006092:	189b      	adds	r3, r3, r2
 8006094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006096:	2101      	movs	r1, #1
 8006098:	18d2      	adds	r2, r2, r3
 800609a:	920a      	str	r2, [sp, #40]	; 0x28
 800609c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800609e:	9804      	ldr	r0, [sp, #16]
 80060a0:	18d3      	adds	r3, r2, r3
 80060a2:	930c      	str	r3, [sp, #48]	; 0x30
 80060a4:	f000 fc2c 	bl	8006900 <__i2b>
 80060a8:	0007      	movs	r7, r0
 80060aa:	2c00      	cmp	r4, #0
 80060ac:	d00e      	beq.n	80060cc <_dtoa_r+0x7e0>
 80060ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	dd0b      	ble.n	80060cc <_dtoa_r+0x7e0>
 80060b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060b6:	0023      	movs	r3, r4
 80060b8:	4294      	cmp	r4, r2
 80060ba:	dd00      	ble.n	80060be <_dtoa_r+0x7d2>
 80060bc:	0013      	movs	r3, r2
 80060be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060c0:	1ae4      	subs	r4, r4, r3
 80060c2:	1ad2      	subs	r2, r2, r3
 80060c4:	920a      	str	r2, [sp, #40]	; 0x28
 80060c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	930c      	str	r3, [sp, #48]	; 0x30
 80060cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01e      	beq.n	8006110 <_dtoa_r+0x824>
 80060d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d05c      	beq.n	8006192 <_dtoa_r+0x8a6>
 80060d8:	2d00      	cmp	r5, #0
 80060da:	dd10      	ble.n	80060fe <_dtoa_r+0x812>
 80060dc:	0039      	movs	r1, r7
 80060de:	002a      	movs	r2, r5
 80060e0:	9804      	ldr	r0, [sp, #16]
 80060e2:	f000 fcd5 	bl	8006a90 <__pow5mult>
 80060e6:	9a05      	ldr	r2, [sp, #20]
 80060e8:	0001      	movs	r1, r0
 80060ea:	0007      	movs	r7, r0
 80060ec:	9804      	ldr	r0, [sp, #16]
 80060ee:	f000 fc1f 	bl	8006930 <__multiply>
 80060f2:	0006      	movs	r6, r0
 80060f4:	9905      	ldr	r1, [sp, #20]
 80060f6:	9804      	ldr	r0, [sp, #16]
 80060f8:	f000 fb52 	bl	80067a0 <_Bfree>
 80060fc:	9605      	str	r6, [sp, #20]
 80060fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006100:	1b5a      	subs	r2, r3, r5
 8006102:	42ab      	cmp	r3, r5
 8006104:	d004      	beq.n	8006110 <_dtoa_r+0x824>
 8006106:	9905      	ldr	r1, [sp, #20]
 8006108:	9804      	ldr	r0, [sp, #16]
 800610a:	f000 fcc1 	bl	8006a90 <__pow5mult>
 800610e:	9005      	str	r0, [sp, #20]
 8006110:	2101      	movs	r1, #1
 8006112:	9804      	ldr	r0, [sp, #16]
 8006114:	f000 fbf4 	bl	8006900 <__i2b>
 8006118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800611a:	0006      	movs	r6, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	dd3a      	ble.n	8006196 <_dtoa_r+0x8aa>
 8006120:	001a      	movs	r2, r3
 8006122:	0001      	movs	r1, r0
 8006124:	9804      	ldr	r0, [sp, #16]
 8006126:	f000 fcb3 	bl	8006a90 <__pow5mult>
 800612a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800612c:	0006      	movs	r6, r0
 800612e:	2500      	movs	r5, #0
 8006130:	2b01      	cmp	r3, #1
 8006132:	dc38      	bgt.n	80061a6 <_dtoa_r+0x8ba>
 8006134:	2500      	movs	r5, #0
 8006136:	9b08      	ldr	r3, [sp, #32]
 8006138:	42ab      	cmp	r3, r5
 800613a:	d130      	bne.n	800619e <_dtoa_r+0x8b2>
 800613c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800613e:	031b      	lsls	r3, r3, #12
 8006140:	42ab      	cmp	r3, r5
 8006142:	d12c      	bne.n	800619e <_dtoa_r+0x8b2>
 8006144:	4b72      	ldr	r3, [pc, #456]	; (8006310 <_dtoa_r+0xa24>)
 8006146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006148:	4213      	tst	r3, r2
 800614a:	d028      	beq.n	800619e <_dtoa_r+0x8b2>
 800614c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614e:	3501      	adds	r5, #1
 8006150:	3301      	adds	r3, #1
 8006152:	930a      	str	r3, [sp, #40]	; 0x28
 8006154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006156:	3301      	adds	r3, #1
 8006158:	930c      	str	r3, [sp, #48]	; 0x30
 800615a:	e020      	b.n	800619e <_dtoa_r+0x8b2>
 800615c:	2336      	movs	r3, #54	; 0x36
 800615e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006160:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006162:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	e795      	b.n	8006094 <_dtoa_r+0x7a8>
 8006168:	9b07      	ldr	r3, [sp, #28]
 800616a:	1e5d      	subs	r5, r3, #1
 800616c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800616e:	42ab      	cmp	r3, r5
 8006170:	db07      	blt.n	8006182 <_dtoa_r+0x896>
 8006172:	1b5d      	subs	r5, r3, r5
 8006174:	9b07      	ldr	r3, [sp, #28]
 8006176:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006178:	2b00      	cmp	r3, #0
 800617a:	da8b      	bge.n	8006094 <_dtoa_r+0x7a8>
 800617c:	1ae4      	subs	r4, r4, r3
 800617e:	2300      	movs	r3, #0
 8006180:	e788      	b.n	8006094 <_dtoa_r+0x7a8>
 8006182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006184:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006186:	1aeb      	subs	r3, r5, r3
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	950d      	str	r5, [sp, #52]	; 0x34
 800618c:	9313      	str	r3, [sp, #76]	; 0x4c
 800618e:	2500      	movs	r5, #0
 8006190:	e7f0      	b.n	8006174 <_dtoa_r+0x888>
 8006192:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006194:	e7b7      	b.n	8006106 <_dtoa_r+0x81a>
 8006196:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006198:	2500      	movs	r5, #0
 800619a:	2b01      	cmp	r3, #1
 800619c:	ddca      	ble.n	8006134 <_dtoa_r+0x848>
 800619e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80061a0:	2001      	movs	r0, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d008      	beq.n	80061b8 <_dtoa_r+0x8cc>
 80061a6:	6933      	ldr	r3, [r6, #16]
 80061a8:	3303      	adds	r3, #3
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	18f3      	adds	r3, r6, r3
 80061ae:	6858      	ldr	r0, [r3, #4]
 80061b0:	f000 fb5e 	bl	8006870 <__hi0bits>
 80061b4:	2320      	movs	r3, #32
 80061b6:	1a18      	subs	r0, r3, r0
 80061b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061ba:	1818      	adds	r0, r3, r0
 80061bc:	0002      	movs	r2, r0
 80061be:	231f      	movs	r3, #31
 80061c0:	401a      	ands	r2, r3
 80061c2:	4218      	tst	r0, r3
 80061c4:	d047      	beq.n	8006256 <_dtoa_r+0x96a>
 80061c6:	3301      	adds	r3, #1
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	dd3f      	ble.n	800624e <_dtoa_r+0x962>
 80061ce:	231c      	movs	r3, #28
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061d4:	18e4      	adds	r4, r4, r3
 80061d6:	18d2      	adds	r2, r2, r3
 80061d8:	920a      	str	r2, [sp, #40]	; 0x28
 80061da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061dc:	18d3      	adds	r3, r2, r3
 80061de:	930c      	str	r3, [sp, #48]	; 0x30
 80061e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd05      	ble.n	80061f2 <_dtoa_r+0x906>
 80061e6:	001a      	movs	r2, r3
 80061e8:	9905      	ldr	r1, [sp, #20]
 80061ea:	9804      	ldr	r0, [sp, #16]
 80061ec:	f000 fcac 	bl	8006b48 <__lshift>
 80061f0:	9005      	str	r0, [sp, #20]
 80061f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dd05      	ble.n	8006204 <_dtoa_r+0x918>
 80061f8:	0031      	movs	r1, r6
 80061fa:	001a      	movs	r2, r3
 80061fc:	9804      	ldr	r0, [sp, #16]
 80061fe:	f000 fca3 	bl	8006b48 <__lshift>
 8006202:	0006      	movs	r6, r0
 8006204:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006206:	2b00      	cmp	r3, #0
 8006208:	d027      	beq.n	800625a <_dtoa_r+0x96e>
 800620a:	0031      	movs	r1, r6
 800620c:	9805      	ldr	r0, [sp, #20]
 800620e:	f000 fd09 	bl	8006c24 <__mcmp>
 8006212:	2800      	cmp	r0, #0
 8006214:	da21      	bge.n	800625a <_dtoa_r+0x96e>
 8006216:	9b03      	ldr	r3, [sp, #12]
 8006218:	220a      	movs	r2, #10
 800621a:	3b01      	subs	r3, #1
 800621c:	9303      	str	r3, [sp, #12]
 800621e:	9905      	ldr	r1, [sp, #20]
 8006220:	2300      	movs	r3, #0
 8006222:	9804      	ldr	r0, [sp, #16]
 8006224:	f000 fae0 	bl	80067e8 <__multadd>
 8006228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800622a:	9005      	str	r0, [sp, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d100      	bne.n	8006232 <_dtoa_r+0x946>
 8006230:	e15d      	b.n	80064ee <_dtoa_r+0xc02>
 8006232:	2300      	movs	r3, #0
 8006234:	0039      	movs	r1, r7
 8006236:	220a      	movs	r2, #10
 8006238:	9804      	ldr	r0, [sp, #16]
 800623a:	f000 fad5 	bl	80067e8 <__multadd>
 800623e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006240:	0007      	movs	r7, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	dc49      	bgt.n	80062da <_dtoa_r+0x9ee>
 8006246:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006248:	2b02      	cmp	r3, #2
 800624a:	dc0e      	bgt.n	800626a <_dtoa_r+0x97e>
 800624c:	e045      	b.n	80062da <_dtoa_r+0x9ee>
 800624e:	2b04      	cmp	r3, #4
 8006250:	d0c6      	beq.n	80061e0 <_dtoa_r+0x8f4>
 8006252:	331c      	adds	r3, #28
 8006254:	e7bd      	b.n	80061d2 <_dtoa_r+0x8e6>
 8006256:	0013      	movs	r3, r2
 8006258:	e7fb      	b.n	8006252 <_dtoa_r+0x966>
 800625a:	9b07      	ldr	r3, [sp, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	dc36      	bgt.n	80062ce <_dtoa_r+0x9e2>
 8006260:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006262:	2b02      	cmp	r3, #2
 8006264:	dd33      	ble.n	80062ce <_dtoa_r+0x9e2>
 8006266:	9b07      	ldr	r3, [sp, #28]
 8006268:	930b      	str	r3, [sp, #44]	; 0x2c
 800626a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <_dtoa_r+0x99e>
 8006270:	0031      	movs	r1, r6
 8006272:	2205      	movs	r2, #5
 8006274:	9804      	ldr	r0, [sp, #16]
 8006276:	f000 fab7 	bl	80067e8 <__multadd>
 800627a:	0006      	movs	r6, r0
 800627c:	0001      	movs	r1, r0
 800627e:	9805      	ldr	r0, [sp, #20]
 8006280:	f000 fcd0 	bl	8006c24 <__mcmp>
 8006284:	2800      	cmp	r0, #0
 8006286:	dd00      	ble.n	800628a <_dtoa_r+0x99e>
 8006288:	e59f      	b.n	8005dca <_dtoa_r+0x4de>
 800628a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800628c:	43db      	mvns	r3, r3
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	9b06      	ldr	r3, [sp, #24]
 8006292:	9308      	str	r3, [sp, #32]
 8006294:	2500      	movs	r5, #0
 8006296:	0031      	movs	r1, r6
 8006298:	9804      	ldr	r0, [sp, #16]
 800629a:	f000 fa81 	bl	80067a0 <_Bfree>
 800629e:	2f00      	cmp	r7, #0
 80062a0:	d100      	bne.n	80062a4 <_dtoa_r+0x9b8>
 80062a2:	e6a3      	b.n	8005fec <_dtoa_r+0x700>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	d005      	beq.n	80062b4 <_dtoa_r+0x9c8>
 80062a8:	42bd      	cmp	r5, r7
 80062aa:	d003      	beq.n	80062b4 <_dtoa_r+0x9c8>
 80062ac:	0029      	movs	r1, r5
 80062ae:	9804      	ldr	r0, [sp, #16]
 80062b0:	f000 fa76 	bl	80067a0 <_Bfree>
 80062b4:	0039      	movs	r1, r7
 80062b6:	9804      	ldr	r0, [sp, #16]
 80062b8:	f000 fa72 	bl	80067a0 <_Bfree>
 80062bc:	e696      	b.n	8005fec <_dtoa_r+0x700>
 80062be:	2600      	movs	r6, #0
 80062c0:	0037      	movs	r7, r6
 80062c2:	e7e2      	b.n	800628a <_dtoa_r+0x99e>
 80062c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062c6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80062c8:	9303      	str	r3, [sp, #12]
 80062ca:	0037      	movs	r7, r6
 80062cc:	e57d      	b.n	8005dca <_dtoa_r+0x4de>
 80062ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d100      	bne.n	80062d6 <_dtoa_r+0x9ea>
 80062d4:	e0c3      	b.n	800645e <_dtoa_r+0xb72>
 80062d6:	9b07      	ldr	r3, [sp, #28]
 80062d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80062da:	2c00      	cmp	r4, #0
 80062dc:	dd05      	ble.n	80062ea <_dtoa_r+0x9fe>
 80062de:	0039      	movs	r1, r7
 80062e0:	0022      	movs	r2, r4
 80062e2:	9804      	ldr	r0, [sp, #16]
 80062e4:	f000 fc30 	bl	8006b48 <__lshift>
 80062e8:	0007      	movs	r7, r0
 80062ea:	0038      	movs	r0, r7
 80062ec:	2d00      	cmp	r5, #0
 80062ee:	d024      	beq.n	800633a <_dtoa_r+0xa4e>
 80062f0:	6879      	ldr	r1, [r7, #4]
 80062f2:	9804      	ldr	r0, [sp, #16]
 80062f4:	f000 fa10 	bl	8006718 <_Balloc>
 80062f8:	1e04      	subs	r4, r0, #0
 80062fa:	d111      	bne.n	8006320 <_dtoa_r+0xa34>
 80062fc:	0022      	movs	r2, r4
 80062fe:	4b05      	ldr	r3, [pc, #20]	; (8006314 <_dtoa_r+0xa28>)
 8006300:	4805      	ldr	r0, [pc, #20]	; (8006318 <_dtoa_r+0xa2c>)
 8006302:	4906      	ldr	r1, [pc, #24]	; (800631c <_dtoa_r+0xa30>)
 8006304:	f7ff fb07 	bl	8005916 <_dtoa_r+0x2a>
 8006308:	40240000 	.word	0x40240000
 800630c:	00000433 	.word	0x00000433
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	080077b4 	.word	0x080077b4
 8006318:	0800775c 	.word	0x0800775c
 800631c:	000002ef 	.word	0x000002ef
 8006320:	0039      	movs	r1, r7
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	310c      	adds	r1, #12
 8006326:	3202      	adds	r2, #2
 8006328:	0092      	lsls	r2, r2, #2
 800632a:	300c      	adds	r0, #12
 800632c:	f001 f840 	bl	80073b0 <memcpy>
 8006330:	2201      	movs	r2, #1
 8006332:	0021      	movs	r1, r4
 8006334:	9804      	ldr	r0, [sp, #16]
 8006336:	f000 fc07 	bl	8006b48 <__lshift>
 800633a:	9b06      	ldr	r3, [sp, #24]
 800633c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800633e:	9307      	str	r3, [sp, #28]
 8006340:	3b01      	subs	r3, #1
 8006342:	189b      	adds	r3, r3, r2
 8006344:	2201      	movs	r2, #1
 8006346:	003d      	movs	r5, r7
 8006348:	0007      	movs	r7, r0
 800634a:	930e      	str	r3, [sp, #56]	; 0x38
 800634c:	9b08      	ldr	r3, [sp, #32]
 800634e:	4013      	ands	r3, r2
 8006350:	930d      	str	r3, [sp, #52]	; 0x34
 8006352:	0031      	movs	r1, r6
 8006354:	9805      	ldr	r0, [sp, #20]
 8006356:	f7ff fa39 	bl	80057cc <quorem>
 800635a:	0029      	movs	r1, r5
 800635c:	0004      	movs	r4, r0
 800635e:	900b      	str	r0, [sp, #44]	; 0x2c
 8006360:	9805      	ldr	r0, [sp, #20]
 8006362:	f000 fc5f 	bl	8006c24 <__mcmp>
 8006366:	003a      	movs	r2, r7
 8006368:	900c      	str	r0, [sp, #48]	; 0x30
 800636a:	0031      	movs	r1, r6
 800636c:	9804      	ldr	r0, [sp, #16]
 800636e:	f000 fc75 	bl	8006c5c <__mdiff>
 8006372:	2201      	movs	r2, #1
 8006374:	68c3      	ldr	r3, [r0, #12]
 8006376:	3430      	adds	r4, #48	; 0x30
 8006378:	9008      	str	r0, [sp, #32]
 800637a:	920a      	str	r2, [sp, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <_dtoa_r+0xa9e>
 8006380:	0001      	movs	r1, r0
 8006382:	9805      	ldr	r0, [sp, #20]
 8006384:	f000 fc4e 	bl	8006c24 <__mcmp>
 8006388:	900a      	str	r0, [sp, #40]	; 0x28
 800638a:	9908      	ldr	r1, [sp, #32]
 800638c:	9804      	ldr	r0, [sp, #16]
 800638e:	f000 fa07 	bl	80067a0 <_Bfree>
 8006392:	9b07      	ldr	r3, [sp, #28]
 8006394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006396:	3301      	adds	r3, #1
 8006398:	9308      	str	r3, [sp, #32]
 800639a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800639c:	4313      	orrs	r3, r2
 800639e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063a0:	4313      	orrs	r3, r2
 80063a2:	d109      	bne.n	80063b8 <_dtoa_r+0xacc>
 80063a4:	2c39      	cmp	r4, #57	; 0x39
 80063a6:	d022      	beq.n	80063ee <_dtoa_r+0xb02>
 80063a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	dd01      	ble.n	80063b2 <_dtoa_r+0xac6>
 80063ae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80063b0:	3431      	adds	r4, #49	; 0x31
 80063b2:	9b07      	ldr	r3, [sp, #28]
 80063b4:	701c      	strb	r4, [r3, #0]
 80063b6:	e76e      	b.n	8006296 <_dtoa_r+0x9aa>
 80063b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	db04      	blt.n	80063c8 <_dtoa_r+0xadc>
 80063be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063c0:	4313      	orrs	r3, r2
 80063c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063c4:	4313      	orrs	r3, r2
 80063c6:	d11e      	bne.n	8006406 <_dtoa_r+0xb1a>
 80063c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	ddf1      	ble.n	80063b2 <_dtoa_r+0xac6>
 80063ce:	9905      	ldr	r1, [sp, #20]
 80063d0:	2201      	movs	r2, #1
 80063d2:	9804      	ldr	r0, [sp, #16]
 80063d4:	f000 fbb8 	bl	8006b48 <__lshift>
 80063d8:	0031      	movs	r1, r6
 80063da:	9005      	str	r0, [sp, #20]
 80063dc:	f000 fc22 	bl	8006c24 <__mcmp>
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc02      	bgt.n	80063ea <_dtoa_r+0xafe>
 80063e4:	d1e5      	bne.n	80063b2 <_dtoa_r+0xac6>
 80063e6:	07e3      	lsls	r3, r4, #31
 80063e8:	d5e3      	bpl.n	80063b2 <_dtoa_r+0xac6>
 80063ea:	2c39      	cmp	r4, #57	; 0x39
 80063ec:	d1df      	bne.n	80063ae <_dtoa_r+0xac2>
 80063ee:	2339      	movs	r3, #57	; 0x39
 80063f0:	9a07      	ldr	r2, [sp, #28]
 80063f2:	7013      	strb	r3, [r2, #0]
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	9308      	str	r3, [sp, #32]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	2a39      	cmp	r2, #57	; 0x39
 80063fe:	d063      	beq.n	80064c8 <_dtoa_r+0xbdc>
 8006400:	3201      	adds	r2, #1
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	e747      	b.n	8006296 <_dtoa_r+0x9aa>
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	dd03      	ble.n	8006414 <_dtoa_r+0xb28>
 800640c:	2c39      	cmp	r4, #57	; 0x39
 800640e:	d0ee      	beq.n	80063ee <_dtoa_r+0xb02>
 8006410:	3401      	adds	r4, #1
 8006412:	e7ce      	b.n	80063b2 <_dtoa_r+0xac6>
 8006414:	9b07      	ldr	r3, [sp, #28]
 8006416:	9a07      	ldr	r2, [sp, #28]
 8006418:	701c      	strb	r4, [r3, #0]
 800641a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800641c:	4293      	cmp	r3, r2
 800641e:	d03e      	beq.n	800649e <_dtoa_r+0xbb2>
 8006420:	2300      	movs	r3, #0
 8006422:	220a      	movs	r2, #10
 8006424:	9905      	ldr	r1, [sp, #20]
 8006426:	9804      	ldr	r0, [sp, #16]
 8006428:	f000 f9de 	bl	80067e8 <__multadd>
 800642c:	2300      	movs	r3, #0
 800642e:	9005      	str	r0, [sp, #20]
 8006430:	220a      	movs	r2, #10
 8006432:	0029      	movs	r1, r5
 8006434:	9804      	ldr	r0, [sp, #16]
 8006436:	42bd      	cmp	r5, r7
 8006438:	d106      	bne.n	8006448 <_dtoa_r+0xb5c>
 800643a:	f000 f9d5 	bl	80067e8 <__multadd>
 800643e:	0005      	movs	r5, r0
 8006440:	0007      	movs	r7, r0
 8006442:	9b08      	ldr	r3, [sp, #32]
 8006444:	9307      	str	r3, [sp, #28]
 8006446:	e784      	b.n	8006352 <_dtoa_r+0xa66>
 8006448:	f000 f9ce 	bl	80067e8 <__multadd>
 800644c:	0039      	movs	r1, r7
 800644e:	0005      	movs	r5, r0
 8006450:	2300      	movs	r3, #0
 8006452:	220a      	movs	r2, #10
 8006454:	9804      	ldr	r0, [sp, #16]
 8006456:	f000 f9c7 	bl	80067e8 <__multadd>
 800645a:	0007      	movs	r7, r0
 800645c:	e7f1      	b.n	8006442 <_dtoa_r+0xb56>
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	930b      	str	r3, [sp, #44]	; 0x2c
 8006462:	2500      	movs	r5, #0
 8006464:	0031      	movs	r1, r6
 8006466:	9805      	ldr	r0, [sp, #20]
 8006468:	f7ff f9b0 	bl	80057cc <quorem>
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	3030      	adds	r0, #48	; 0x30
 8006470:	5558      	strb	r0, [r3, r5]
 8006472:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006474:	3501      	adds	r5, #1
 8006476:	0004      	movs	r4, r0
 8006478:	42ab      	cmp	r3, r5
 800647a:	dd07      	ble.n	800648c <_dtoa_r+0xba0>
 800647c:	2300      	movs	r3, #0
 800647e:	220a      	movs	r2, #10
 8006480:	9905      	ldr	r1, [sp, #20]
 8006482:	9804      	ldr	r0, [sp, #16]
 8006484:	f000 f9b0 	bl	80067e8 <__multadd>
 8006488:	9005      	str	r0, [sp, #20]
 800648a:	e7eb      	b.n	8006464 <_dtoa_r+0xb78>
 800648c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800648e:	2301      	movs	r3, #1
 8006490:	2a00      	cmp	r2, #0
 8006492:	dd00      	ble.n	8006496 <_dtoa_r+0xbaa>
 8006494:	0013      	movs	r3, r2
 8006496:	2500      	movs	r5, #0
 8006498:	9a06      	ldr	r2, [sp, #24]
 800649a:	18d3      	adds	r3, r2, r3
 800649c:	9308      	str	r3, [sp, #32]
 800649e:	9905      	ldr	r1, [sp, #20]
 80064a0:	2201      	movs	r2, #1
 80064a2:	9804      	ldr	r0, [sp, #16]
 80064a4:	f000 fb50 	bl	8006b48 <__lshift>
 80064a8:	0031      	movs	r1, r6
 80064aa:	9005      	str	r0, [sp, #20]
 80064ac:	f000 fbba 	bl	8006c24 <__mcmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	dc9f      	bgt.n	80063f4 <_dtoa_r+0xb08>
 80064b4:	d101      	bne.n	80064ba <_dtoa_r+0xbce>
 80064b6:	07e4      	lsls	r4, r4, #31
 80064b8:	d49c      	bmi.n	80063f4 <_dtoa_r+0xb08>
 80064ba:	9b08      	ldr	r3, [sp, #32]
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	3b01      	subs	r3, #1
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	2a30      	cmp	r2, #48	; 0x30
 80064c4:	d0fa      	beq.n	80064bc <_dtoa_r+0xbd0>
 80064c6:	e6e6      	b.n	8006296 <_dtoa_r+0x9aa>
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d193      	bne.n	80063f6 <_dtoa_r+0xb0a>
 80064ce:	9b03      	ldr	r3, [sp, #12]
 80064d0:	3301      	adds	r3, #1
 80064d2:	9303      	str	r3, [sp, #12]
 80064d4:	2331      	movs	r3, #49	; 0x31
 80064d6:	7013      	strb	r3, [r2, #0]
 80064d8:	e6dd      	b.n	8006296 <_dtoa_r+0x9aa>
 80064da:	4b09      	ldr	r3, [pc, #36]	; (8006500 <_dtoa_r+0xc14>)
 80064dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80064de:	9306      	str	r3, [sp, #24]
 80064e0:	4b08      	ldr	r3, [pc, #32]	; (8006504 <_dtoa_r+0xc18>)
 80064e2:	2a00      	cmp	r2, #0
 80064e4:	d001      	beq.n	80064ea <_dtoa_r+0xbfe>
 80064e6:	f7ff fa49 	bl	800597c <_dtoa_r+0x90>
 80064ea:	f7ff fa49 	bl	8005980 <_dtoa_r+0x94>
 80064ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	dcb6      	bgt.n	8006462 <_dtoa_r+0xb76>
 80064f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	dd00      	ble.n	80064fc <_dtoa_r+0xc10>
 80064fa:	e6b6      	b.n	800626a <_dtoa_r+0x97e>
 80064fc:	e7b1      	b.n	8006462 <_dtoa_r+0xb76>
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	08007738 	.word	0x08007738
 8006504:	08007740 	.word	0x08007740

08006508 <_free_r>:
 8006508:	b570      	push	{r4, r5, r6, lr}
 800650a:	0005      	movs	r5, r0
 800650c:	2900      	cmp	r1, #0
 800650e:	d010      	beq.n	8006532 <_free_r+0x2a>
 8006510:	1f0c      	subs	r4, r1, #4
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	da00      	bge.n	800651a <_free_r+0x12>
 8006518:	18e4      	adds	r4, r4, r3
 800651a:	0028      	movs	r0, r5
 800651c:	f000 f8ec 	bl	80066f8 <__malloc_lock>
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <_free_r+0x90>)
 8006522:	6813      	ldr	r3, [r2, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d105      	bne.n	8006534 <_free_r+0x2c>
 8006528:	6063      	str	r3, [r4, #4]
 800652a:	6014      	str	r4, [r2, #0]
 800652c:	0028      	movs	r0, r5
 800652e:	f000 f8eb 	bl	8006708 <__malloc_unlock>
 8006532:	bd70      	pop	{r4, r5, r6, pc}
 8006534:	42a3      	cmp	r3, r4
 8006536:	d908      	bls.n	800654a <_free_r+0x42>
 8006538:	6820      	ldr	r0, [r4, #0]
 800653a:	1821      	adds	r1, r4, r0
 800653c:	428b      	cmp	r3, r1
 800653e:	d1f3      	bne.n	8006528 <_free_r+0x20>
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	1809      	adds	r1, r1, r0
 8006546:	6021      	str	r1, [r4, #0]
 8006548:	e7ee      	b.n	8006528 <_free_r+0x20>
 800654a:	001a      	movs	r2, r3
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <_free_r+0x4e>
 8006552:	42a3      	cmp	r3, r4
 8006554:	d9f9      	bls.n	800654a <_free_r+0x42>
 8006556:	6811      	ldr	r1, [r2, #0]
 8006558:	1850      	adds	r0, r2, r1
 800655a:	42a0      	cmp	r0, r4
 800655c:	d10b      	bne.n	8006576 <_free_r+0x6e>
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	1809      	adds	r1, r1, r0
 8006562:	1850      	adds	r0, r2, r1
 8006564:	6011      	str	r1, [r2, #0]
 8006566:	4283      	cmp	r3, r0
 8006568:	d1e0      	bne.n	800652c <_free_r+0x24>
 800656a:	6818      	ldr	r0, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	1841      	adds	r1, r0, r1
 8006570:	6011      	str	r1, [r2, #0]
 8006572:	6053      	str	r3, [r2, #4]
 8006574:	e7da      	b.n	800652c <_free_r+0x24>
 8006576:	42a0      	cmp	r0, r4
 8006578:	d902      	bls.n	8006580 <_free_r+0x78>
 800657a:	230c      	movs	r3, #12
 800657c:	602b      	str	r3, [r5, #0]
 800657e:	e7d5      	b.n	800652c <_free_r+0x24>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	1821      	adds	r1, r4, r0
 8006584:	428b      	cmp	r3, r1
 8006586:	d103      	bne.n	8006590 <_free_r+0x88>
 8006588:	6819      	ldr	r1, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	1809      	adds	r1, r1, r0
 800658e:	6021      	str	r1, [r4, #0]
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	6054      	str	r4, [r2, #4]
 8006594:	e7ca      	b.n	800652c <_free_r+0x24>
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	20000404 	.word	0x20000404

0800659c <malloc>:
 800659c:	b510      	push	{r4, lr}
 800659e:	4b03      	ldr	r3, [pc, #12]	; (80065ac <malloc+0x10>)
 80065a0:	0001      	movs	r1, r0
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	f000 f826 	bl	80065f4 <_malloc_r>
 80065a8:	bd10      	pop	{r4, pc}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	20000074 	.word	0x20000074

080065b0 <sbrk_aligned>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4e0f      	ldr	r6, [pc, #60]	; (80065f0 <sbrk_aligned+0x40>)
 80065b4:	000d      	movs	r5, r1
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	0004      	movs	r4, r0
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d102      	bne.n	80065c4 <sbrk_aligned+0x14>
 80065be:	f000 fee5 	bl	800738c <_sbrk_r>
 80065c2:	6030      	str	r0, [r6, #0]
 80065c4:	0029      	movs	r1, r5
 80065c6:	0020      	movs	r0, r4
 80065c8:	f000 fee0 	bl	800738c <_sbrk_r>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d00a      	beq.n	80065e6 <sbrk_aligned+0x36>
 80065d0:	2303      	movs	r3, #3
 80065d2:	1cc5      	adds	r5, r0, #3
 80065d4:	439d      	bics	r5, r3
 80065d6:	42a8      	cmp	r0, r5
 80065d8:	d007      	beq.n	80065ea <sbrk_aligned+0x3a>
 80065da:	1a29      	subs	r1, r5, r0
 80065dc:	0020      	movs	r0, r4
 80065de:	f000 fed5 	bl	800738c <_sbrk_r>
 80065e2:	3001      	adds	r0, #1
 80065e4:	d101      	bne.n	80065ea <sbrk_aligned+0x3a>
 80065e6:	2501      	movs	r5, #1
 80065e8:	426d      	negs	r5, r5
 80065ea:	0028      	movs	r0, r5
 80065ec:	bd70      	pop	{r4, r5, r6, pc}
 80065ee:	46c0      	nop			; (mov r8, r8)
 80065f0:	20000408 	.word	0x20000408

080065f4 <_malloc_r>:
 80065f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f6:	2203      	movs	r2, #3
 80065f8:	1ccb      	adds	r3, r1, #3
 80065fa:	4393      	bics	r3, r2
 80065fc:	3308      	adds	r3, #8
 80065fe:	0006      	movs	r6, r0
 8006600:	001f      	movs	r7, r3
 8006602:	2b0c      	cmp	r3, #12
 8006604:	d238      	bcs.n	8006678 <_malloc_r+0x84>
 8006606:	270c      	movs	r7, #12
 8006608:	42b9      	cmp	r1, r7
 800660a:	d837      	bhi.n	800667c <_malloc_r+0x88>
 800660c:	0030      	movs	r0, r6
 800660e:	f000 f873 	bl	80066f8 <__malloc_lock>
 8006612:	4b38      	ldr	r3, [pc, #224]	; (80066f4 <_malloc_r+0x100>)
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	001c      	movs	r4, r3
 800661a:	2c00      	cmp	r4, #0
 800661c:	d133      	bne.n	8006686 <_malloc_r+0x92>
 800661e:	0039      	movs	r1, r7
 8006620:	0030      	movs	r0, r6
 8006622:	f7ff ffc5 	bl	80065b0 <sbrk_aligned>
 8006626:	0004      	movs	r4, r0
 8006628:	1c43      	adds	r3, r0, #1
 800662a:	d15e      	bne.n	80066ea <_malloc_r+0xf6>
 800662c:	9b00      	ldr	r3, [sp, #0]
 800662e:	681c      	ldr	r4, [r3, #0]
 8006630:	0025      	movs	r5, r4
 8006632:	2d00      	cmp	r5, #0
 8006634:	d14e      	bne.n	80066d4 <_malloc_r+0xe0>
 8006636:	2c00      	cmp	r4, #0
 8006638:	d051      	beq.n	80066de <_malloc_r+0xea>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	0029      	movs	r1, r5
 800663e:	18e3      	adds	r3, r4, r3
 8006640:	0030      	movs	r0, r6
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	f000 fea2 	bl	800738c <_sbrk_r>
 8006648:	9b01      	ldr	r3, [sp, #4]
 800664a:	4283      	cmp	r3, r0
 800664c:	d147      	bne.n	80066de <_malloc_r+0xea>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	0030      	movs	r0, r6
 8006652:	1aff      	subs	r7, r7, r3
 8006654:	0039      	movs	r1, r7
 8006656:	f7ff ffab 	bl	80065b0 <sbrk_aligned>
 800665a:	3001      	adds	r0, #1
 800665c:	d03f      	beq.n	80066de <_malloc_r+0xea>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	19db      	adds	r3, r3, r7
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	9b00      	ldr	r3, [sp, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d040      	beq.n	80066ee <_malloc_r+0xfa>
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	42a2      	cmp	r2, r4
 8006670:	d133      	bne.n	80066da <_malloc_r+0xe6>
 8006672:	2200      	movs	r2, #0
 8006674:	605a      	str	r2, [r3, #4]
 8006676:	e014      	b.n	80066a2 <_malloc_r+0xae>
 8006678:	2b00      	cmp	r3, #0
 800667a:	dac5      	bge.n	8006608 <_malloc_r+0x14>
 800667c:	230c      	movs	r3, #12
 800667e:	2500      	movs	r5, #0
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	0028      	movs	r0, r5
 8006684:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006686:	6821      	ldr	r1, [r4, #0]
 8006688:	1bc9      	subs	r1, r1, r7
 800668a:	d420      	bmi.n	80066ce <_malloc_r+0xda>
 800668c:	290b      	cmp	r1, #11
 800668e:	d918      	bls.n	80066c2 <_malloc_r+0xce>
 8006690:	19e2      	adds	r2, r4, r7
 8006692:	6027      	str	r7, [r4, #0]
 8006694:	42a3      	cmp	r3, r4
 8006696:	d112      	bne.n	80066be <_malloc_r+0xca>
 8006698:	9b00      	ldr	r3, [sp, #0]
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	6863      	ldr	r3, [r4, #4]
 800669e:	6011      	str	r1, [r2, #0]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	0030      	movs	r0, r6
 80066a4:	0025      	movs	r5, r4
 80066a6:	f000 f82f 	bl	8006708 <__malloc_unlock>
 80066aa:	2207      	movs	r2, #7
 80066ac:	350b      	adds	r5, #11
 80066ae:	1d23      	adds	r3, r4, #4
 80066b0:	4395      	bics	r5, r2
 80066b2:	1aea      	subs	r2, r5, r3
 80066b4:	429d      	cmp	r5, r3
 80066b6:	d0e4      	beq.n	8006682 <_malloc_r+0x8e>
 80066b8:	1b5b      	subs	r3, r3, r5
 80066ba:	50a3      	str	r3, [r4, r2]
 80066bc:	e7e1      	b.n	8006682 <_malloc_r+0x8e>
 80066be:	605a      	str	r2, [r3, #4]
 80066c0:	e7ec      	b.n	800669c <_malloc_r+0xa8>
 80066c2:	6862      	ldr	r2, [r4, #4]
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d1d5      	bne.n	8006674 <_malloc_r+0x80>
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e7e9      	b.n	80066a2 <_malloc_r+0xae>
 80066ce:	0023      	movs	r3, r4
 80066d0:	6864      	ldr	r4, [r4, #4]
 80066d2:	e7a2      	b.n	800661a <_malloc_r+0x26>
 80066d4:	002c      	movs	r4, r5
 80066d6:	686d      	ldr	r5, [r5, #4]
 80066d8:	e7ab      	b.n	8006632 <_malloc_r+0x3e>
 80066da:	0013      	movs	r3, r2
 80066dc:	e7c4      	b.n	8006668 <_malloc_r+0x74>
 80066de:	230c      	movs	r3, #12
 80066e0:	0030      	movs	r0, r6
 80066e2:	6033      	str	r3, [r6, #0]
 80066e4:	f000 f810 	bl	8006708 <__malloc_unlock>
 80066e8:	e7cb      	b.n	8006682 <_malloc_r+0x8e>
 80066ea:	6027      	str	r7, [r4, #0]
 80066ec:	e7d9      	b.n	80066a2 <_malloc_r+0xae>
 80066ee:	605b      	str	r3, [r3, #4]
 80066f0:	deff      	udf	#255	; 0xff
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	20000404 	.word	0x20000404

080066f8 <__malloc_lock>:
 80066f8:	b510      	push	{r4, lr}
 80066fa:	4802      	ldr	r0, [pc, #8]	; (8006704 <__malloc_lock+0xc>)
 80066fc:	f7ff f859 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8006700:	bd10      	pop	{r4, pc}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	20000400 	.word	0x20000400

08006708 <__malloc_unlock>:
 8006708:	b510      	push	{r4, lr}
 800670a:	4802      	ldr	r0, [pc, #8]	; (8006714 <__malloc_unlock+0xc>)
 800670c:	f7ff f852 	bl	80057b4 <__retarget_lock_release_recursive>
 8006710:	bd10      	pop	{r4, pc}
 8006712:	46c0      	nop			; (mov r8, r8)
 8006714:	20000400 	.word	0x20000400

08006718 <_Balloc>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	69c5      	ldr	r5, [r0, #28]
 800671c:	0006      	movs	r6, r0
 800671e:	000c      	movs	r4, r1
 8006720:	2d00      	cmp	r5, #0
 8006722:	d10e      	bne.n	8006742 <_Balloc+0x2a>
 8006724:	2010      	movs	r0, #16
 8006726:	f7ff ff39 	bl	800659c <malloc>
 800672a:	1e02      	subs	r2, r0, #0
 800672c:	61f0      	str	r0, [r6, #28]
 800672e:	d104      	bne.n	800673a <_Balloc+0x22>
 8006730:	216b      	movs	r1, #107	; 0x6b
 8006732:	4b19      	ldr	r3, [pc, #100]	; (8006798 <_Balloc+0x80>)
 8006734:	4819      	ldr	r0, [pc, #100]	; (800679c <_Balloc+0x84>)
 8006736:	f000 fe45 	bl	80073c4 <__assert_func>
 800673a:	6045      	str	r5, [r0, #4]
 800673c:	6085      	str	r5, [r0, #8]
 800673e:	6005      	str	r5, [r0, #0]
 8006740:	60c5      	str	r5, [r0, #12]
 8006742:	69f5      	ldr	r5, [r6, #28]
 8006744:	68eb      	ldr	r3, [r5, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d013      	beq.n	8006772 <_Balloc+0x5a>
 800674a:	69f3      	ldr	r3, [r6, #28]
 800674c:	00a2      	lsls	r2, r4, #2
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	189b      	adds	r3, r3, r2
 8006752:	6818      	ldr	r0, [r3, #0]
 8006754:	2800      	cmp	r0, #0
 8006756:	d118      	bne.n	800678a <_Balloc+0x72>
 8006758:	2101      	movs	r1, #1
 800675a:	000d      	movs	r5, r1
 800675c:	40a5      	lsls	r5, r4
 800675e:	1d6a      	adds	r2, r5, #5
 8006760:	0030      	movs	r0, r6
 8006762:	0092      	lsls	r2, r2, #2
 8006764:	f000 fe4c 	bl	8007400 <_calloc_r>
 8006768:	2800      	cmp	r0, #0
 800676a:	d00c      	beq.n	8006786 <_Balloc+0x6e>
 800676c:	6044      	str	r4, [r0, #4]
 800676e:	6085      	str	r5, [r0, #8]
 8006770:	e00d      	b.n	800678e <_Balloc+0x76>
 8006772:	2221      	movs	r2, #33	; 0x21
 8006774:	2104      	movs	r1, #4
 8006776:	0030      	movs	r0, r6
 8006778:	f000 fe42 	bl	8007400 <_calloc_r>
 800677c:	69f3      	ldr	r3, [r6, #28]
 800677e:	60e8      	str	r0, [r5, #12]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1e1      	bne.n	800674a <_Balloc+0x32>
 8006786:	2000      	movs	r0, #0
 8006788:	bd70      	pop	{r4, r5, r6, pc}
 800678a:	6802      	ldr	r2, [r0, #0]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	6103      	str	r3, [r0, #16]
 8006792:	60c3      	str	r3, [r0, #12]
 8006794:	e7f8      	b.n	8006788 <_Balloc+0x70>
 8006796:	46c0      	nop			; (mov r8, r8)
 8006798:	08007745 	.word	0x08007745
 800679c:	080077c5 	.word	0x080077c5

080067a0 <_Bfree>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	69c6      	ldr	r6, [r0, #28]
 80067a4:	0005      	movs	r5, r0
 80067a6:	000c      	movs	r4, r1
 80067a8:	2e00      	cmp	r6, #0
 80067aa:	d10e      	bne.n	80067ca <_Bfree+0x2a>
 80067ac:	2010      	movs	r0, #16
 80067ae:	f7ff fef5 	bl	800659c <malloc>
 80067b2:	1e02      	subs	r2, r0, #0
 80067b4:	61e8      	str	r0, [r5, #28]
 80067b6:	d104      	bne.n	80067c2 <_Bfree+0x22>
 80067b8:	218f      	movs	r1, #143	; 0x8f
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <_Bfree+0x40>)
 80067bc:	4809      	ldr	r0, [pc, #36]	; (80067e4 <_Bfree+0x44>)
 80067be:	f000 fe01 	bl	80073c4 <__assert_func>
 80067c2:	6046      	str	r6, [r0, #4]
 80067c4:	6086      	str	r6, [r0, #8]
 80067c6:	6006      	str	r6, [r0, #0]
 80067c8:	60c6      	str	r6, [r0, #12]
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d007      	beq.n	80067de <_Bfree+0x3e>
 80067ce:	69eb      	ldr	r3, [r5, #28]
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	0092      	lsls	r2, r2, #2
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	6022      	str	r2, [r4, #0]
 80067dc:	601c      	str	r4, [r3, #0]
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	08007745 	.word	0x08007745
 80067e4:	080077c5 	.word	0x080077c5

080067e8 <__multadd>:
 80067e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067ea:	000e      	movs	r6, r1
 80067ec:	9001      	str	r0, [sp, #4]
 80067ee:	000c      	movs	r4, r1
 80067f0:	001d      	movs	r5, r3
 80067f2:	2000      	movs	r0, #0
 80067f4:	690f      	ldr	r7, [r1, #16]
 80067f6:	3614      	adds	r6, #20
 80067f8:	6833      	ldr	r3, [r6, #0]
 80067fa:	3001      	adds	r0, #1
 80067fc:	b299      	uxth	r1, r3
 80067fe:	4351      	muls	r1, r2
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	4353      	muls	r3, r2
 8006804:	1949      	adds	r1, r1, r5
 8006806:	0c0d      	lsrs	r5, r1, #16
 8006808:	195b      	adds	r3, r3, r5
 800680a:	0c1d      	lsrs	r5, r3, #16
 800680c:	b289      	uxth	r1, r1
 800680e:	041b      	lsls	r3, r3, #16
 8006810:	185b      	adds	r3, r3, r1
 8006812:	c608      	stmia	r6!, {r3}
 8006814:	4287      	cmp	r7, r0
 8006816:	dcef      	bgt.n	80067f8 <__multadd+0x10>
 8006818:	2d00      	cmp	r5, #0
 800681a:	d022      	beq.n	8006862 <__multadd+0x7a>
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	42bb      	cmp	r3, r7
 8006820:	dc19      	bgt.n	8006856 <__multadd+0x6e>
 8006822:	6861      	ldr	r1, [r4, #4]
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	3101      	adds	r1, #1
 8006828:	f7ff ff76 	bl	8006718 <_Balloc>
 800682c:	1e06      	subs	r6, r0, #0
 800682e:	d105      	bne.n	800683c <__multadd+0x54>
 8006830:	0032      	movs	r2, r6
 8006832:	21ba      	movs	r1, #186	; 0xba
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <__multadd+0x80>)
 8006836:	480d      	ldr	r0, [pc, #52]	; (800686c <__multadd+0x84>)
 8006838:	f000 fdc4 	bl	80073c4 <__assert_func>
 800683c:	0021      	movs	r1, r4
 800683e:	6922      	ldr	r2, [r4, #16]
 8006840:	310c      	adds	r1, #12
 8006842:	3202      	adds	r2, #2
 8006844:	0092      	lsls	r2, r2, #2
 8006846:	300c      	adds	r0, #12
 8006848:	f000 fdb2 	bl	80073b0 <memcpy>
 800684c:	0021      	movs	r1, r4
 800684e:	9801      	ldr	r0, [sp, #4]
 8006850:	f7ff ffa6 	bl	80067a0 <_Bfree>
 8006854:	0034      	movs	r4, r6
 8006856:	1d3b      	adds	r3, r7, #4
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	18e3      	adds	r3, r4, r3
 800685c:	605d      	str	r5, [r3, #4]
 800685e:	1c7b      	adds	r3, r7, #1
 8006860:	6123      	str	r3, [r4, #16]
 8006862:	0020      	movs	r0, r4
 8006864:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006866:	46c0      	nop			; (mov r8, r8)
 8006868:	080077b4 	.word	0x080077b4
 800686c:	080077c5 	.word	0x080077c5

08006870 <__hi0bits>:
 8006870:	0003      	movs	r3, r0
 8006872:	0c02      	lsrs	r2, r0, #16
 8006874:	2000      	movs	r0, #0
 8006876:	4282      	cmp	r2, r0
 8006878:	d101      	bne.n	800687e <__hi0bits+0xe>
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	3010      	adds	r0, #16
 800687e:	0e1a      	lsrs	r2, r3, #24
 8006880:	d101      	bne.n	8006886 <__hi0bits+0x16>
 8006882:	3008      	adds	r0, #8
 8006884:	021b      	lsls	r3, r3, #8
 8006886:	0f1a      	lsrs	r2, r3, #28
 8006888:	d101      	bne.n	800688e <__hi0bits+0x1e>
 800688a:	3004      	adds	r0, #4
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	0f9a      	lsrs	r2, r3, #30
 8006890:	d101      	bne.n	8006896 <__hi0bits+0x26>
 8006892:	3002      	adds	r0, #2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	db03      	blt.n	80068a2 <__hi0bits+0x32>
 800689a:	3001      	adds	r0, #1
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	d400      	bmi.n	80068a2 <__hi0bits+0x32>
 80068a0:	2020      	movs	r0, #32
 80068a2:	4770      	bx	lr

080068a4 <__lo0bits>:
 80068a4:	6803      	ldr	r3, [r0, #0]
 80068a6:	0001      	movs	r1, r0
 80068a8:	2207      	movs	r2, #7
 80068aa:	0018      	movs	r0, r3
 80068ac:	4010      	ands	r0, r2
 80068ae:	4213      	tst	r3, r2
 80068b0:	d00d      	beq.n	80068ce <__lo0bits+0x2a>
 80068b2:	3a06      	subs	r2, #6
 80068b4:	2000      	movs	r0, #0
 80068b6:	4213      	tst	r3, r2
 80068b8:	d105      	bne.n	80068c6 <__lo0bits+0x22>
 80068ba:	3002      	adds	r0, #2
 80068bc:	4203      	tst	r3, r0
 80068be:	d003      	beq.n	80068c8 <__lo0bits+0x24>
 80068c0:	40d3      	lsrs	r3, r2
 80068c2:	0010      	movs	r0, r2
 80068c4:	600b      	str	r3, [r1, #0]
 80068c6:	4770      	bx	lr
 80068c8:	089b      	lsrs	r3, r3, #2
 80068ca:	600b      	str	r3, [r1, #0]
 80068cc:	e7fb      	b.n	80068c6 <__lo0bits+0x22>
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d101      	bne.n	80068d8 <__lo0bits+0x34>
 80068d4:	2010      	movs	r0, #16
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	2a00      	cmp	r2, #0
 80068dc:	d101      	bne.n	80068e2 <__lo0bits+0x3e>
 80068de:	3008      	adds	r0, #8
 80068e0:	0a1b      	lsrs	r3, r3, #8
 80068e2:	071a      	lsls	r2, r3, #28
 80068e4:	d101      	bne.n	80068ea <__lo0bits+0x46>
 80068e6:	3004      	adds	r0, #4
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	079a      	lsls	r2, r3, #30
 80068ec:	d101      	bne.n	80068f2 <__lo0bits+0x4e>
 80068ee:	3002      	adds	r0, #2
 80068f0:	089b      	lsrs	r3, r3, #2
 80068f2:	07da      	lsls	r2, r3, #31
 80068f4:	d4e9      	bmi.n	80068ca <__lo0bits+0x26>
 80068f6:	3001      	adds	r0, #1
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	d1e6      	bne.n	80068ca <__lo0bits+0x26>
 80068fc:	2020      	movs	r0, #32
 80068fe:	e7e2      	b.n	80068c6 <__lo0bits+0x22>

08006900 <__i2b>:
 8006900:	b510      	push	{r4, lr}
 8006902:	000c      	movs	r4, r1
 8006904:	2101      	movs	r1, #1
 8006906:	f7ff ff07 	bl	8006718 <_Balloc>
 800690a:	2800      	cmp	r0, #0
 800690c:	d107      	bne.n	800691e <__i2b+0x1e>
 800690e:	2146      	movs	r1, #70	; 0x46
 8006910:	4c05      	ldr	r4, [pc, #20]	; (8006928 <__i2b+0x28>)
 8006912:	0002      	movs	r2, r0
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <__i2b+0x2c>)
 8006916:	0020      	movs	r0, r4
 8006918:	31ff      	adds	r1, #255	; 0xff
 800691a:	f000 fd53 	bl	80073c4 <__assert_func>
 800691e:	2301      	movs	r3, #1
 8006920:	6144      	str	r4, [r0, #20]
 8006922:	6103      	str	r3, [r0, #16]
 8006924:	bd10      	pop	{r4, pc}
 8006926:	46c0      	nop			; (mov r8, r8)
 8006928:	080077c5 	.word	0x080077c5
 800692c:	080077b4 	.word	0x080077b4

08006930 <__multiply>:
 8006930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006932:	0015      	movs	r5, r2
 8006934:	690a      	ldr	r2, [r1, #16]
 8006936:	692b      	ldr	r3, [r5, #16]
 8006938:	000c      	movs	r4, r1
 800693a:	b08b      	sub	sp, #44	; 0x2c
 800693c:	429a      	cmp	r2, r3
 800693e:	da01      	bge.n	8006944 <__multiply+0x14>
 8006940:	002c      	movs	r4, r5
 8006942:	000d      	movs	r5, r1
 8006944:	6927      	ldr	r7, [r4, #16]
 8006946:	692e      	ldr	r6, [r5, #16]
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	19bb      	adds	r3, r7, r6
 800694c:	9303      	str	r3, [sp, #12]
 800694e:	68a3      	ldr	r3, [r4, #8]
 8006950:	19ba      	adds	r2, r7, r6
 8006952:	4293      	cmp	r3, r2
 8006954:	da00      	bge.n	8006958 <__multiply+0x28>
 8006956:	3101      	adds	r1, #1
 8006958:	f7ff fede 	bl	8006718 <_Balloc>
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	2800      	cmp	r0, #0
 8006960:	d106      	bne.n	8006970 <__multiply+0x40>
 8006962:	21b1      	movs	r1, #177	; 0xb1
 8006964:	4b48      	ldr	r3, [pc, #288]	; (8006a88 <__multiply+0x158>)
 8006966:	4849      	ldr	r0, [pc, #292]	; (8006a8c <__multiply+0x15c>)
 8006968:	9a02      	ldr	r2, [sp, #8]
 800696a:	0049      	lsls	r1, r1, #1
 800696c:	f000 fd2a 	bl	80073c4 <__assert_func>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	3314      	adds	r3, #20
 8006976:	469c      	mov	ip, r3
 8006978:	19bb      	adds	r3, r7, r6
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4463      	add	r3, ip
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	4663      	mov	r3, ip
 8006982:	9904      	ldr	r1, [sp, #16]
 8006984:	428b      	cmp	r3, r1
 8006986:	d32a      	bcc.n	80069de <__multiply+0xae>
 8006988:	0023      	movs	r3, r4
 800698a:	00bf      	lsls	r7, r7, #2
 800698c:	3314      	adds	r3, #20
 800698e:	3514      	adds	r5, #20
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	00b6      	lsls	r6, r6, #2
 8006994:	19db      	adds	r3, r3, r7
 8006996:	9305      	str	r3, [sp, #20]
 8006998:	19ab      	adds	r3, r5, r6
 800699a:	9309      	str	r3, [sp, #36]	; 0x24
 800699c:	2304      	movs	r3, #4
 800699e:	9306      	str	r3, [sp, #24]
 80069a0:	0023      	movs	r3, r4
 80069a2:	9a05      	ldr	r2, [sp, #20]
 80069a4:	3315      	adds	r3, #21
 80069a6:	9501      	str	r5, [sp, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d305      	bcc.n	80069b8 <__multiply+0x88>
 80069ac:	1b13      	subs	r3, r2, r4
 80069ae:	3b15      	subs	r3, #21
 80069b0:	089b      	lsrs	r3, r3, #2
 80069b2:	3301      	adds	r3, #1
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	9306      	str	r3, [sp, #24]
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069bc:	4293      	cmp	r3, r2
 80069be:	d310      	bcc.n	80069e2 <__multiply+0xb2>
 80069c0:	9b03      	ldr	r3, [sp, #12]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	dd05      	ble.n	80069d2 <__multiply+0xa2>
 80069c6:	9b04      	ldr	r3, [sp, #16]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d056      	beq.n	8006a80 <__multiply+0x150>
 80069d2:	9b02      	ldr	r3, [sp, #8]
 80069d4:	9a03      	ldr	r2, [sp, #12]
 80069d6:	0018      	movs	r0, r3
 80069d8:	611a      	str	r2, [r3, #16]
 80069da:	b00b      	add	sp, #44	; 0x2c
 80069dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069de:	c304      	stmia	r3!, {r2}
 80069e0:	e7cf      	b.n	8006982 <__multiply+0x52>
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	b280      	uxth	r0, r0
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d01e      	beq.n	8006a2a <__multiply+0xfa>
 80069ec:	4667      	mov	r7, ip
 80069ee:	2500      	movs	r5, #0
 80069f0:	9e08      	ldr	r6, [sp, #32]
 80069f2:	ce02      	ldmia	r6!, {r1}
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	9307      	str	r3, [sp, #28]
 80069f8:	b28b      	uxth	r3, r1
 80069fa:	4343      	muls	r3, r0
 80069fc:	001a      	movs	r2, r3
 80069fe:	466b      	mov	r3, sp
 8006a00:	8b9b      	ldrh	r3, [r3, #28]
 8006a02:	18d3      	adds	r3, r2, r3
 8006a04:	195b      	adds	r3, r3, r5
 8006a06:	0c0d      	lsrs	r5, r1, #16
 8006a08:	4345      	muls	r5, r0
 8006a0a:	9a07      	ldr	r2, [sp, #28]
 8006a0c:	0c11      	lsrs	r1, r2, #16
 8006a0e:	1869      	adds	r1, r5, r1
 8006a10:	0c1a      	lsrs	r2, r3, #16
 8006a12:	188a      	adds	r2, r1, r2
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	0c15      	lsrs	r5, r2, #16
 8006a18:	0412      	lsls	r2, r2, #16
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	9b05      	ldr	r3, [sp, #20]
 8006a1e:	c704      	stmia	r7!, {r2}
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	d8e6      	bhi.n	80069f2 <__multiply+0xc2>
 8006a24:	4663      	mov	r3, ip
 8006a26:	9a06      	ldr	r2, [sp, #24]
 8006a28:	509d      	str	r5, [r3, r2]
 8006a2a:	9b01      	ldr	r3, [sp, #4]
 8006a2c:	6818      	ldr	r0, [r3, #0]
 8006a2e:	0c00      	lsrs	r0, r0, #16
 8006a30:	d020      	beq.n	8006a74 <__multiply+0x144>
 8006a32:	4663      	mov	r3, ip
 8006a34:	0025      	movs	r5, r4
 8006a36:	4661      	mov	r1, ip
 8006a38:	2700      	movs	r7, #0
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3514      	adds	r5, #20
 8006a3e:	682a      	ldr	r2, [r5, #0]
 8006a40:	680e      	ldr	r6, [r1, #0]
 8006a42:	b292      	uxth	r2, r2
 8006a44:	4342      	muls	r2, r0
 8006a46:	0c36      	lsrs	r6, r6, #16
 8006a48:	1992      	adds	r2, r2, r6
 8006a4a:	19d2      	adds	r2, r2, r7
 8006a4c:	0416      	lsls	r6, r2, #16
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	431e      	orrs	r6, r3
 8006a52:	600e      	str	r6, [r1, #0]
 8006a54:	cd40      	ldmia	r5!, {r6}
 8006a56:	684b      	ldr	r3, [r1, #4]
 8006a58:	0c36      	lsrs	r6, r6, #16
 8006a5a:	4346      	muls	r6, r0
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	0c12      	lsrs	r2, r2, #16
 8006a60:	18f3      	adds	r3, r6, r3
 8006a62:	189b      	adds	r3, r3, r2
 8006a64:	9a05      	ldr	r2, [sp, #20]
 8006a66:	0c1f      	lsrs	r7, r3, #16
 8006a68:	3104      	adds	r1, #4
 8006a6a:	42aa      	cmp	r2, r5
 8006a6c:	d8e7      	bhi.n	8006a3e <__multiply+0x10e>
 8006a6e:	4662      	mov	r2, ip
 8006a70:	9906      	ldr	r1, [sp, #24]
 8006a72:	5053      	str	r3, [r2, r1]
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	3304      	adds	r3, #4
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	449c      	add	ip, r3
 8006a7e:	e79b      	b.n	80069b8 <__multiply+0x88>
 8006a80:	9b03      	ldr	r3, [sp, #12]
 8006a82:	3b01      	subs	r3, #1
 8006a84:	9303      	str	r3, [sp, #12]
 8006a86:	e79b      	b.n	80069c0 <__multiply+0x90>
 8006a88:	080077b4 	.word	0x080077b4
 8006a8c:	080077c5 	.word	0x080077c5

08006a90 <__pow5mult>:
 8006a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a92:	2303      	movs	r3, #3
 8006a94:	0015      	movs	r5, r2
 8006a96:	0007      	movs	r7, r0
 8006a98:	000e      	movs	r6, r1
 8006a9a:	401a      	ands	r2, r3
 8006a9c:	421d      	tst	r5, r3
 8006a9e:	d008      	beq.n	8006ab2 <__pow5mult+0x22>
 8006aa0:	4925      	ldr	r1, [pc, #148]	; (8006b38 <__pow5mult+0xa8>)
 8006aa2:	3a01      	subs	r2, #1
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	5852      	ldr	r2, [r2, r1]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	0031      	movs	r1, r6
 8006aac:	f7ff fe9c 	bl	80067e8 <__multadd>
 8006ab0:	0006      	movs	r6, r0
 8006ab2:	10ad      	asrs	r5, r5, #2
 8006ab4:	d03d      	beq.n	8006b32 <__pow5mult+0xa2>
 8006ab6:	69fc      	ldr	r4, [r7, #28]
 8006ab8:	2c00      	cmp	r4, #0
 8006aba:	d10f      	bne.n	8006adc <__pow5mult+0x4c>
 8006abc:	2010      	movs	r0, #16
 8006abe:	f7ff fd6d 	bl	800659c <malloc>
 8006ac2:	1e02      	subs	r2, r0, #0
 8006ac4:	61f8      	str	r0, [r7, #28]
 8006ac6:	d105      	bne.n	8006ad4 <__pow5mult+0x44>
 8006ac8:	21b4      	movs	r1, #180	; 0xb4
 8006aca:	4b1c      	ldr	r3, [pc, #112]	; (8006b3c <__pow5mult+0xac>)
 8006acc:	481c      	ldr	r0, [pc, #112]	; (8006b40 <__pow5mult+0xb0>)
 8006ace:	31ff      	adds	r1, #255	; 0xff
 8006ad0:	f000 fc78 	bl	80073c4 <__assert_func>
 8006ad4:	6044      	str	r4, [r0, #4]
 8006ad6:	6084      	str	r4, [r0, #8]
 8006ad8:	6004      	str	r4, [r0, #0]
 8006ada:	60c4      	str	r4, [r0, #12]
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	689c      	ldr	r4, [r3, #8]
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	2c00      	cmp	r4, #0
 8006ae4:	d108      	bne.n	8006af8 <__pow5mult+0x68>
 8006ae6:	0038      	movs	r0, r7
 8006ae8:	4916      	ldr	r1, [pc, #88]	; (8006b44 <__pow5mult+0xb4>)
 8006aea:	f7ff ff09 	bl	8006900 <__i2b>
 8006aee:	9b01      	ldr	r3, [sp, #4]
 8006af0:	0004      	movs	r4, r0
 8006af2:	6098      	str	r0, [r3, #8]
 8006af4:	2300      	movs	r3, #0
 8006af6:	6003      	str	r3, [r0, #0]
 8006af8:	2301      	movs	r3, #1
 8006afa:	421d      	tst	r5, r3
 8006afc:	d00a      	beq.n	8006b14 <__pow5mult+0x84>
 8006afe:	0031      	movs	r1, r6
 8006b00:	0022      	movs	r2, r4
 8006b02:	0038      	movs	r0, r7
 8006b04:	f7ff ff14 	bl	8006930 <__multiply>
 8006b08:	0031      	movs	r1, r6
 8006b0a:	9001      	str	r0, [sp, #4]
 8006b0c:	0038      	movs	r0, r7
 8006b0e:	f7ff fe47 	bl	80067a0 <_Bfree>
 8006b12:	9e01      	ldr	r6, [sp, #4]
 8006b14:	106d      	asrs	r5, r5, #1
 8006b16:	d00c      	beq.n	8006b32 <__pow5mult+0xa2>
 8006b18:	6820      	ldr	r0, [r4, #0]
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d107      	bne.n	8006b2e <__pow5mult+0x9e>
 8006b1e:	0022      	movs	r2, r4
 8006b20:	0021      	movs	r1, r4
 8006b22:	0038      	movs	r0, r7
 8006b24:	f7ff ff04 	bl	8006930 <__multiply>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6020      	str	r0, [r4, #0]
 8006b2c:	6003      	str	r3, [r0, #0]
 8006b2e:	0004      	movs	r4, r0
 8006b30:	e7e2      	b.n	8006af8 <__pow5mult+0x68>
 8006b32:	0030      	movs	r0, r6
 8006b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	08007910 	.word	0x08007910
 8006b3c:	08007745 	.word	0x08007745
 8006b40:	080077c5 	.word	0x080077c5
 8006b44:	00000271 	.word	0x00000271

08006b48 <__lshift>:
 8006b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b4a:	000c      	movs	r4, r1
 8006b4c:	0017      	movs	r7, r2
 8006b4e:	6923      	ldr	r3, [r4, #16]
 8006b50:	1155      	asrs	r5, r2, #5
 8006b52:	b087      	sub	sp, #28
 8006b54:	18eb      	adds	r3, r5, r3
 8006b56:	9302      	str	r3, [sp, #8]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	9301      	str	r3, [sp, #4]
 8006b5c:	6849      	ldr	r1, [r1, #4]
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	9004      	str	r0, [sp, #16]
 8006b62:	9a01      	ldr	r2, [sp, #4]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	db10      	blt.n	8006b8a <__lshift+0x42>
 8006b68:	9804      	ldr	r0, [sp, #16]
 8006b6a:	f7ff fdd5 	bl	8006718 <_Balloc>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	0002      	movs	r2, r0
 8006b72:	0006      	movs	r6, r0
 8006b74:	0019      	movs	r1, r3
 8006b76:	3214      	adds	r2, #20
 8006b78:	4298      	cmp	r0, r3
 8006b7a:	d10c      	bne.n	8006b96 <__lshift+0x4e>
 8006b7c:	31df      	adds	r1, #223	; 0xdf
 8006b7e:	0032      	movs	r2, r6
 8006b80:	4b26      	ldr	r3, [pc, #152]	; (8006c1c <__lshift+0xd4>)
 8006b82:	4827      	ldr	r0, [pc, #156]	; (8006c20 <__lshift+0xd8>)
 8006b84:	31ff      	adds	r1, #255	; 0xff
 8006b86:	f000 fc1d 	bl	80073c4 <__assert_func>
 8006b8a:	3101      	adds	r1, #1
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	e7e8      	b.n	8006b62 <__lshift+0x1a>
 8006b90:	0098      	lsls	r0, r3, #2
 8006b92:	5011      	str	r1, [r2, r0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	dbfa      	blt.n	8006b90 <__lshift+0x48>
 8006b9a:	43eb      	mvns	r3, r5
 8006b9c:	17db      	asrs	r3, r3, #31
 8006b9e:	401d      	ands	r5, r3
 8006ba0:	211f      	movs	r1, #31
 8006ba2:	0023      	movs	r3, r4
 8006ba4:	0038      	movs	r0, r7
 8006ba6:	00ad      	lsls	r5, r5, #2
 8006ba8:	1955      	adds	r5, r2, r5
 8006baa:	6922      	ldr	r2, [r4, #16]
 8006bac:	3314      	adds	r3, #20
 8006bae:	0092      	lsls	r2, r2, #2
 8006bb0:	4008      	ands	r0, r1
 8006bb2:	4684      	mov	ip, r0
 8006bb4:	189a      	adds	r2, r3, r2
 8006bb6:	420f      	tst	r7, r1
 8006bb8:	d02a      	beq.n	8006c10 <__lshift+0xc8>
 8006bba:	3101      	adds	r1, #1
 8006bbc:	1a09      	subs	r1, r1, r0
 8006bbe:	9105      	str	r1, [sp, #20]
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	9503      	str	r5, [sp, #12]
 8006bc4:	4667      	mov	r7, ip
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	40b8      	lsls	r0, r7
 8006bca:	4308      	orrs	r0, r1
 8006bcc:	9903      	ldr	r1, [sp, #12]
 8006bce:	c101      	stmia	r1!, {r0}
 8006bd0:	9103      	str	r1, [sp, #12]
 8006bd2:	9805      	ldr	r0, [sp, #20]
 8006bd4:	cb02      	ldmia	r3!, {r1}
 8006bd6:	40c1      	lsrs	r1, r0
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d8f3      	bhi.n	8006bc4 <__lshift+0x7c>
 8006bdc:	0020      	movs	r0, r4
 8006bde:	3015      	adds	r0, #21
 8006be0:	2304      	movs	r3, #4
 8006be2:	4282      	cmp	r2, r0
 8006be4:	d304      	bcc.n	8006bf0 <__lshift+0xa8>
 8006be6:	1b13      	subs	r3, r2, r4
 8006be8:	3b15      	subs	r3, #21
 8006bea:	089b      	lsrs	r3, r3, #2
 8006bec:	3301      	adds	r3, #1
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	50e9      	str	r1, [r5, r3]
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	d002      	beq.n	8006bfc <__lshift+0xb4>
 8006bf6:	9b02      	ldr	r3, [sp, #8]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	9b01      	ldr	r3, [sp, #4]
 8006bfe:	9804      	ldr	r0, [sp, #16]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	0021      	movs	r1, r4
 8006c04:	6133      	str	r3, [r6, #16]
 8006c06:	f7ff fdcb 	bl	80067a0 <_Bfree>
 8006c0a:	0030      	movs	r0, r6
 8006c0c:	b007      	add	sp, #28
 8006c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c10:	cb02      	ldmia	r3!, {r1}
 8006c12:	c502      	stmia	r5!, {r1}
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d8fb      	bhi.n	8006c10 <__lshift+0xc8>
 8006c18:	e7f0      	b.n	8006bfc <__lshift+0xb4>
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	080077b4 	.word	0x080077b4
 8006c20:	080077c5 	.word	0x080077c5

08006c24 <__mcmp>:
 8006c24:	b530      	push	{r4, r5, lr}
 8006c26:	690b      	ldr	r3, [r1, #16]
 8006c28:	6904      	ldr	r4, [r0, #16]
 8006c2a:	0002      	movs	r2, r0
 8006c2c:	1ae0      	subs	r0, r4, r3
 8006c2e:	429c      	cmp	r4, r3
 8006c30:	d10e      	bne.n	8006c50 <__mcmp+0x2c>
 8006c32:	3214      	adds	r2, #20
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	3114      	adds	r1, #20
 8006c38:	0014      	movs	r4, r2
 8006c3a:	18c9      	adds	r1, r1, r3
 8006c3c:	18d2      	adds	r2, r2, r3
 8006c3e:	3a04      	subs	r2, #4
 8006c40:	3904      	subs	r1, #4
 8006c42:	6815      	ldr	r5, [r2, #0]
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	429d      	cmp	r5, r3
 8006c48:	d003      	beq.n	8006c52 <__mcmp+0x2e>
 8006c4a:	2001      	movs	r0, #1
 8006c4c:	429d      	cmp	r5, r3
 8006c4e:	d303      	bcc.n	8006c58 <__mcmp+0x34>
 8006c50:	bd30      	pop	{r4, r5, pc}
 8006c52:	4294      	cmp	r4, r2
 8006c54:	d3f3      	bcc.n	8006c3e <__mcmp+0x1a>
 8006c56:	e7fb      	b.n	8006c50 <__mcmp+0x2c>
 8006c58:	4240      	negs	r0, r0
 8006c5a:	e7f9      	b.n	8006c50 <__mcmp+0x2c>

08006c5c <__mdiff>:
 8006c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5e:	000e      	movs	r6, r1
 8006c60:	0007      	movs	r7, r0
 8006c62:	0011      	movs	r1, r2
 8006c64:	0030      	movs	r0, r6
 8006c66:	b087      	sub	sp, #28
 8006c68:	0014      	movs	r4, r2
 8006c6a:	f7ff ffdb 	bl	8006c24 <__mcmp>
 8006c6e:	1e05      	subs	r5, r0, #0
 8006c70:	d110      	bne.n	8006c94 <__mdiff+0x38>
 8006c72:	0001      	movs	r1, r0
 8006c74:	0038      	movs	r0, r7
 8006c76:	f7ff fd4f 	bl	8006718 <_Balloc>
 8006c7a:	1e02      	subs	r2, r0, #0
 8006c7c:	d104      	bne.n	8006c88 <__mdiff+0x2c>
 8006c7e:	4b3f      	ldr	r3, [pc, #252]	; (8006d7c <__mdiff+0x120>)
 8006c80:	483f      	ldr	r0, [pc, #252]	; (8006d80 <__mdiff+0x124>)
 8006c82:	4940      	ldr	r1, [pc, #256]	; (8006d84 <__mdiff+0x128>)
 8006c84:	f000 fb9e 	bl	80073c4 <__assert_func>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	6145      	str	r5, [r0, #20]
 8006c8c:	6103      	str	r3, [r0, #16]
 8006c8e:	0010      	movs	r0, r2
 8006c90:	b007      	add	sp, #28
 8006c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c94:	2301      	movs	r3, #1
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	db04      	blt.n	8006ca6 <__mdiff+0x4a>
 8006c9c:	0023      	movs	r3, r4
 8006c9e:	0034      	movs	r4, r6
 8006ca0:	001e      	movs	r6, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	0038      	movs	r0, r7
 8006ca8:	6861      	ldr	r1, [r4, #4]
 8006caa:	f7ff fd35 	bl	8006718 <_Balloc>
 8006cae:	1e02      	subs	r2, r0, #0
 8006cb0:	d103      	bne.n	8006cba <__mdiff+0x5e>
 8006cb2:	4b32      	ldr	r3, [pc, #200]	; (8006d7c <__mdiff+0x120>)
 8006cb4:	4832      	ldr	r0, [pc, #200]	; (8006d80 <__mdiff+0x124>)
 8006cb6:	4934      	ldr	r1, [pc, #208]	; (8006d88 <__mdiff+0x12c>)
 8006cb8:	e7e4      	b.n	8006c84 <__mdiff+0x28>
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	60c3      	str	r3, [r0, #12]
 8006cc0:	6920      	ldr	r0, [r4, #16]
 8006cc2:	3414      	adds	r4, #20
 8006cc4:	0083      	lsls	r3, r0, #2
 8006cc6:	18e3      	adds	r3, r4, r3
 8006cc8:	0021      	movs	r1, r4
 8006cca:	9401      	str	r4, [sp, #4]
 8006ccc:	0034      	movs	r4, r6
 8006cce:	9302      	str	r3, [sp, #8]
 8006cd0:	6933      	ldr	r3, [r6, #16]
 8006cd2:	3414      	adds	r4, #20
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	18e3      	adds	r3, r4, r3
 8006cd8:	9303      	str	r3, [sp, #12]
 8006cda:	0013      	movs	r3, r2
 8006cdc:	3314      	adds	r3, #20
 8006cde:	469c      	mov	ip, r3
 8006ce0:	9305      	str	r3, [sp, #20]
 8006ce2:	9104      	str	r1, [sp, #16]
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	cc02      	ldmia	r4!, {r1}
 8006ce8:	cb20      	ldmia	r3!, {r5}
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	b2ab      	uxth	r3, r5
 8006cee:	19df      	adds	r7, r3, r7
 8006cf0:	b28b      	uxth	r3, r1
 8006cf2:	1afb      	subs	r3, r7, r3
 8006cf4:	0c09      	lsrs	r1, r1, #16
 8006cf6:	0c2d      	lsrs	r5, r5, #16
 8006cf8:	1a6d      	subs	r5, r5, r1
 8006cfa:	1419      	asrs	r1, r3, #16
 8006cfc:	1869      	adds	r1, r5, r1
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	140f      	asrs	r7, r1, #16
 8006d02:	0409      	lsls	r1, r1, #16
 8006d04:	4319      	orrs	r1, r3
 8006d06:	4663      	mov	r3, ip
 8006d08:	c302      	stmia	r3!, {r1}
 8006d0a:	469c      	mov	ip, r3
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	42a3      	cmp	r3, r4
 8006d10:	d8e8      	bhi.n	8006ce4 <__mdiff+0x88>
 8006d12:	0031      	movs	r1, r6
 8006d14:	9c03      	ldr	r4, [sp, #12]
 8006d16:	3115      	adds	r1, #21
 8006d18:	2304      	movs	r3, #4
 8006d1a:	428c      	cmp	r4, r1
 8006d1c:	d304      	bcc.n	8006d28 <__mdiff+0xcc>
 8006d1e:	1ba3      	subs	r3, r4, r6
 8006d20:	3b15      	subs	r3, #21
 8006d22:	089b      	lsrs	r3, r3, #2
 8006d24:	3301      	adds	r3, #1
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	9901      	ldr	r1, [sp, #4]
 8006d2a:	18cd      	adds	r5, r1, r3
 8006d2c:	9905      	ldr	r1, [sp, #20]
 8006d2e:	002e      	movs	r6, r5
 8006d30:	18cb      	adds	r3, r1, r3
 8006d32:	469c      	mov	ip, r3
 8006d34:	9902      	ldr	r1, [sp, #8]
 8006d36:	428e      	cmp	r6, r1
 8006d38:	d310      	bcc.n	8006d5c <__mdiff+0x100>
 8006d3a:	9e02      	ldr	r6, [sp, #8]
 8006d3c:	1ee9      	subs	r1, r5, #3
 8006d3e:	2400      	movs	r4, #0
 8006d40:	428e      	cmp	r6, r1
 8006d42:	d304      	bcc.n	8006d4e <__mdiff+0xf2>
 8006d44:	0031      	movs	r1, r6
 8006d46:	3103      	adds	r1, #3
 8006d48:	1b49      	subs	r1, r1, r5
 8006d4a:	0889      	lsrs	r1, r1, #2
 8006d4c:	008c      	lsls	r4, r1, #2
 8006d4e:	191b      	adds	r3, r3, r4
 8006d50:	3b04      	subs	r3, #4
 8006d52:	6819      	ldr	r1, [r3, #0]
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d00f      	beq.n	8006d78 <__mdiff+0x11c>
 8006d58:	6110      	str	r0, [r2, #16]
 8006d5a:	e798      	b.n	8006c8e <__mdiff+0x32>
 8006d5c:	ce02      	ldmia	r6!, {r1}
 8006d5e:	b28c      	uxth	r4, r1
 8006d60:	19e4      	adds	r4, r4, r7
 8006d62:	0c0f      	lsrs	r7, r1, #16
 8006d64:	1421      	asrs	r1, r4, #16
 8006d66:	1879      	adds	r1, r7, r1
 8006d68:	b2a4      	uxth	r4, r4
 8006d6a:	140f      	asrs	r7, r1, #16
 8006d6c:	0409      	lsls	r1, r1, #16
 8006d6e:	4321      	orrs	r1, r4
 8006d70:	4664      	mov	r4, ip
 8006d72:	c402      	stmia	r4!, {r1}
 8006d74:	46a4      	mov	ip, r4
 8006d76:	e7dd      	b.n	8006d34 <__mdiff+0xd8>
 8006d78:	3801      	subs	r0, #1
 8006d7a:	e7e9      	b.n	8006d50 <__mdiff+0xf4>
 8006d7c:	080077b4 	.word	0x080077b4
 8006d80:	080077c5 	.word	0x080077c5
 8006d84:	00000237 	.word	0x00000237
 8006d88:	00000245 	.word	0x00000245

08006d8c <__d2b>:
 8006d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d8e:	2101      	movs	r1, #1
 8006d90:	0014      	movs	r4, r2
 8006d92:	001d      	movs	r5, r3
 8006d94:	9f08      	ldr	r7, [sp, #32]
 8006d96:	f7ff fcbf 	bl	8006718 <_Balloc>
 8006d9a:	1e06      	subs	r6, r0, #0
 8006d9c:	d105      	bne.n	8006daa <__d2b+0x1e>
 8006d9e:	0032      	movs	r2, r6
 8006da0:	4b24      	ldr	r3, [pc, #144]	; (8006e34 <__d2b+0xa8>)
 8006da2:	4825      	ldr	r0, [pc, #148]	; (8006e38 <__d2b+0xac>)
 8006da4:	4925      	ldr	r1, [pc, #148]	; (8006e3c <__d2b+0xb0>)
 8006da6:	f000 fb0d 	bl	80073c4 <__assert_func>
 8006daa:	032b      	lsls	r3, r5, #12
 8006dac:	006d      	lsls	r5, r5, #1
 8006dae:	0b1b      	lsrs	r3, r3, #12
 8006db0:	0d6d      	lsrs	r5, r5, #21
 8006db2:	d125      	bne.n	8006e00 <__d2b+0x74>
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	d028      	beq.n	8006e0c <__d2b+0x80>
 8006dba:	4668      	mov	r0, sp
 8006dbc:	9400      	str	r4, [sp, #0]
 8006dbe:	f7ff fd71 	bl	80068a4 <__lo0bits>
 8006dc2:	9b01      	ldr	r3, [sp, #4]
 8006dc4:	9900      	ldr	r1, [sp, #0]
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d01e      	beq.n	8006e08 <__d2b+0x7c>
 8006dca:	2220      	movs	r2, #32
 8006dcc:	001c      	movs	r4, r3
 8006dce:	1a12      	subs	r2, r2, r0
 8006dd0:	4094      	lsls	r4, r2
 8006dd2:	0022      	movs	r2, r4
 8006dd4:	40c3      	lsrs	r3, r0
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	6172      	str	r2, [r6, #20]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	9c01      	ldr	r4, [sp, #4]
 8006dde:	61b4      	str	r4, [r6, #24]
 8006de0:	1e63      	subs	r3, r4, #1
 8006de2:	419c      	sbcs	r4, r3
 8006de4:	3401      	adds	r4, #1
 8006de6:	6134      	str	r4, [r6, #16]
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	d017      	beq.n	8006e1c <__d2b+0x90>
 8006dec:	2435      	movs	r4, #53	; 0x35
 8006dee:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <__d2b+0xb4>)
 8006df0:	18ed      	adds	r5, r5, r3
 8006df2:	182d      	adds	r5, r5, r0
 8006df4:	603d      	str	r5, [r7, #0]
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	1a24      	subs	r4, r4, r0
 8006dfa:	601c      	str	r4, [r3, #0]
 8006dfc:	0030      	movs	r0, r6
 8006dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e00:	2280      	movs	r2, #128	; 0x80
 8006e02:	0352      	lsls	r2, r2, #13
 8006e04:	4313      	orrs	r3, r2
 8006e06:	e7d5      	b.n	8006db4 <__d2b+0x28>
 8006e08:	6171      	str	r1, [r6, #20]
 8006e0a:	e7e7      	b.n	8006ddc <__d2b+0x50>
 8006e0c:	a801      	add	r0, sp, #4
 8006e0e:	f7ff fd49 	bl	80068a4 <__lo0bits>
 8006e12:	9b01      	ldr	r3, [sp, #4]
 8006e14:	2401      	movs	r4, #1
 8006e16:	6173      	str	r3, [r6, #20]
 8006e18:	3020      	adds	r0, #32
 8006e1a:	e7e4      	b.n	8006de6 <__d2b+0x5a>
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <__d2b+0xb8>)
 8006e1e:	18c0      	adds	r0, r0, r3
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <__d2b+0xbc>)
 8006e22:	6038      	str	r0, [r7, #0]
 8006e24:	18e3      	adds	r3, r4, r3
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	18f3      	adds	r3, r6, r3
 8006e2a:	6958      	ldr	r0, [r3, #20]
 8006e2c:	f7ff fd20 	bl	8006870 <__hi0bits>
 8006e30:	0164      	lsls	r4, r4, #5
 8006e32:	e7e0      	b.n	8006df6 <__d2b+0x6a>
 8006e34:	080077b4 	.word	0x080077b4
 8006e38:	080077c5 	.word	0x080077c5
 8006e3c:	0000030f 	.word	0x0000030f
 8006e40:	fffffbcd 	.word	0xfffffbcd
 8006e44:	fffffbce 	.word	0xfffffbce
 8006e48:	3fffffff 	.word	0x3fffffff

08006e4c <__sfputc_r>:
 8006e4c:	6893      	ldr	r3, [r2, #8]
 8006e4e:	b510      	push	{r4, lr}
 8006e50:	3b01      	subs	r3, #1
 8006e52:	6093      	str	r3, [r2, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da04      	bge.n	8006e62 <__sfputc_r+0x16>
 8006e58:	6994      	ldr	r4, [r2, #24]
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	db07      	blt.n	8006e6e <__sfputc_r+0x22>
 8006e5e:	290a      	cmp	r1, #10
 8006e60:	d005      	beq.n	8006e6e <__sfputc_r+0x22>
 8006e62:	6813      	ldr	r3, [r2, #0]
 8006e64:	1c58      	adds	r0, r3, #1
 8006e66:	6010      	str	r0, [r2, #0]
 8006e68:	7019      	strb	r1, [r3, #0]
 8006e6a:	0008      	movs	r0, r1
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	f000 f9e6 	bl	800723e <__swbuf_r>
 8006e72:	0001      	movs	r1, r0
 8006e74:	e7f9      	b.n	8006e6a <__sfputc_r+0x1e>

08006e76 <__sfputs_r>:
 8006e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e78:	0006      	movs	r6, r0
 8006e7a:	000f      	movs	r7, r1
 8006e7c:	0014      	movs	r4, r2
 8006e7e:	18d5      	adds	r5, r2, r3
 8006e80:	42ac      	cmp	r4, r5
 8006e82:	d101      	bne.n	8006e88 <__sfputs_r+0x12>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e007      	b.n	8006e98 <__sfputs_r+0x22>
 8006e88:	7821      	ldrb	r1, [r4, #0]
 8006e8a:	003a      	movs	r2, r7
 8006e8c:	0030      	movs	r0, r6
 8006e8e:	f7ff ffdd 	bl	8006e4c <__sfputc_r>
 8006e92:	3401      	adds	r4, #1
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d1f3      	bne.n	8006e80 <__sfputs_r+0xa>
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e9c <_vfiprintf_r>:
 8006e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9e:	b0a1      	sub	sp, #132	; 0x84
 8006ea0:	000f      	movs	r7, r1
 8006ea2:	0015      	movs	r5, r2
 8006ea4:	001e      	movs	r6, r3
 8006ea6:	9003      	str	r0, [sp, #12]
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d004      	beq.n	8006eb6 <_vfiprintf_r+0x1a>
 8006eac:	6a03      	ldr	r3, [r0, #32]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <_vfiprintf_r+0x1a>
 8006eb2:	f7fe fb69 	bl	8005588 <__sinit>
 8006eb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eb8:	07db      	lsls	r3, r3, #31
 8006eba:	d405      	bmi.n	8006ec8 <_vfiprintf_r+0x2c>
 8006ebc:	89bb      	ldrh	r3, [r7, #12]
 8006ebe:	059b      	lsls	r3, r3, #22
 8006ec0:	d402      	bmi.n	8006ec8 <_vfiprintf_r+0x2c>
 8006ec2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006ec4:	f7fe fc75 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8006ec8:	89bb      	ldrh	r3, [r7, #12]
 8006eca:	071b      	lsls	r3, r3, #28
 8006ecc:	d502      	bpl.n	8006ed4 <_vfiprintf_r+0x38>
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d113      	bne.n	8006efc <_vfiprintf_r+0x60>
 8006ed4:	0039      	movs	r1, r7
 8006ed6:	9803      	ldr	r0, [sp, #12]
 8006ed8:	f000 f9f4 	bl	80072c4 <__swsetup_r>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d00d      	beq.n	8006efc <_vfiprintf_r+0x60>
 8006ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee2:	07db      	lsls	r3, r3, #31
 8006ee4:	d503      	bpl.n	8006eee <_vfiprintf_r+0x52>
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	4240      	negs	r0, r0
 8006eea:	b021      	add	sp, #132	; 0x84
 8006eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eee:	89bb      	ldrh	r3, [r7, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d4f8      	bmi.n	8006ee6 <_vfiprintf_r+0x4a>
 8006ef4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006ef6:	f7fe fc5d 	bl	80057b4 <__retarget_lock_release_recursive>
 8006efa:	e7f4      	b.n	8006ee6 <_vfiprintf_r+0x4a>
 8006efc:	2300      	movs	r3, #0
 8006efe:	ac08      	add	r4, sp, #32
 8006f00:	6163      	str	r3, [r4, #20]
 8006f02:	3320      	adds	r3, #32
 8006f04:	7663      	strb	r3, [r4, #25]
 8006f06:	3310      	adds	r3, #16
 8006f08:	76a3      	strb	r3, [r4, #26]
 8006f0a:	9607      	str	r6, [sp, #28]
 8006f0c:	002e      	movs	r6, r5
 8006f0e:	7833      	ldrb	r3, [r6, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <_vfiprintf_r+0x7c>
 8006f14:	2b25      	cmp	r3, #37	; 0x25
 8006f16:	d148      	bne.n	8006faa <_vfiprintf_r+0x10e>
 8006f18:	1b73      	subs	r3, r6, r5
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	42ae      	cmp	r6, r5
 8006f1e:	d00b      	beq.n	8006f38 <_vfiprintf_r+0x9c>
 8006f20:	002a      	movs	r2, r5
 8006f22:	0039      	movs	r1, r7
 8006f24:	9803      	ldr	r0, [sp, #12]
 8006f26:	f7ff ffa6 	bl	8006e76 <__sfputs_r>
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d100      	bne.n	8006f30 <_vfiprintf_r+0x94>
 8006f2e:	e0af      	b.n	8007090 <_vfiprintf_r+0x1f4>
 8006f30:	6963      	ldr	r3, [r4, #20]
 8006f32:	9a05      	ldr	r2, [sp, #20]
 8006f34:	189b      	adds	r3, r3, r2
 8006f36:	6163      	str	r3, [r4, #20]
 8006f38:	7833      	ldrb	r3, [r6, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d100      	bne.n	8006f40 <_vfiprintf_r+0xa4>
 8006f3e:	e0a7      	b.n	8007090 <_vfiprintf_r+0x1f4>
 8006f40:	2201      	movs	r2, #1
 8006f42:	2300      	movs	r3, #0
 8006f44:	4252      	negs	r2, r2
 8006f46:	6062      	str	r2, [r4, #4]
 8006f48:	a904      	add	r1, sp, #16
 8006f4a:	3254      	adds	r2, #84	; 0x54
 8006f4c:	1852      	adds	r2, r2, r1
 8006f4e:	1c75      	adds	r5, r6, #1
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	60e3      	str	r3, [r4, #12]
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	7013      	strb	r3, [r2, #0]
 8006f58:	65a3      	str	r3, [r4, #88]	; 0x58
 8006f5a:	4b59      	ldr	r3, [pc, #356]	; (80070c0 <_vfiprintf_r+0x224>)
 8006f5c:	2205      	movs	r2, #5
 8006f5e:	0018      	movs	r0, r3
 8006f60:	7829      	ldrb	r1, [r5, #0]
 8006f62:	9305      	str	r3, [sp, #20]
 8006f64:	f7fe fc27 	bl	80057b6 <memchr>
 8006f68:	1c6e      	adds	r6, r5, #1
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d11f      	bne.n	8006fae <_vfiprintf_r+0x112>
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	06d3      	lsls	r3, r2, #27
 8006f72:	d504      	bpl.n	8006f7e <_vfiprintf_r+0xe2>
 8006f74:	2353      	movs	r3, #83	; 0x53
 8006f76:	a904      	add	r1, sp, #16
 8006f78:	185b      	adds	r3, r3, r1
 8006f7a:	2120      	movs	r1, #32
 8006f7c:	7019      	strb	r1, [r3, #0]
 8006f7e:	0713      	lsls	r3, r2, #28
 8006f80:	d504      	bpl.n	8006f8c <_vfiprintf_r+0xf0>
 8006f82:	2353      	movs	r3, #83	; 0x53
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	185b      	adds	r3, r3, r1
 8006f88:	212b      	movs	r1, #43	; 0x2b
 8006f8a:	7019      	strb	r1, [r3, #0]
 8006f8c:	782b      	ldrb	r3, [r5, #0]
 8006f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f90:	d016      	beq.n	8006fc0 <_vfiprintf_r+0x124>
 8006f92:	002e      	movs	r6, r5
 8006f94:	2100      	movs	r1, #0
 8006f96:	200a      	movs	r0, #10
 8006f98:	68e3      	ldr	r3, [r4, #12]
 8006f9a:	7832      	ldrb	r2, [r6, #0]
 8006f9c:	1c75      	adds	r5, r6, #1
 8006f9e:	3a30      	subs	r2, #48	; 0x30
 8006fa0:	2a09      	cmp	r2, #9
 8006fa2:	d94e      	bls.n	8007042 <_vfiprintf_r+0x1a6>
 8006fa4:	2900      	cmp	r1, #0
 8006fa6:	d111      	bne.n	8006fcc <_vfiprintf_r+0x130>
 8006fa8:	e017      	b.n	8006fda <_vfiprintf_r+0x13e>
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7af      	b.n	8006f0e <_vfiprintf_r+0x72>
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	1ac0      	subs	r0, r0, r3
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	4083      	lsls	r3, r0
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	0035      	movs	r5, r6
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	e7cc      	b.n	8006f5a <_vfiprintf_r+0xbe>
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	1d19      	adds	r1, r3, #4
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	9107      	str	r1, [sp, #28]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db01      	blt.n	8006fd0 <_vfiprintf_r+0x134>
 8006fcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fce:	e004      	b.n	8006fda <_vfiprintf_r+0x13e>
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	60e3      	str	r3, [r4, #12]
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	7833      	ldrb	r3, [r6, #0]
 8006fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8006fde:	d10a      	bne.n	8006ff6 <_vfiprintf_r+0x15a>
 8006fe0:	7873      	ldrb	r3, [r6, #1]
 8006fe2:	2b2a      	cmp	r3, #42	; 0x2a
 8006fe4:	d135      	bne.n	8007052 <_vfiprintf_r+0x1b6>
 8006fe6:	9b07      	ldr	r3, [sp, #28]
 8006fe8:	3602      	adds	r6, #2
 8006fea:	1d1a      	adds	r2, r3, #4
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	9207      	str	r2, [sp, #28]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	db2b      	blt.n	800704c <_vfiprintf_r+0x1b0>
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	4d33      	ldr	r5, [pc, #204]	; (80070c4 <_vfiprintf_r+0x228>)
 8006ff8:	2203      	movs	r2, #3
 8006ffa:	0028      	movs	r0, r5
 8006ffc:	7831      	ldrb	r1, [r6, #0]
 8006ffe:	f7fe fbda 	bl	80057b6 <memchr>
 8007002:	2800      	cmp	r0, #0
 8007004:	d006      	beq.n	8007014 <_vfiprintf_r+0x178>
 8007006:	2340      	movs	r3, #64	; 0x40
 8007008:	1b40      	subs	r0, r0, r5
 800700a:	4083      	lsls	r3, r0
 800700c:	6822      	ldr	r2, [r4, #0]
 800700e:	3601      	adds	r6, #1
 8007010:	4313      	orrs	r3, r2
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	7831      	ldrb	r1, [r6, #0]
 8007016:	2206      	movs	r2, #6
 8007018:	482b      	ldr	r0, [pc, #172]	; (80070c8 <_vfiprintf_r+0x22c>)
 800701a:	1c75      	adds	r5, r6, #1
 800701c:	7621      	strb	r1, [r4, #24]
 800701e:	f7fe fbca 	bl	80057b6 <memchr>
 8007022:	2800      	cmp	r0, #0
 8007024:	d043      	beq.n	80070ae <_vfiprintf_r+0x212>
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <_vfiprintf_r+0x230>)
 8007028:	2b00      	cmp	r3, #0
 800702a:	d125      	bne.n	8007078 <_vfiprintf_r+0x1dc>
 800702c:	2207      	movs	r2, #7
 800702e:	9b07      	ldr	r3, [sp, #28]
 8007030:	3307      	adds	r3, #7
 8007032:	4393      	bics	r3, r2
 8007034:	3308      	adds	r3, #8
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	6963      	ldr	r3, [r4, #20]
 800703a:	9a04      	ldr	r2, [sp, #16]
 800703c:	189b      	adds	r3, r3, r2
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	e764      	b.n	8006f0c <_vfiprintf_r+0x70>
 8007042:	4343      	muls	r3, r0
 8007044:	002e      	movs	r6, r5
 8007046:	2101      	movs	r1, #1
 8007048:	189b      	adds	r3, r3, r2
 800704a:	e7a6      	b.n	8006f9a <_vfiprintf_r+0xfe>
 800704c:	2301      	movs	r3, #1
 800704e:	425b      	negs	r3, r3
 8007050:	e7d0      	b.n	8006ff4 <_vfiprintf_r+0x158>
 8007052:	2300      	movs	r3, #0
 8007054:	200a      	movs	r0, #10
 8007056:	001a      	movs	r2, r3
 8007058:	3601      	adds	r6, #1
 800705a:	6063      	str	r3, [r4, #4]
 800705c:	7831      	ldrb	r1, [r6, #0]
 800705e:	1c75      	adds	r5, r6, #1
 8007060:	3930      	subs	r1, #48	; 0x30
 8007062:	2909      	cmp	r1, #9
 8007064:	d903      	bls.n	800706e <_vfiprintf_r+0x1d2>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0c5      	beq.n	8006ff6 <_vfiprintf_r+0x15a>
 800706a:	9209      	str	r2, [sp, #36]	; 0x24
 800706c:	e7c3      	b.n	8006ff6 <_vfiprintf_r+0x15a>
 800706e:	4342      	muls	r2, r0
 8007070:	002e      	movs	r6, r5
 8007072:	2301      	movs	r3, #1
 8007074:	1852      	adds	r2, r2, r1
 8007076:	e7f1      	b.n	800705c <_vfiprintf_r+0x1c0>
 8007078:	aa07      	add	r2, sp, #28
 800707a:	9200      	str	r2, [sp, #0]
 800707c:	0021      	movs	r1, r4
 800707e:	003a      	movs	r2, r7
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <_vfiprintf_r+0x234>)
 8007082:	9803      	ldr	r0, [sp, #12]
 8007084:	f7fd fe1a 	bl	8004cbc <_printf_float>
 8007088:	9004      	str	r0, [sp, #16]
 800708a:	9b04      	ldr	r3, [sp, #16]
 800708c:	3301      	adds	r3, #1
 800708e:	d1d3      	bne.n	8007038 <_vfiprintf_r+0x19c>
 8007090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007092:	07db      	lsls	r3, r3, #31
 8007094:	d405      	bmi.n	80070a2 <_vfiprintf_r+0x206>
 8007096:	89bb      	ldrh	r3, [r7, #12]
 8007098:	059b      	lsls	r3, r3, #22
 800709a:	d402      	bmi.n	80070a2 <_vfiprintf_r+0x206>
 800709c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800709e:	f7fe fb89 	bl	80057b4 <__retarget_lock_release_recursive>
 80070a2:	89bb      	ldrh	r3, [r7, #12]
 80070a4:	065b      	lsls	r3, r3, #25
 80070a6:	d500      	bpl.n	80070aa <_vfiprintf_r+0x20e>
 80070a8:	e71d      	b.n	8006ee6 <_vfiprintf_r+0x4a>
 80070aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070ac:	e71d      	b.n	8006eea <_vfiprintf_r+0x4e>
 80070ae:	aa07      	add	r2, sp, #28
 80070b0:	9200      	str	r2, [sp, #0]
 80070b2:	0021      	movs	r1, r4
 80070b4:	003a      	movs	r2, r7
 80070b6:	4b06      	ldr	r3, [pc, #24]	; (80070d0 <_vfiprintf_r+0x234>)
 80070b8:	9803      	ldr	r0, [sp, #12]
 80070ba:	f7fe f8c5 	bl	8005248 <_printf_i>
 80070be:	e7e3      	b.n	8007088 <_vfiprintf_r+0x1ec>
 80070c0:	0800791c 	.word	0x0800791c
 80070c4:	08007922 	.word	0x08007922
 80070c8:	08007926 	.word	0x08007926
 80070cc:	08004cbd 	.word	0x08004cbd
 80070d0:	08006e77 	.word	0x08006e77

080070d4 <__sflush_r>:
 80070d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d6:	898b      	ldrh	r3, [r1, #12]
 80070d8:	0005      	movs	r5, r0
 80070da:	000c      	movs	r4, r1
 80070dc:	071a      	lsls	r2, r3, #28
 80070de:	d45c      	bmi.n	800719a <__sflush_r+0xc6>
 80070e0:	684a      	ldr	r2, [r1, #4]
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	dc04      	bgt.n	80070f0 <__sflush_r+0x1c>
 80070e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80070e8:	2a00      	cmp	r2, #0
 80070ea:	dc01      	bgt.n	80070f0 <__sflush_r+0x1c>
 80070ec:	2000      	movs	r0, #0
 80070ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80070f2:	2f00      	cmp	r7, #0
 80070f4:	d0fa      	beq.n	80070ec <__sflush_r+0x18>
 80070f6:	2200      	movs	r2, #0
 80070f8:	2080      	movs	r0, #128	; 0x80
 80070fa:	682e      	ldr	r6, [r5, #0]
 80070fc:	602a      	str	r2, [r5, #0]
 80070fe:	001a      	movs	r2, r3
 8007100:	0140      	lsls	r0, r0, #5
 8007102:	6a21      	ldr	r1, [r4, #32]
 8007104:	4002      	ands	r2, r0
 8007106:	4203      	tst	r3, r0
 8007108:	d034      	beq.n	8007174 <__sflush_r+0xa0>
 800710a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	075b      	lsls	r3, r3, #29
 8007110:	d506      	bpl.n	8007120 <__sflush_r+0x4c>
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	1ac0      	subs	r0, r0, r3
 8007116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <__sflush_r+0x4c>
 800711c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800711e:	1ac0      	subs	r0, r0, r3
 8007120:	0002      	movs	r2, r0
 8007122:	2300      	movs	r3, #0
 8007124:	0028      	movs	r0, r5
 8007126:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007128:	6a21      	ldr	r1, [r4, #32]
 800712a:	47b8      	blx	r7
 800712c:	89a2      	ldrh	r2, [r4, #12]
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	d106      	bne.n	8007140 <__sflush_r+0x6c>
 8007132:	6829      	ldr	r1, [r5, #0]
 8007134:	291d      	cmp	r1, #29
 8007136:	d82c      	bhi.n	8007192 <__sflush_r+0xbe>
 8007138:	4b2a      	ldr	r3, [pc, #168]	; (80071e4 <__sflush_r+0x110>)
 800713a:	410b      	asrs	r3, r1
 800713c:	07db      	lsls	r3, r3, #31
 800713e:	d428      	bmi.n	8007192 <__sflush_r+0xbe>
 8007140:	2300      	movs	r3, #0
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	04d2      	lsls	r2, r2, #19
 800714a:	d505      	bpl.n	8007158 <__sflush_r+0x84>
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d102      	bne.n	8007156 <__sflush_r+0x82>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d100      	bne.n	8007158 <__sflush_r+0x84>
 8007156:	6560      	str	r0, [r4, #84]	; 0x54
 8007158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800715a:	602e      	str	r6, [r5, #0]
 800715c:	2900      	cmp	r1, #0
 800715e:	d0c5      	beq.n	80070ec <__sflush_r+0x18>
 8007160:	0023      	movs	r3, r4
 8007162:	3344      	adds	r3, #68	; 0x44
 8007164:	4299      	cmp	r1, r3
 8007166:	d002      	beq.n	800716e <__sflush_r+0x9a>
 8007168:	0028      	movs	r0, r5
 800716a:	f7ff f9cd 	bl	8006508 <_free_r>
 800716e:	2000      	movs	r0, #0
 8007170:	6360      	str	r0, [r4, #52]	; 0x34
 8007172:	e7bc      	b.n	80070ee <__sflush_r+0x1a>
 8007174:	2301      	movs	r3, #1
 8007176:	0028      	movs	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	d1c6      	bne.n	800710c <__sflush_r+0x38>
 800717e:	682b      	ldr	r3, [r5, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0c3      	beq.n	800710c <__sflush_r+0x38>
 8007184:	2b1d      	cmp	r3, #29
 8007186:	d001      	beq.n	800718c <__sflush_r+0xb8>
 8007188:	2b16      	cmp	r3, #22
 800718a:	d101      	bne.n	8007190 <__sflush_r+0xbc>
 800718c:	602e      	str	r6, [r5, #0]
 800718e:	e7ad      	b.n	80070ec <__sflush_r+0x18>
 8007190:	89a2      	ldrh	r2, [r4, #12]
 8007192:	2340      	movs	r3, #64	; 0x40
 8007194:	4313      	orrs	r3, r2
 8007196:	81a3      	strh	r3, [r4, #12]
 8007198:	e7a9      	b.n	80070ee <__sflush_r+0x1a>
 800719a:	690e      	ldr	r6, [r1, #16]
 800719c:	2e00      	cmp	r6, #0
 800719e:	d0a5      	beq.n	80070ec <__sflush_r+0x18>
 80071a0:	680f      	ldr	r7, [r1, #0]
 80071a2:	600e      	str	r6, [r1, #0]
 80071a4:	1bba      	subs	r2, r7, r6
 80071a6:	9201      	str	r2, [sp, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	079b      	lsls	r3, r3, #30
 80071ac:	d100      	bne.n	80071b0 <__sflush_r+0xdc>
 80071ae:	694a      	ldr	r2, [r1, #20]
 80071b0:	60a2      	str	r2, [r4, #8]
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dd99      	ble.n	80070ec <__sflush_r+0x18>
 80071b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071ba:	0032      	movs	r2, r6
 80071bc:	001f      	movs	r7, r3
 80071be:	0028      	movs	r0, r5
 80071c0:	9b01      	ldr	r3, [sp, #4]
 80071c2:	6a21      	ldr	r1, [r4, #32]
 80071c4:	47b8      	blx	r7
 80071c6:	2800      	cmp	r0, #0
 80071c8:	dc06      	bgt.n	80071d8 <__sflush_r+0x104>
 80071ca:	2340      	movs	r3, #64	; 0x40
 80071cc:	2001      	movs	r0, #1
 80071ce:	89a2      	ldrh	r2, [r4, #12]
 80071d0:	4240      	negs	r0, r0
 80071d2:	4313      	orrs	r3, r2
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	e78a      	b.n	80070ee <__sflush_r+0x1a>
 80071d8:	9b01      	ldr	r3, [sp, #4]
 80071da:	1836      	adds	r6, r6, r0
 80071dc:	1a1b      	subs	r3, r3, r0
 80071de:	9301      	str	r3, [sp, #4]
 80071e0:	e7e7      	b.n	80071b2 <__sflush_r+0xde>
 80071e2:	46c0      	nop			; (mov r8, r8)
 80071e4:	dfbffffe 	.word	0xdfbffffe

080071e8 <_fflush_r>:
 80071e8:	690b      	ldr	r3, [r1, #16]
 80071ea:	b570      	push	{r4, r5, r6, lr}
 80071ec:	0005      	movs	r5, r0
 80071ee:	000c      	movs	r4, r1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <_fflush_r+0x12>
 80071f4:	2500      	movs	r5, #0
 80071f6:	0028      	movs	r0, r5
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
 80071fa:	2800      	cmp	r0, #0
 80071fc:	d004      	beq.n	8007208 <_fflush_r+0x20>
 80071fe:	6a03      	ldr	r3, [r0, #32]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <_fflush_r+0x20>
 8007204:	f7fe f9c0 	bl	8005588 <__sinit>
 8007208:	220c      	movs	r2, #12
 800720a:	5ea3      	ldrsh	r3, [r4, r2]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f1      	beq.n	80071f4 <_fflush_r+0xc>
 8007210:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007212:	07d2      	lsls	r2, r2, #31
 8007214:	d404      	bmi.n	8007220 <_fflush_r+0x38>
 8007216:	059b      	lsls	r3, r3, #22
 8007218:	d402      	bmi.n	8007220 <_fflush_r+0x38>
 800721a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800721c:	f7fe fac9 	bl	80057b2 <__retarget_lock_acquire_recursive>
 8007220:	0028      	movs	r0, r5
 8007222:	0021      	movs	r1, r4
 8007224:	f7ff ff56 	bl	80070d4 <__sflush_r>
 8007228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800722a:	0005      	movs	r5, r0
 800722c:	07db      	lsls	r3, r3, #31
 800722e:	d4e2      	bmi.n	80071f6 <_fflush_r+0xe>
 8007230:	89a3      	ldrh	r3, [r4, #12]
 8007232:	059b      	lsls	r3, r3, #22
 8007234:	d4df      	bmi.n	80071f6 <_fflush_r+0xe>
 8007236:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007238:	f7fe fabc 	bl	80057b4 <__retarget_lock_release_recursive>
 800723c:	e7db      	b.n	80071f6 <_fflush_r+0xe>

0800723e <__swbuf_r>:
 800723e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007240:	0006      	movs	r6, r0
 8007242:	000d      	movs	r5, r1
 8007244:	0014      	movs	r4, r2
 8007246:	2800      	cmp	r0, #0
 8007248:	d004      	beq.n	8007254 <__swbuf_r+0x16>
 800724a:	6a03      	ldr	r3, [r0, #32]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d101      	bne.n	8007254 <__swbuf_r+0x16>
 8007250:	f7fe f99a 	bl	8005588 <__sinit>
 8007254:	69a3      	ldr	r3, [r4, #24]
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	89a3      	ldrh	r3, [r4, #12]
 800725a:	071b      	lsls	r3, r3, #28
 800725c:	d528      	bpl.n	80072b0 <__swbuf_r+0x72>
 800725e:	6923      	ldr	r3, [r4, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d025      	beq.n	80072b0 <__swbuf_r+0x72>
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	6820      	ldr	r0, [r4, #0]
 8007268:	b2ef      	uxtb	r7, r5
 800726a:	1ac0      	subs	r0, r0, r3
 800726c:	6963      	ldr	r3, [r4, #20]
 800726e:	b2ed      	uxtb	r5, r5
 8007270:	4283      	cmp	r3, r0
 8007272:	dc05      	bgt.n	8007280 <__swbuf_r+0x42>
 8007274:	0021      	movs	r1, r4
 8007276:	0030      	movs	r0, r6
 8007278:	f7ff ffb6 	bl	80071e8 <_fflush_r>
 800727c:	2800      	cmp	r0, #0
 800727e:	d11d      	bne.n	80072bc <__swbuf_r+0x7e>
 8007280:	68a3      	ldr	r3, [r4, #8]
 8007282:	3001      	adds	r0, #1
 8007284:	3b01      	subs	r3, #1
 8007286:	60a3      	str	r3, [r4, #8]
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	6022      	str	r2, [r4, #0]
 800728e:	701f      	strb	r7, [r3, #0]
 8007290:	6963      	ldr	r3, [r4, #20]
 8007292:	4283      	cmp	r3, r0
 8007294:	d004      	beq.n	80072a0 <__swbuf_r+0x62>
 8007296:	89a3      	ldrh	r3, [r4, #12]
 8007298:	07db      	lsls	r3, r3, #31
 800729a:	d507      	bpl.n	80072ac <__swbuf_r+0x6e>
 800729c:	2d0a      	cmp	r5, #10
 800729e:	d105      	bne.n	80072ac <__swbuf_r+0x6e>
 80072a0:	0021      	movs	r1, r4
 80072a2:	0030      	movs	r0, r6
 80072a4:	f7ff ffa0 	bl	80071e8 <_fflush_r>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	d107      	bne.n	80072bc <__swbuf_r+0x7e>
 80072ac:	0028      	movs	r0, r5
 80072ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b0:	0021      	movs	r1, r4
 80072b2:	0030      	movs	r0, r6
 80072b4:	f000 f806 	bl	80072c4 <__swsetup_r>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	d0d3      	beq.n	8007264 <__swbuf_r+0x26>
 80072bc:	2501      	movs	r5, #1
 80072be:	426d      	negs	r5, r5
 80072c0:	e7f4      	b.n	80072ac <__swbuf_r+0x6e>
	...

080072c4 <__swsetup_r>:
 80072c4:	4b30      	ldr	r3, [pc, #192]	; (8007388 <__swsetup_r+0xc4>)
 80072c6:	b570      	push	{r4, r5, r6, lr}
 80072c8:	0005      	movs	r5, r0
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	000c      	movs	r4, r1
 80072ce:	2800      	cmp	r0, #0
 80072d0:	d004      	beq.n	80072dc <__swsetup_r+0x18>
 80072d2:	6a03      	ldr	r3, [r0, #32]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <__swsetup_r+0x18>
 80072d8:	f7fe f956 	bl	8005588 <__sinit>
 80072dc:	230c      	movs	r3, #12
 80072de:	5ee2      	ldrsh	r2, [r4, r3]
 80072e0:	b293      	uxth	r3, r2
 80072e2:	0711      	lsls	r1, r2, #28
 80072e4:	d423      	bmi.n	800732e <__swsetup_r+0x6a>
 80072e6:	06d9      	lsls	r1, r3, #27
 80072e8:	d407      	bmi.n	80072fa <__swsetup_r+0x36>
 80072ea:	2309      	movs	r3, #9
 80072ec:	2001      	movs	r0, #1
 80072ee:	602b      	str	r3, [r5, #0]
 80072f0:	3337      	adds	r3, #55	; 0x37
 80072f2:	4313      	orrs	r3, r2
 80072f4:	81a3      	strh	r3, [r4, #12]
 80072f6:	4240      	negs	r0, r0
 80072f8:	bd70      	pop	{r4, r5, r6, pc}
 80072fa:	075b      	lsls	r3, r3, #29
 80072fc:	d513      	bpl.n	8007326 <__swsetup_r+0x62>
 80072fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007300:	2900      	cmp	r1, #0
 8007302:	d008      	beq.n	8007316 <__swsetup_r+0x52>
 8007304:	0023      	movs	r3, r4
 8007306:	3344      	adds	r3, #68	; 0x44
 8007308:	4299      	cmp	r1, r3
 800730a:	d002      	beq.n	8007312 <__swsetup_r+0x4e>
 800730c:	0028      	movs	r0, r5
 800730e:	f7ff f8fb 	bl	8006508 <_free_r>
 8007312:	2300      	movs	r3, #0
 8007314:	6363      	str	r3, [r4, #52]	; 0x34
 8007316:	2224      	movs	r2, #36	; 0x24
 8007318:	89a3      	ldrh	r3, [r4, #12]
 800731a:	4393      	bics	r3, r2
 800731c:	81a3      	strh	r3, [r4, #12]
 800731e:	2300      	movs	r3, #0
 8007320:	6063      	str	r3, [r4, #4]
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2308      	movs	r3, #8
 8007328:	89a2      	ldrh	r2, [r4, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	81a3      	strh	r3, [r4, #12]
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <__swsetup_r+0x88>
 8007334:	21a0      	movs	r1, #160	; 0xa0
 8007336:	2280      	movs	r2, #128	; 0x80
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	0089      	lsls	r1, r1, #2
 800733c:	0092      	lsls	r2, r2, #2
 800733e:	400b      	ands	r3, r1
 8007340:	4293      	cmp	r3, r2
 8007342:	d003      	beq.n	800734c <__swsetup_r+0x88>
 8007344:	0021      	movs	r1, r4
 8007346:	0028      	movs	r0, r5
 8007348:	f000 f8de 	bl	8007508 <__smakebuf_r>
 800734c:	220c      	movs	r2, #12
 800734e:	5ea3      	ldrsh	r3, [r4, r2]
 8007350:	2001      	movs	r0, #1
 8007352:	001a      	movs	r2, r3
 8007354:	b299      	uxth	r1, r3
 8007356:	4002      	ands	r2, r0
 8007358:	4203      	tst	r3, r0
 800735a:	d00f      	beq.n	800737c <__swsetup_r+0xb8>
 800735c:	2200      	movs	r2, #0
 800735e:	60a2      	str	r2, [r4, #8]
 8007360:	6962      	ldr	r2, [r4, #20]
 8007362:	4252      	negs	r2, r2
 8007364:	61a2      	str	r2, [r4, #24]
 8007366:	2000      	movs	r0, #0
 8007368:	6922      	ldr	r2, [r4, #16]
 800736a:	4282      	cmp	r2, r0
 800736c:	d1c4      	bne.n	80072f8 <__swsetup_r+0x34>
 800736e:	0609      	lsls	r1, r1, #24
 8007370:	d5c2      	bpl.n	80072f8 <__swsetup_r+0x34>
 8007372:	2240      	movs	r2, #64	; 0x40
 8007374:	4313      	orrs	r3, r2
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	3801      	subs	r0, #1
 800737a:	e7bd      	b.n	80072f8 <__swsetup_r+0x34>
 800737c:	0788      	lsls	r0, r1, #30
 800737e:	d400      	bmi.n	8007382 <__swsetup_r+0xbe>
 8007380:	6962      	ldr	r2, [r4, #20]
 8007382:	60a2      	str	r2, [r4, #8]
 8007384:	e7ef      	b.n	8007366 <__swsetup_r+0xa2>
 8007386:	46c0      	nop			; (mov r8, r8)
 8007388:	20000074 	.word	0x20000074

0800738c <_sbrk_r>:
 800738c:	2300      	movs	r3, #0
 800738e:	b570      	push	{r4, r5, r6, lr}
 8007390:	4d06      	ldr	r5, [pc, #24]	; (80073ac <_sbrk_r+0x20>)
 8007392:	0004      	movs	r4, r0
 8007394:	0008      	movs	r0, r1
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	f7fb fe26 	bl	8002fe8 <_sbrk>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d103      	bne.n	80073a8 <_sbrk_r+0x1c>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d000      	beq.n	80073a8 <_sbrk_r+0x1c>
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	bd70      	pop	{r4, r5, r6, pc}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	200003fc 	.word	0x200003fc

080073b0 <memcpy>:
 80073b0:	2300      	movs	r3, #0
 80073b2:	b510      	push	{r4, lr}
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d100      	bne.n	80073ba <memcpy+0xa>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	5ccc      	ldrb	r4, [r1, r3]
 80073bc:	54c4      	strb	r4, [r0, r3]
 80073be:	3301      	adds	r3, #1
 80073c0:	e7f8      	b.n	80073b4 <memcpy+0x4>
	...

080073c4 <__assert_func>:
 80073c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80073c6:	0014      	movs	r4, r2
 80073c8:	001a      	movs	r2, r3
 80073ca:	4b09      	ldr	r3, [pc, #36]	; (80073f0 <__assert_func+0x2c>)
 80073cc:	0005      	movs	r5, r0
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	000e      	movs	r6, r1
 80073d2:	68d8      	ldr	r0, [r3, #12]
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <__assert_func+0x30>)
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	d101      	bne.n	80073de <__assert_func+0x1a>
 80073da:	4b07      	ldr	r3, [pc, #28]	; (80073f8 <__assert_func+0x34>)
 80073dc:	001c      	movs	r4, r3
 80073de:	4907      	ldr	r1, [pc, #28]	; (80073fc <__assert_func+0x38>)
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	9402      	str	r4, [sp, #8]
 80073e4:	002b      	movs	r3, r5
 80073e6:	9600      	str	r6, [sp, #0]
 80073e8:	f000 f856 	bl	8007498 <fiprintf>
 80073ec:	f000 f8ee 	bl	80075cc <abort>
 80073f0:	20000074 	.word	0x20000074
 80073f4:	08007937 	.word	0x08007937
 80073f8:	08007972 	.word	0x08007972
 80073fc:	08007944 	.word	0x08007944

08007400 <_calloc_r>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	0c0b      	lsrs	r3, r1, #16
 8007404:	0c15      	lsrs	r5, r2, #16
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11e      	bne.n	8007448 <_calloc_r+0x48>
 800740a:	2d00      	cmp	r5, #0
 800740c:	d10c      	bne.n	8007428 <_calloc_r+0x28>
 800740e:	b289      	uxth	r1, r1
 8007410:	b294      	uxth	r4, r2
 8007412:	434c      	muls	r4, r1
 8007414:	0021      	movs	r1, r4
 8007416:	f7ff f8ed 	bl	80065f4 <_malloc_r>
 800741a:	1e05      	subs	r5, r0, #0
 800741c:	d01b      	beq.n	8007456 <_calloc_r+0x56>
 800741e:	0022      	movs	r2, r4
 8007420:	2100      	movs	r1, #0
 8007422:	f7fe f941 	bl	80056a8 <memset>
 8007426:	e016      	b.n	8007456 <_calloc_r+0x56>
 8007428:	1c2b      	adds	r3, r5, #0
 800742a:	1c0c      	adds	r4, r1, #0
 800742c:	b289      	uxth	r1, r1
 800742e:	b292      	uxth	r2, r2
 8007430:	434a      	muls	r2, r1
 8007432:	b2a1      	uxth	r1, r4
 8007434:	b29c      	uxth	r4, r3
 8007436:	434c      	muls	r4, r1
 8007438:	0c13      	lsrs	r3, r2, #16
 800743a:	18e4      	adds	r4, r4, r3
 800743c:	0c23      	lsrs	r3, r4, #16
 800743e:	d107      	bne.n	8007450 <_calloc_r+0x50>
 8007440:	0424      	lsls	r4, r4, #16
 8007442:	b292      	uxth	r2, r2
 8007444:	4314      	orrs	r4, r2
 8007446:	e7e5      	b.n	8007414 <_calloc_r+0x14>
 8007448:	2d00      	cmp	r5, #0
 800744a:	d101      	bne.n	8007450 <_calloc_r+0x50>
 800744c:	1c14      	adds	r4, r2, #0
 800744e:	e7ed      	b.n	800742c <_calloc_r+0x2c>
 8007450:	230c      	movs	r3, #12
 8007452:	2500      	movs	r5, #0
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	0028      	movs	r0, r5
 8007458:	bd70      	pop	{r4, r5, r6, pc}

0800745a <__ascii_mbtowc>:
 800745a:	b082      	sub	sp, #8
 800745c:	2900      	cmp	r1, #0
 800745e:	d100      	bne.n	8007462 <__ascii_mbtowc+0x8>
 8007460:	a901      	add	r1, sp, #4
 8007462:	1e10      	subs	r0, r2, #0
 8007464:	d006      	beq.n	8007474 <__ascii_mbtowc+0x1a>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d006      	beq.n	8007478 <__ascii_mbtowc+0x1e>
 800746a:	7813      	ldrb	r3, [r2, #0]
 800746c:	600b      	str	r3, [r1, #0]
 800746e:	7810      	ldrb	r0, [r2, #0]
 8007470:	1e43      	subs	r3, r0, #1
 8007472:	4198      	sbcs	r0, r3
 8007474:	b002      	add	sp, #8
 8007476:	4770      	bx	lr
 8007478:	2002      	movs	r0, #2
 800747a:	4240      	negs	r0, r0
 800747c:	e7fa      	b.n	8007474 <__ascii_mbtowc+0x1a>

0800747e <__ascii_wctomb>:
 800747e:	0003      	movs	r3, r0
 8007480:	1e08      	subs	r0, r1, #0
 8007482:	d005      	beq.n	8007490 <__ascii_wctomb+0x12>
 8007484:	2aff      	cmp	r2, #255	; 0xff
 8007486:	d904      	bls.n	8007492 <__ascii_wctomb+0x14>
 8007488:	228a      	movs	r2, #138	; 0x8a
 800748a:	2001      	movs	r0, #1
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	4240      	negs	r0, r0
 8007490:	4770      	bx	lr
 8007492:	2001      	movs	r0, #1
 8007494:	700a      	strb	r2, [r1, #0]
 8007496:	e7fb      	b.n	8007490 <__ascii_wctomb+0x12>

08007498 <fiprintf>:
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	b517      	push	{r0, r1, r2, r4, lr}
 800749c:	4c05      	ldr	r4, [pc, #20]	; (80074b4 <fiprintf+0x1c>)
 800749e:	ab05      	add	r3, sp, #20
 80074a0:	cb04      	ldmia	r3!, {r2}
 80074a2:	0001      	movs	r1, r0
 80074a4:	6820      	ldr	r0, [r4, #0]
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	f7ff fcf8 	bl	8006e9c <_vfiprintf_r>
 80074ac:	bc1e      	pop	{r1, r2, r3, r4}
 80074ae:	bc08      	pop	{r3}
 80074b0:	b003      	add	sp, #12
 80074b2:	4718      	bx	r3
 80074b4:	20000074 	.word	0x20000074

080074b8 <__swhatbuf_r>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	000e      	movs	r6, r1
 80074bc:	001d      	movs	r5, r3
 80074be:	230e      	movs	r3, #14
 80074c0:	5ec9      	ldrsh	r1, [r1, r3]
 80074c2:	0014      	movs	r4, r2
 80074c4:	b096      	sub	sp, #88	; 0x58
 80074c6:	2900      	cmp	r1, #0
 80074c8:	da0c      	bge.n	80074e4 <__swhatbuf_r+0x2c>
 80074ca:	89b2      	ldrh	r2, [r6, #12]
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	0011      	movs	r1, r2
 80074d0:	4019      	ands	r1, r3
 80074d2:	421a      	tst	r2, r3
 80074d4:	d013      	beq.n	80074fe <__swhatbuf_r+0x46>
 80074d6:	2100      	movs	r1, #0
 80074d8:	3b40      	subs	r3, #64	; 0x40
 80074da:	2000      	movs	r0, #0
 80074dc:	6029      	str	r1, [r5, #0]
 80074de:	6023      	str	r3, [r4, #0]
 80074e0:	b016      	add	sp, #88	; 0x58
 80074e2:	bd70      	pop	{r4, r5, r6, pc}
 80074e4:	466a      	mov	r2, sp
 80074e6:	f000 f84d 	bl	8007584 <_fstat_r>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	dbed      	blt.n	80074ca <__swhatbuf_r+0x12>
 80074ee:	23f0      	movs	r3, #240	; 0xf0
 80074f0:	9901      	ldr	r1, [sp, #4]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	4019      	ands	r1, r3
 80074f6:	4b03      	ldr	r3, [pc, #12]	; (8007504 <__swhatbuf_r+0x4c>)
 80074f8:	18c9      	adds	r1, r1, r3
 80074fa:	424b      	negs	r3, r1
 80074fc:	4159      	adcs	r1, r3
 80074fe:	2380      	movs	r3, #128	; 0x80
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	e7ea      	b.n	80074da <__swhatbuf_r+0x22>
 8007504:	ffffe000 	.word	0xffffe000

08007508 <__smakebuf_r>:
 8007508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800750a:	2602      	movs	r6, #2
 800750c:	898b      	ldrh	r3, [r1, #12]
 800750e:	0005      	movs	r5, r0
 8007510:	000c      	movs	r4, r1
 8007512:	4233      	tst	r3, r6
 8007514:	d006      	beq.n	8007524 <__smakebuf_r+0x1c>
 8007516:	0023      	movs	r3, r4
 8007518:	3347      	adds	r3, #71	; 0x47
 800751a:	6023      	str	r3, [r4, #0]
 800751c:	6123      	str	r3, [r4, #16]
 800751e:	2301      	movs	r3, #1
 8007520:	6163      	str	r3, [r4, #20]
 8007522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007524:	466a      	mov	r2, sp
 8007526:	ab01      	add	r3, sp, #4
 8007528:	f7ff ffc6 	bl	80074b8 <__swhatbuf_r>
 800752c:	9900      	ldr	r1, [sp, #0]
 800752e:	0007      	movs	r7, r0
 8007530:	0028      	movs	r0, r5
 8007532:	f7ff f85f 	bl	80065f4 <_malloc_r>
 8007536:	2800      	cmp	r0, #0
 8007538:	d108      	bne.n	800754c <__smakebuf_r+0x44>
 800753a:	220c      	movs	r2, #12
 800753c:	5ea3      	ldrsh	r3, [r4, r2]
 800753e:	059a      	lsls	r2, r3, #22
 8007540:	d4ef      	bmi.n	8007522 <__smakebuf_r+0x1a>
 8007542:	2203      	movs	r2, #3
 8007544:	4393      	bics	r3, r2
 8007546:	431e      	orrs	r6, r3
 8007548:	81a6      	strh	r6, [r4, #12]
 800754a:	e7e4      	b.n	8007516 <__smakebuf_r+0xe>
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	89a2      	ldrh	r2, [r4, #12]
 8007550:	6020      	str	r0, [r4, #0]
 8007552:	4313      	orrs	r3, r2
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	6120      	str	r0, [r4, #16]
 800755a:	6163      	str	r3, [r4, #20]
 800755c:	9b01      	ldr	r3, [sp, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00c      	beq.n	800757c <__smakebuf_r+0x74>
 8007562:	0028      	movs	r0, r5
 8007564:	230e      	movs	r3, #14
 8007566:	5ee1      	ldrsh	r1, [r4, r3]
 8007568:	f000 f81e 	bl	80075a8 <_isatty_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	d005      	beq.n	800757c <__smakebuf_r+0x74>
 8007570:	2303      	movs	r3, #3
 8007572:	89a2      	ldrh	r2, [r4, #12]
 8007574:	439a      	bics	r2, r3
 8007576:	3b02      	subs	r3, #2
 8007578:	4313      	orrs	r3, r2
 800757a:	81a3      	strh	r3, [r4, #12]
 800757c:	89a3      	ldrh	r3, [r4, #12]
 800757e:	433b      	orrs	r3, r7
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	e7ce      	b.n	8007522 <__smakebuf_r+0x1a>

08007584 <_fstat_r>:
 8007584:	2300      	movs	r3, #0
 8007586:	b570      	push	{r4, r5, r6, lr}
 8007588:	4d06      	ldr	r5, [pc, #24]	; (80075a4 <_fstat_r+0x20>)
 800758a:	0004      	movs	r4, r0
 800758c:	0008      	movs	r0, r1
 800758e:	0011      	movs	r1, r2
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	f7fb fd06 	bl	8002fa2 <_fstat>
 8007596:	1c43      	adds	r3, r0, #1
 8007598:	d103      	bne.n	80075a2 <_fstat_r+0x1e>
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d000      	beq.n	80075a2 <_fstat_r+0x1e>
 80075a0:	6023      	str	r3, [r4, #0]
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	200003fc 	.word	0x200003fc

080075a8 <_isatty_r>:
 80075a8:	2300      	movs	r3, #0
 80075aa:	b570      	push	{r4, r5, r6, lr}
 80075ac:	4d06      	ldr	r5, [pc, #24]	; (80075c8 <_isatty_r+0x20>)
 80075ae:	0004      	movs	r4, r0
 80075b0:	0008      	movs	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fb fd03 	bl	8002fbe <_isatty>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d103      	bne.n	80075c4 <_isatty_r+0x1c>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d000      	beq.n	80075c4 <_isatty_r+0x1c>
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	bd70      	pop	{r4, r5, r6, pc}
 80075c6:	46c0      	nop			; (mov r8, r8)
 80075c8:	200003fc 	.word	0x200003fc

080075cc <abort>:
 80075cc:	2006      	movs	r0, #6
 80075ce:	b510      	push	{r4, lr}
 80075d0:	f000 f82e 	bl	8007630 <raise>
 80075d4:	2001      	movs	r0, #1
 80075d6:	f7fb fc95 	bl	8002f04 <_exit>

080075da <_raise_r>:
 80075da:	b570      	push	{r4, r5, r6, lr}
 80075dc:	0004      	movs	r4, r0
 80075de:	000d      	movs	r5, r1
 80075e0:	291f      	cmp	r1, #31
 80075e2:	d904      	bls.n	80075ee <_raise_r+0x14>
 80075e4:	2316      	movs	r3, #22
 80075e6:	6003      	str	r3, [r0, #0]
 80075e8:	2001      	movs	r0, #1
 80075ea:	4240      	negs	r0, r0
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <_raise_r+0x24>
 80075f4:	008a      	lsls	r2, r1, #2
 80075f6:	189b      	adds	r3, r3, r2
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	2a00      	cmp	r2, #0
 80075fc:	d108      	bne.n	8007610 <_raise_r+0x36>
 80075fe:	0020      	movs	r0, r4
 8007600:	f000 f832 	bl	8007668 <_getpid_r>
 8007604:	002a      	movs	r2, r5
 8007606:	0001      	movs	r1, r0
 8007608:	0020      	movs	r0, r4
 800760a:	f000 f81b 	bl	8007644 <_kill_r>
 800760e:	e7ed      	b.n	80075ec <_raise_r+0x12>
 8007610:	2000      	movs	r0, #0
 8007612:	2a01      	cmp	r2, #1
 8007614:	d0ea      	beq.n	80075ec <_raise_r+0x12>
 8007616:	1c51      	adds	r1, r2, #1
 8007618:	d103      	bne.n	8007622 <_raise_r+0x48>
 800761a:	2316      	movs	r3, #22
 800761c:	3001      	adds	r0, #1
 800761e:	6023      	str	r3, [r4, #0]
 8007620:	e7e4      	b.n	80075ec <_raise_r+0x12>
 8007622:	2400      	movs	r4, #0
 8007624:	0028      	movs	r0, r5
 8007626:	601c      	str	r4, [r3, #0]
 8007628:	4790      	blx	r2
 800762a:	0020      	movs	r0, r4
 800762c:	e7de      	b.n	80075ec <_raise_r+0x12>
	...

08007630 <raise>:
 8007630:	b510      	push	{r4, lr}
 8007632:	4b03      	ldr	r3, [pc, #12]	; (8007640 <raise+0x10>)
 8007634:	0001      	movs	r1, r0
 8007636:	6818      	ldr	r0, [r3, #0]
 8007638:	f7ff ffcf 	bl	80075da <_raise_r>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	20000074 	.word	0x20000074

08007644 <_kill_r>:
 8007644:	2300      	movs	r3, #0
 8007646:	b570      	push	{r4, r5, r6, lr}
 8007648:	4d06      	ldr	r5, [pc, #24]	; (8007664 <_kill_r+0x20>)
 800764a:	0004      	movs	r4, r0
 800764c:	0008      	movs	r0, r1
 800764e:	0011      	movs	r1, r2
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	f7fb fc47 	bl	8002ee4 <_kill>
 8007656:	1c43      	adds	r3, r0, #1
 8007658:	d103      	bne.n	8007662 <_kill_r+0x1e>
 800765a:	682b      	ldr	r3, [r5, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d000      	beq.n	8007662 <_kill_r+0x1e>
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	bd70      	pop	{r4, r5, r6, pc}
 8007664:	200003fc 	.word	0x200003fc

08007668 <_getpid_r>:
 8007668:	b510      	push	{r4, lr}
 800766a:	f7fb fc35 	bl	8002ed8 <_getpid>
 800766e:	bd10      	pop	{r4, pc}

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
